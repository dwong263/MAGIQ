
;; Function int read_data(int*, Preprocess*, IOFiles*, Data_file_header*, Data_block_header*, Precision2*, FILE**, Procpar_info*, Precision1*, float**, float**, int, InFile_struct*, bool) (_Z9read_dataPiP10PreprocessP7IOFilesP16Data_file_headerP17Data_block_headerP10Precision2PP8_IO_FILEP12Procpar_infoP10Precision1PPfSI_iP13InFile_structb, funcdef_no=1021, decl_uid=24381, cgraph_uid=226, symbol_order=227)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 9:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=797 from oldreg=93, assigning class GENERAL_REGS to r797
   47: {r797:DI=r797:DI<<0x6;clobber flags:CC;}
      REG_DEAD r92:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1252: r797:DI=r92:DI
    Inserting insn reload after:
 1253: r93:DI=r797:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 49
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 60:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 73:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 86:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 99:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 112:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 138:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 149
	 Choosing alt 0 in insn 149:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 155:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 156:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 159:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 165:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 168:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 169:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 170:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 178:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 185:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 187:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 195:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 202:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 209:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 211:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 219:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 224:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 225:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 226:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 233:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 239:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 240:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 247:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 253:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 254:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 261:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 263:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 269:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 270:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) r {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 277:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 279:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 282:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 285:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 289:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 292:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 293:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 299:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=798 from oldreg=169, assigning class GENERAL_REGS to r798
  299: {r798:DI=r798:DI<<0x6;clobber flags:CC;}
      REG_DEAD r168:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1254: r798:DI=r168:DI
    Inserting insn reload after:
 1255: r169:DI=r798:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 300:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 301
	 Choosing alt 0 in insn 301:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 305:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=799 from oldreg=173, assigning class GENERAL_REGS to r799
  305: {r799:DI=r799:DI<<0x6;clobber flags:CC;}
      REG_DEAD r172:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1256: r799:DI=r172:DI
    Inserting insn reload after:
 1257: r173:DI=r799:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 307
	 Choosing alt 0 in insn 307:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 309
	 Choosing alt 2 in insn 309:  (0) r  (1) 0  (2) mr {*muldi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 310:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 313:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=800 from oldreg=177, assigning class GENERAL_REGS to r800
  313: {r800:DI=r800:DI<<0x6;clobber flags:CC;}
      REG_DEAD r176:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1258: r800:DI=r176:DI
    Inserting insn reload after:
 1259: r177:DI=r800:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 314:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 315
	 Choosing alt 0 in insn 315:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 316:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 319:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=801 from oldreg=181, assigning class GENERAL_REGS to r801
  319: {r801:DI=r801:DI<<0x6;clobber flags:CC;}
      REG_DEAD r180:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1260: r801:DI=r180:DI
    Inserting insn reload after:
 1261: r181:DI=r801:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 320:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 321
	 Choosing alt 0 in insn 321:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 322:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 323:  (0) r  (1) 0  (2) mr {*muldi3_1}
      Creating newreg=802 from oldreg=184, assigning class GENERAL_REGS to r802
  323: {r802:DI=r802:DI*r183:DI;clobber flags:CC;}
      REG_DEAD r183:DI
      REG_DEAD r179:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1262: r802:DI=r179:DI
    Inserting insn reload after:
 1263: r184:DI=r802:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 325:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 328:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 332:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 333
	 Choosing alt 0 in insn 333:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 336
	 Choosing alt 2 in insn 336:  (0) r  (1) 0  (2) mr {*muldi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 337:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 339:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 346:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 347
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 350:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 352
	 Choosing alt 2 in insn 352:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 353:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 364:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 367:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 368:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 369:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 371:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 377:  (0) r  (1) rem {*movdi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 380:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 381:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 382:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 383:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 391:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 396:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 397:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 403:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 404:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 411:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 413:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 414:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 416:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 417:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 424:  (0) r  (1) rem {*movdi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 427:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 428:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 429:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 437:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=803 from oldreg=208, assigning class GENERAL_REGS to r803
  437: {r803:DI=r803:DI<<0x9;clobber flags:CC;}
      REG_DEAD r207:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1264: r803:DI=r207:DI
    Inserting insn reload after:
 1265: r208:DI=r803:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 439
	 Choosing alt 0 in insn 439:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 446:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 449:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=804 from oldreg=214, assigning class GENERAL_REGS to r804
  449: {r804:DI=r804:DI<<0x9;clobber flags:CC;}
      REG_DEAD r213:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1266: r804:DI=r213:DI
    Inserting insn reload after:
 1267: r214:DI=r804:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 450:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 451
	 Choosing alt 0 in insn 451:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 458:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 459:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 461:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 462:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 463:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =<  (1) re*m {*pushdi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =r  (1) g {*movsi_internal} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =X  (1) re {*pushsi2_rex64} (sp_off=-8)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) rBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 474:  (0) =r  (1) %0  (2) rme {*adddi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 475:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 476:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 480:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 484:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=805 from oldreg=220, assigning class GENERAL_REGS to r805
  484: {r805:DI=r805:DI<<0x9;clobber flags:CC;}
      REG_DEAD r219:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1268: r805:DI=r219:DI
    Inserting insn reload after:
 1269: r220:DI=r805:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 485:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 486
	 Choosing alt 0 in insn 486:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 488:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 491:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 494:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 499:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 502:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 507:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 508:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 509
	 Choosing alt 0 in insn 509:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 510:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 515:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 516:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 523:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 524
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 525:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 527:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 534:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 535
	 Choosing alt 0 in insn 535:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 536:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 537:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=806 from oldreg=651, assigning class GENERAL_REGS to r806
  537: {r806:SI=r806:SI-r239:SI;clobber flags:CC;}
      REG_DEAD r239:SI
      REG_DEAD r235:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1270: r806:SI=r235:SI
    Inserting insn reload after:
 1271: r651:SI=r806:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 538:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 543:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 544:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 547:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 549:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 551:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 552:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 553:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 554
	 Choosing alt 0 in insn 554:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 555:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 561:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 568:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 569
	 Choosing alt 0 in insn 569:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 570:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 572:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 579:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 580
	 Choosing alt 0 in insn 580:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 582:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=807 from oldreg=665, assigning class GENERAL_REGS to r807
  582: {r807:SI=r807:SI-r255:SI;clobber flags:CC;}
      REG_DEAD r255:SI
      REG_DEAD r251:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1272: r807:SI=r251:SI
    Inserting insn reload after:
 1273: r665:SI=r807:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 583:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 586:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 588:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 589:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 593:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 594:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 595:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 596
	 Choosing alt 0 in insn 596:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 597:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 602:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 603:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 605:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 609:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 610:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 611:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 612
	 Choosing alt 0 in insn 612:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 613:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 615:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 616:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=808 from oldreg=266, assigning class GENERAL_REGS to r808
  616: {r808:DI=r808:DI<<0x6;clobber flags:CC;}
      REG_DEAD r265:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1274: r808:DI=r265:DI
    Inserting insn reload after:
 1275: r266:DI=r808:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 617:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 618
	 Choosing alt 0 in insn 618:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 619:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 622:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 624:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=809 from oldreg=272, assigning class GENERAL_REGS to r809
  624: {r809:DI=r809:DI<<0x6;clobber flags:CC;}
      REG_DEAD r271:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1276: r809:DI=r271:DI
    Inserting insn reload after:
 1277: r272:DI=r809:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 625:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 626
	 Choosing alt 0 in insn 626:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 627:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 628:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=810 from oldreg=675, assigning class GENERAL_REGS to r810
  628: {r810:DI=r810:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1278: r810:DI=r274:DI
    Inserting insn reload after:
 1279: r675:DI=r810:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 629
	 Choosing alt 0 in insn 629:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 630:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 633:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 638:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 640:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 645:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 646:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 647:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=811 from oldreg=280, assigning class GENERAL_REGS to r811
  647: {r811:DI=r811:DI<<0x6;clobber flags:CC;}
      REG_DEAD r279:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1280: r811:DI=r279:DI
    Inserting insn reload after:
 1281: r280:DI=r811:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 648:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 649
	 Choosing alt 0 in insn 649:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 650:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 652:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 656:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 657:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=812 from oldreg=684, assigning class GENERAL_REGS to r812
  657: {r812:DI=r812:DI<<0x8;clobber flags:CC;}
      REG_DEAD r682:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1282: r812:DI=r682:DI
    Inserting insn reload after:
 1283: r684:DI=r812:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 658:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 659
	 Choosing alt 0 in insn 659:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 661:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 672:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 673:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=813 from oldreg=287, assigning class GENERAL_REGS to r813
  673: {r813:DI=r813:DI<<0x6;clobber flags:CC;}
      REG_DEAD r286:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1284: r813:DI=r286:DI
    Inserting insn reload after:
 1285: r287:DI=r813:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 674:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 675
	 Choosing alt 0 in insn 675:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 676:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 681:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 684:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 685:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 686:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 687:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 688
	 Choosing alt 0 in insn 688:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 689:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 690:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 691:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 693
	 Choosing alt 0 in insn 693:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 694:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 695:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 696:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 697:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 698
	 Choosing alt 0 in insn 698:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 699:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 701:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 704:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 710:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 713:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 715:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 716:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 717:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 718:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 719:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=814 from oldreg=305, assigning class GENERAL_REGS to r814
  719: {r814:DI=r814:DI<<0x6;clobber flags:CC;}
      REG_DEAD r304:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1286: r814:DI=r304:DI
    Inserting insn reload after:
 1287: r305:DI=r814:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 720:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 721
	 Choosing alt 0 in insn 721:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 722:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 723:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 724:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 728:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 729:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=815 from oldreg=310, assigning class GENERAL_REGS to r815
  729: {r815:DI=r815:DI<<0x6;clobber flags:CC;}
      REG_DEAD r309:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1288: r815:DI=r309:DI
    Inserting insn reload after:
 1289: r310:DI=r815:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 730:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 731
	 Choosing alt 0 in insn 731:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 732:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 734:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 735:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 738:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 739:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 740:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 741:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 742:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 743
	 Choosing alt 0 in insn 743:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 744:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 745:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 746:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 747:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 756:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 757:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 758:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=816 from oldreg=324, assigning class GENERAL_REGS to r816
  758: {r816:DI=r816:DI<<0x6;clobber flags:CC;}
      REG_DEAD r323:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1290: r816:DI=r323:DI
    Inserting insn reload after:
 1291: r324:DI=r816:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 759:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 760
	 Choosing alt 0 in insn 760:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 761:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 763:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 764:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 767:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 769:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 770:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 771:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 772
	 Choosing alt 0 in insn 772:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 775:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 776:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 777:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 778:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 779:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 780
	 Choosing alt 0 in insn 780:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 781:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 782:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 783:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 784:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 785
	 Choosing alt 0 in insn 785:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 786:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 788:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 789:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 790
	 Choosing alt 0 in insn 790:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 791:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 792:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 793:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 798:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 799:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 800:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=817 from oldreg=346, assigning class GENERAL_REGS to r817
  800: {r817:DI=r817:DI<<0x6;clobber flags:CC;}
      REG_DEAD r345:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1292: r817:DI=r345:DI
    Inserting insn reload after:
 1293: r346:DI=r817:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 801:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 802
	 Choosing alt 0 in insn 802:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 803:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 805:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 809:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 810:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 811:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 812:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 813:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 814
	 Choosing alt 0 in insn 814:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 817:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 819:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 820:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 821:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 822
	 Choosing alt 0 in insn 822:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 823:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 824:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 825:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 826:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 827
	 Choosing alt 0 in insn 827:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 828:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 829:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 830:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 831:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 832
	 Choosing alt 0 in insn 832:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 833:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 834:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 835:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 840:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 841:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 842:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 843:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 844:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 845
	 Choosing alt 0 in insn 845:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 846:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 847:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 848:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 849:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 850:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 853:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 856:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 862:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 863:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 864:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=818 from oldreg=376, assigning class GENERAL_REGS to r818
  864: {r818:DI=r818:DI<<0x6;clobber flags:CC;}
      REG_DEAD r375:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1294: r818:DI=r375:DI
    Inserting insn reload after:
 1295: r376:DI=r818:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 865:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 866
	 Choosing alt 0 in insn 866:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 867:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 868:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=819 from oldreg=725, assigning class GENERAL_REGS to r819
  868: {r819:DI=r819:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1296: r819:DI=r378:DI
    Inserting insn reload after:
 1297: r725:DI=r819:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 869
	 Choosing alt 0 in insn 869:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 870:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 873:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 874:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 875:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 876:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 877:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 878:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=820 from oldreg=381, assigning class GENERAL_REGS to r820
  878: {r820:DI=r820:DI<<0x6;clobber flags:CC;}
      REG_DEAD r380:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1298: r820:DI=r380:DI
    Inserting insn reload after:
 1299: r381:DI=r820:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 879:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 880
	 Choosing alt 0 in insn 880:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 881:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 883:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 884:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 887:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 888:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 889:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=821 from oldreg=387, assigning class GENERAL_REGS to r821
  889: {r821:DI=r821:DI<<0x6;clobber flags:CC;}
      REG_DEAD r386:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1300: r821:DI=r386:DI
    Inserting insn reload after:
 1301: r387:DI=r821:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 890:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 891
	 Choosing alt 0 in insn 891:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 892:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 893:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 894:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 895:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 896:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 898:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 901:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 902:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 903:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 904:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 905
	 Choosing alt 0 in insn 905:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 906:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 907:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 908:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 909:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 910:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 911:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 912:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 913:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 914:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 915
	 Choosing alt 0 in insn 915:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 916:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 917:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 918:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 919:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 920:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 921:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 922:  (0) r  (1) rm {extendhisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 923:  (0) x  (1) r {*floatsisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 924:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 925:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 931:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 932:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 933:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=822 from oldreg=410, assigning class GENERAL_REGS to r822
  933: {r822:DI=r822:DI<<0x6;clobber flags:CC;}
      REG_DEAD r409:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1302: r822:DI=r409:DI
    Inserting insn reload after:
 1303: r410:DI=r822:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 934:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 935
	 Choosing alt 0 in insn 935:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 936:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 938:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 939:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 942:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 944:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 945:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 946:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 947:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 948:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=823 from oldreg=417, assigning class GENERAL_REGS to r823
  948: {r823:DI=r823:DI<<0x6;clobber flags:CC;}
      REG_DEAD r416:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1304: r823:DI=r416:DI
    Inserting insn reload after:
 1305: r417:DI=r823:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 949:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 950
	 Choosing alt 0 in insn 950:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 951:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 952:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 953:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 956:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 957:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 958:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 959:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 960
	 Choosing alt 0 in insn 960:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 961:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 962:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 963:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 964:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 965:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 966:  (0) r  (1) rem {*movdi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 967:  (0) x  (1) r {*floatdisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 968:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 969:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 970:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 971:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 972:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 973
	 Choosing alt 0 in insn 973:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 974:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 975:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 976:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 977:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 978:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 979:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 980:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 981:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 987:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 988:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 989:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=824 from oldreg=437, assigning class GENERAL_REGS to r824
  989: {r824:DI=r824:DI<<0x6;clobber flags:CC;}
      REG_DEAD r436:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1306: r824:DI=r436:DI
    Inserting insn reload after:
 1307: r437:DI=r824:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 990:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 991
	 Choosing alt 0 in insn 991:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 992:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 994:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 995:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 998:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1000:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1001:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1002:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1003:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1004:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=825 from oldreg=444, assigning class GENERAL_REGS to r825
 1004: {r825:DI=r825:DI<<0x6;clobber flags:CC;}
      REG_DEAD r443:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1308: r825:DI=r443:DI
    Inserting insn reload after:
 1309: r444:DI=r825:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1005:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1006
	 Choosing alt 0 in insn 1006:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1007:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1008:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1009:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1012:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1013:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1014:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1015:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1016
	 Choosing alt 0 in insn 1016:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1017:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1018:  (0) x  (1) r {*floatsisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1019:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1020:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1021:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1022:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1023:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1024
	 Choosing alt 0 in insn 1024:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1025:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1026:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1027:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1028:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1029:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1030:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1031:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1032:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1038:  (0) ?mq {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1041:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1042:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1043:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1044:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1047:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1048:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1049:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1050:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 1051:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1052:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1053:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1054:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=826 from oldreg=463, assigning class GENERAL_REGS to r826
 1054: {r826:DI=r826:DI<<0x6;clobber flags:CC;}
      REG_DEAD r462:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1310: r826:DI=r462:DI
    Inserting insn reload after:
 1311: r463:DI=r826:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1055:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1056
	 Choosing alt 0 in insn 1056:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1057:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1058:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1059:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1061:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1062:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1063:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1064:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1065
	 Choosing alt 0 in insn 1065:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=3,overall=6,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1066:  (0) ?r  (1) rmF {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1067:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1068:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1229,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=625,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=1221,losers=2,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
          alt=4,overall=18,losers=1,rld_nregs=0
            alt=5: Bad operand -- refuse
          alt=6,overall=612,losers=2,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=9,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=8,overall=12,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=9,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=1216,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=1216,losers=2 -- refuse
            Staticly defined alt reject+=600
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=13,overall=612,losers=1 -- refuse
            Staticly defined alt reject+=600
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=1215,losers=2 -- refuse
            Staticly defined alt reject+=600
            alt=15: Bad operand -- refuse
      Creating newreg=827, assigning class NO_REGS to secondary r827
 1073: r827:SF=r472:SF
      REG_DEAD r472:SF
    Inserting the sec. move after:
 1312: xmm0:SF=r827:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=617,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=619,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=621,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=624,losers=2 -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=7,overall=1,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1312:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1074:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1077:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1078:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 1080:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1081:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1082:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1083:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1085:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1086:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1087:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1088:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 1089:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=828 from oldreg=476, assigning class GENERAL_REGS to r828
 1089: {r828:DI=r828:DI<<0x6;clobber flags:CC;}
      REG_DEAD r475:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
 1313: r828:DI=r475:DI
    Inserting insn reload after:
 1314: r476:DI=r828:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1090:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1091
	 Choosing alt 0 in insn 1091:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1092:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1093:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1094:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1097:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1098:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1099:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1101
	 Choosing alt 0 in insn 1101:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1103:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1104:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1105:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1106:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1107:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1108:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1109:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1111
	 Choosing alt 0 in insn 1111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1113:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1114:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1115:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1117:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1118:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1119:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1120:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1122
	 Choosing alt 0 in insn 1122:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1124:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1125:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1126:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1127:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1128:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1129
	 Choosing alt 0 in insn 1129:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1130:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1131:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1132:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1133:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1135
	 Choosing alt 0 in insn 1135:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1137:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1138:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1139:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1140:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1142:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1143:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1144:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1145:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1146
	 Choosing alt 0 in insn 1146:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1148:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1149:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1150:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1151:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1152:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1153:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1154:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1155:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1156:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1157:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1158
	 Choosing alt 0 in insn 1158:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1159:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1160:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 1161:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 1162:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1163:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1164:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1165:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 1166
	 Choosing alt 0 in insn 1166:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 1167:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1168:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1174:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1180:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 1188:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 1194:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1196:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 1197:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78

********** Pseudo live ranges #1: **********

  BB 78
   Insn 1205: point = 0
   Insn 1204: point = 0
   Insn 1200: point = 1
   Insn 1197: point = 3
   Insn 1196: point = 4
   Insn 1195: point = 4
   Insn 1194: point = 5
  BB 3
   Insn 27: point = 6
   Insn 26: point = 6
   Insn 25: point = 7
   Insn 24: point = 9
  BB 77
   Insn 1249: point = 10
   Insn 1188: point = 10
  BB 32
   Insn 489: point = 10
   Insn 488: point = 10
   Insn 487: point = 11
   Insn 486: point = 13
   Insn 485: point = 15
   Insn 1269: point = 16
	Hard reg 1 is preferable by r805 with profit 1
   Insn 484: point = 18
   Insn 1268: point = 18
	Hard reg 1 is preferable by r805 with profit 1
	Hard reg 0 is preferable by r805 with profit 1
   Insn 483: point = 20
   Insn 482: point = 22
  BB 76
   Insn 1247: point = 23
   Insn 1180: point = 23
  BB 37
   Insn 590: point = 23
   Insn 589: point = 23
   Insn 588: point = 24
  BB 75
   Insn 1245: point = 25
   Insn 1174: point = 25
  BB 73
   Insn 1095: point = 25
   Insn 1094: point = 25
   Insn 1093: point = 26
   Insn 1092: point = 28
   Insn 1091: point = 30
   Insn 1090: point = 32
   Insn 1314: point = 33
	Hard reg 2 is preferable by r828 with profit 1
   Insn 1089: point = 35
   Insn 1313: point = 35
	Hard reg 2 is preferable by r828 with profit 1
	Hard reg 1 is preferable by r828 with profit 1
   Insn 1088: point = 37
   Insn 1087: point = 39
   Insn 1086: point = 40
   Insn 1085: point = 42
  BB 74
   Insn 1243: point = 43
   Insn 1168: point = 43
   Insn 1167: point = 43
   Insn 1166: point = 44
   Insn 1165: point = 46
   Insn 1164: point = 48
   Insn 1163: point = 50
   Insn 1162: point = 52
   Insn 1161: point = 54
   Insn 1160: point = 56
   Insn 1159: point = 57
   Insn 1158: point = 59
   Insn 1157: point = 61
   Insn 1156: point = 62
   Insn 1155: point = 64
   Insn 1154: point = 66
   Insn 1153: point = 67
   Insn 1152: point = 69
   Insn 1151: point = 71
   Insn 1150: point = 73
   Insn 1149: point = 75
   Insn 1148: point = 77
   Insn 1147: point = 78
   Insn 1146: point = 80
   Insn 1145: point = 82
   Insn 1144: point = 83
   Insn 1143: point = 85
   Insn 1142: point = 87
   Insn 1141: point = 88
   Insn 1140: point = 90
   Insn 1139: point = 92
   Insn 1138: point = 94
   Insn 1137: point = 96
   Insn 1136: point = 97
   Insn 1135: point = 99
   Insn 1134: point = 101
   Insn 1133: point = 102
   Insn 1132: point = 104
   Insn 1131: point = 106
   Insn 1130: point = 107
   Insn 1129: point = 108
   Insn 1128: point = 110
   Insn 1127: point = 112
   Insn 1126: point = 114
   Insn 1125: point = 116
   Insn 1124: point = 118
   Insn 1123: point = 119
   Insn 1122: point = 121
   Insn 1121: point = 123
   Insn 1120: point = 124
   Insn 1119: point = 126
   Insn 1118: point = 128
   Insn 1117: point = 129
   Insn 1116: point = 131
   Insn 1115: point = 133
   Insn 1114: point = 135
   Insn 1113: point = 137
   Insn 1112: point = 138
   Insn 1111: point = 140
   Insn 1110: point = 142
   Insn 1109: point = 143
   Insn 1108: point = 145
   Insn 1107: point = 147
   Insn 1106: point = 148
   Insn 1105: point = 150
   Insn 1104: point = 152
   Insn 1103: point = 154
   Insn 1102: point = 155
   Insn 1101: point = 157
   Insn 1100: point = 159
   Insn 1099: point = 160
   Insn 1098: point = 162
   Insn 1097: point = 164
  BB 72
   Insn 1083: point = 165
   Insn 1082: point = 165
   Insn 1081: point = 165
   Insn 1080: point = 165
   Insn 1079: point = 165
   Insn 1078: point = 166
   Insn 1077: point = 168
  BB 71
   Insn 1074: point = 169
   Insn 1312: point = 169
	Hard reg 21 is preferable by r827 with profit 1
   Insn 1073: point = 170
	Hard reg 21 is preferable by r827 with profit 1
	Hard reg 0 is preferable by r827 with profit 1
   Insn 1072: point = 172
   Insn 1071: point = 173
   Insn 1070: point = 174
   Insn 1069: point = 175
   Insn 1068: point = 176
   Insn 1067: point = 177
   Insn 1066: point = 178
   Insn 1065: point = 180
   Insn 1064: point = 182
   Insn 1063: point = 183
   Insn 1062: point = 185
   Insn 1061: point = 187
   Insn 1060: point = 188
   Insn 1059: point = 190
   Insn 1058: point = 192
   Insn 1057: point = 194
   Insn 1056: point = 196
   Insn 1055: point = 198
   Insn 1311: point = 199
	Hard reg 1 is preferable by r826 with profit 1
   Insn 1054: point = 201
   Insn 1310: point = 201
	Hard reg 1 is preferable by r826 with profit 1
	Hard reg 0 is preferable by r826 with profit 1
   Insn 1053: point = 203
   Insn 1052: point = 205
   Insn 1051: point = 206
   Insn 1050: point = 208
   Insn 1049: point = 209
   Insn 1048: point = 209
   Insn 1047: point = 209
   Insn 1046: point = 209
   Insn 1045: point = 210
   Insn 1044: point = 211
   Insn 1043: point = 213
   Insn 1042: point = 214
   Insn 1041: point = 216
  BB 70
   Insn 1039: point = 217
   Insn 1038: point = 217
  BB 68
   Insn 1010: point = 217
   Insn 1009: point = 217
   Insn 1008: point = 218
   Insn 1007: point = 220
   Insn 1006: point = 222
   Insn 1005: point = 224
   Insn 1309: point = 225
	Hard reg 2 is preferable by r825 with profit 1
   Insn 1004: point = 227
   Insn 1308: point = 227
	Hard reg 2 is preferable by r825 with profit 1
	Hard reg 1 is preferable by r825 with profit 1
   Insn 1003: point = 229
   Insn 1002: point = 231
   Insn 1001: point = 232
   Insn 1000: point = 234
  BB 69
   Insn 1241: point = 235
   Insn 1032: point = 235
   Insn 1031: point = 235
   Insn 1030: point = 236
   Insn 1029: point = 237
   Insn 1028: point = 239
   Insn 1027: point = 241
   Insn 1026: point = 243
   Insn 1025: point = 244
   Insn 1024: point = 246
   Insn 1023: point = 248
   Insn 1022: point = 249
   Insn 1021: point = 251
   Insn 1020: point = 253
   Insn 1019: point = 254
   Insn 1018: point = 255
   Insn 1017: point = 257
   Insn 1016: point = 259
   Insn 1015: point = 261
   Insn 1014: point = 262
   Insn 1013: point = 264
   Insn 1012: point = 266
  BB 67
   Insn 998: point = 267
  BB 66
   Insn 996: point = 267
   Insn 995: point = 267
   Insn 994: point = 268
   Insn 993: point = 270
   Insn 992: point = 272
   Insn 991: point = 274
   Insn 990: point = 276
   Insn 1307: point = 277
	Hard reg 1 is preferable by r824 with profit 1
   Insn 989: point = 279
   Insn 1306: point = 279
	Hard reg 1 is preferable by r824 with profit 1
	Hard reg 0 is preferable by r824 with profit 1
   Insn 988: point = 281
   Insn 987: point = 283
  BB 64
   Insn 954: point = 284
   Insn 953: point = 284
   Insn 952: point = 285
   Insn 951: point = 287
   Insn 950: point = 289
   Insn 949: point = 291
   Insn 1305: point = 292
	Hard reg 2 is preferable by r823 with profit 1
   Insn 948: point = 294
   Insn 1304: point = 294
	Hard reg 2 is preferable by r823 with profit 1
	Hard reg 1 is preferable by r823 with profit 1
   Insn 947: point = 296
   Insn 946: point = 298
   Insn 945: point = 299
   Insn 944: point = 301
  BB 65
   Insn 1239: point = 302
   Insn 981: point = 302
   Insn 980: point = 302
   Insn 979: point = 303
   Insn 978: point = 304
   Insn 977: point = 306
   Insn 976: point = 308
   Insn 975: point = 310
   Insn 974: point = 311
   Insn 973: point = 313
   Insn 972: point = 315
   Insn 971: point = 316
   Insn 970: point = 318
   Insn 969: point = 320
   Insn 968: point = 321
   Insn 967: point = 322
   Insn 966: point = 324
   Insn 965: point = 326
   Insn 964: point = 328
   Insn 963: point = 330
   Insn 962: point = 332
   Insn 961: point = 333
   Insn 960: point = 335
   Insn 959: point = 337
   Insn 958: point = 338
   Insn 957: point = 340
   Insn 956: point = 342
  BB 63
   Insn 942: point = 343
  BB 62
   Insn 940: point = 343
   Insn 939: point = 343
   Insn 938: point = 344
   Insn 937: point = 346
   Insn 936: point = 348
   Insn 935: point = 350
   Insn 934: point = 352
   Insn 1303: point = 353
	Hard reg 1 is preferable by r822 with profit 1
   Insn 933: point = 355
   Insn 1302: point = 355
	Hard reg 1 is preferable by r822 with profit 1
	Hard reg 0 is preferable by r822 with profit 1
   Insn 932: point = 357
   Insn 931: point = 359
  BB 60
   Insn 899: point = 360
   Insn 898: point = 360
  BB 61
   Insn 1237: point = 360
   Insn 925: point = 360
   Insn 924: point = 360
   Insn 923: point = 361
   Insn 922: point = 363
   Insn 921: point = 365
   Insn 920: point = 367
   Insn 919: point = 369
   Insn 918: point = 371
   Insn 917: point = 373
   Insn 916: point = 374
   Insn 915: point = 376
   Insn 914: point = 378
   Insn 913: point = 379
   Insn 912: point = 381
   Insn 911: point = 383
   Insn 910: point = 384
   Insn 909: point = 386
   Insn 908: point = 388
   Insn 907: point = 390
   Insn 906: point = 391
   Insn 905: point = 393
   Insn 904: point = 395
   Insn 903: point = 396
   Insn 902: point = 398
   Insn 901: point = 400
  BB 59
   Insn 896: point = 401
   Insn 895: point = 402
   Insn 894: point = 404
   Insn 893: point = 406
   Insn 892: point = 408
   Insn 891: point = 410
   Insn 890: point = 412
   Insn 1301: point = 413
	Hard reg 1 is preferable by r821 with profit 1
   Insn 889: point = 415
   Insn 1300: point = 415
	Hard reg 1 is preferable by r821 with profit 1
	Hard reg 0 is preferable by r821 with profit 1
   Insn 888: point = 417
   Insn 887: point = 419
  BB 58
   Insn 885: point = 420
   Insn 884: point = 420
   Insn 883: point = 421
   Insn 882: point = 423
   Insn 881: point = 425
   Insn 880: point = 427
   Insn 879: point = 429
   Insn 1299: point = 430
	Hard reg 1 is preferable by r820 with profit 1
   Insn 878: point = 432
   Insn 1298: point = 432
	Hard reg 1 is preferable by r820 with profit 1
	Hard reg 0 is preferable by r820 with profit 1
   Insn 877: point = 434
   Insn 876: point = 436
   Insn 875: point = 437
   Insn 874: point = 437
   Insn 873: point = 437
   Insn 872: point = 437
   Insn 871: point = 438
   Insn 870: point = 440
   Insn 869: point = 442
   Insn 1297: point = 444
	Hard reg 1 is preferable by r819 with profit 1
   Insn 868: point = 446
   Insn 1296: point = 446
   Insn 867: point = 447
   Insn 866: point = 449
   Insn 865: point = 451
   Insn 1295: point = 452
	Hard reg 1 is preferable by r818 with profit 1
   Insn 864: point = 454
   Insn 1294: point = 454
	Hard reg 1 is preferable by r818 with profit 1
	Hard reg 0 is preferable by r818 with profit 1
   Insn 863: point = 456
   Insn 862: point = 458
  BB 49
   Insn 725: point = 459
   Insn 724: point = 459
   Insn 723: point = 460
   Insn 722: point = 462
   Insn 721: point = 464
   Insn 720: point = 466
   Insn 1287: point = 467
	Hard reg 2 is preferable by r814 with profit 1
   Insn 719: point = 469
   Insn 1286: point = 469
	Hard reg 2 is preferable by r814 with profit 1
	Hard reg 1 is preferable by r814 with profit 1
   Insn 718: point = 471
   Insn 717: point = 473
   Insn 716: point = 474
   Insn 715: point = 476
  BB 57
   Insn 1235: point = 477
   Insn 856: point = 477
  BB 55
   Insn 1233: point = 477
   Insn 835: point = 477
   Insn 834: point = 478
   Insn 833: point = 480
   Insn 832: point = 482
   Insn 831: point = 484
   Insn 830: point = 485
   Insn 829: point = 487
   Insn 828: point = 489
   Insn 827: point = 490
   Insn 826: point = 492
   Insn 825: point = 494
   Insn 824: point = 496
   Insn 823: point = 497
   Insn 822: point = 499
   Insn 821: point = 501
   Insn 820: point = 502
   Insn 819: point = 504
   Insn 818: point = 506
   Insn 817: point = 507
   Insn 816: point = 507
   Insn 815: point = 508
   Insn 814: point = 509
   Insn 813: point = 511
   Insn 812: point = 512
   Insn 811: point = 514
   Insn 810: point = 516
   Insn 809: point = 517
  BB 53
   Insn 1231: point = 518
   Insn 793: point = 518
   Insn 792: point = 519
   Insn 791: point = 521
   Insn 790: point = 523
   Insn 789: point = 525
   Insn 788: point = 526
   Insn 787: point = 528
   Insn 786: point = 530
   Insn 785: point = 531
   Insn 784: point = 533
   Insn 783: point = 535
   Insn 782: point = 537
   Insn 781: point = 538
   Insn 780: point = 540
   Insn 779: point = 542
   Insn 778: point = 543
   Insn 777: point = 545
   Insn 776: point = 547
   Insn 775: point = 548
   Insn 774: point = 548
   Insn 773: point = 549
   Insn 772: point = 550
   Insn 771: point = 552
   Insn 770: point = 553
   Insn 769: point = 555
   Insn 768: point = 557
   Insn 767: point = 558
  BB 51
   Insn 1229: point = 559
   Insn 751: point = 559
   Insn 750: point = 559
   Insn 749: point = 560
   Insn 748: point = 561
   Insn 747: point = 563
   Insn 746: point = 565
   Insn 745: point = 567
   Insn 744: point = 568
   Insn 743: point = 570
   Insn 742: point = 572
   Insn 741: point = 573
   Insn 740: point = 575
   Insn 739: point = 577
   Insn 738: point = 578
  BB 56
   Insn 853: point = 579
   Insn 852: point = 579
   Insn 851: point = 580
   Insn 850: point = 581
   Insn 849: point = 583
   Insn 848: point = 585
   Insn 847: point = 587
   Insn 846: point = 588
   Insn 845: point = 590
   Insn 844: point = 592
   Insn 843: point = 593
   Insn 842: point = 595
   Insn 841: point = 597
   Insn 840: point = 598
  BB 54
   Insn 807: point = 599
   Insn 806: point = 599
   Insn 805: point = 600
   Insn 804: point = 602
   Insn 803: point = 604
   Insn 802: point = 606
   Insn 801: point = 608
   Insn 1293: point = 609
	Hard reg 1 is preferable by r817 with profit 1
   Insn 800: point = 611
   Insn 1292: point = 611
	Hard reg 1 is preferable by r817 with profit 1
	Hard reg 0 is preferable by r817 with profit 1
   Insn 799: point = 613
   Insn 798: point = 615
  BB 52
   Insn 765: point = 616
   Insn 764: point = 616
   Insn 763: point = 617
   Insn 762: point = 619
   Insn 761: point = 621
   Insn 760: point = 623
   Insn 759: point = 625
   Insn 1291: point = 626
	Hard reg 1 is preferable by r816 with profit 1
   Insn 758: point = 628
   Insn 1290: point = 628
	Hard reg 1 is preferable by r816 with profit 1
	Hard reg 0 is preferable by r816 with profit 1
   Insn 757: point = 630
   Insn 756: point = 632
  BB 50
   Insn 736: point = 633
   Insn 735: point = 633
   Insn 734: point = 634
   Insn 733: point = 636
   Insn 732: point = 638
   Insn 731: point = 640
   Insn 730: point = 642
   Insn 1289: point = 643
	Hard reg 1 is preferable by r815 with profit 1
   Insn 729: point = 645
   Insn 1288: point = 645
	Hard reg 1 is preferable by r815 with profit 1
	Hard reg 0 is preferable by r815 with profit 1
   Insn 728: point = 647
   Insn 727: point = 649
  BB 48
   Insn 713: point = 650
  BB 47
   Insn 711: point = 650
   Insn 710: point = 650
  BB 41
   Insn 1225: point = 650
   Insn 662: point = 650
   Insn 661: point = 650
   Insn 660: point = 650
   Insn 659: point = 651
   Insn 658: point = 653
   Insn 1283: point = 654
	Hard reg 1 is preferable by r812 with profit 1
   Insn 657: point = 656
   Insn 1282: point = 656
	Hard reg 1 is preferable by r812 with profit 1
	Hard reg 0 is preferable by r812 with profit 1
   Insn 656: point = 658
   Insn 655: point = 660
  BB 43
   Insn 679: point = 661
   Insn 678: point = 661
   Insn 677: point = 662
   Insn 676: point = 664
   Insn 675: point = 666
   Insn 674: point = 668
   Insn 1285: point = 669
	Hard reg 2 is preferable by r813 with profit 1
   Insn 673: point = 671
   Insn 1284: point = 671
	Hard reg 2 is preferable by r813 with profit 1
	Hard reg 1 is preferable by r813 with profit 1
   Insn 672: point = 673
   Insn 671: point = 675
   Insn 670: point = 676
   Insn 669: point = 678
  BB 46
   Insn 1227: point = 679
   Insn 704: point = 679
  BB 45
   Insn 701: point = 679
   Insn 700: point = 680
   Insn 699: point = 682
   Insn 698: point = 684
   Insn 697: point = 686
   Insn 696: point = 687
   Insn 695: point = 689
   Insn 694: point = 691
   Insn 693: point = 692
   Insn 692: point = 694
   Insn 691: point = 696
   Insn 690: point = 698
   Insn 689: point = 699
   Insn 688: point = 701
   Insn 687: point = 703
   Insn 686: point = 704
   Insn 685: point = 706
   Insn 684: point = 708
  BB 44
   Insn 682: point = 709
   Insn 681: point = 709
  BB 42
   Insn 667: point = 709
  BB 40
   Insn 653: point = 709
   Insn 652: point = 709
   Insn 651: point = 710
   Insn 650: point = 712
   Insn 649: point = 714
   Insn 648: point = 716
   Insn 1281: point = 717
	Hard reg 2 is preferable by r811 with profit 1
   Insn 647: point = 719
   Insn 1280: point = 719
	Hard reg 2 is preferable by r811 with profit 1
	Hard reg 1 is preferable by r811 with profit 1
   Insn 646: point = 721
   Insn 645: point = 723
   Insn 644: point = 724
   Insn 643: point = 726
  BB 39
   Insn 640: point = 727
   Insn 639: point = 728
   Insn 638: point = 729
   Insn 637: point = 729
   Insn 636: point = 730
   Insn 635: point = 731
   Insn 634: point = 732
   Insn 633: point = 733
   Insn 632: point = 734
   Insn 631: point = 736
   Insn 630: point = 738
   Insn 629: point = 740
   Insn 1279: point = 742
	Hard reg 2 is preferable by r810 with profit 1
   Insn 628: point = 744
   Insn 1278: point = 744
   Insn 627: point = 745
   Insn 626: point = 747
   Insn 625: point = 749
   Insn 1277: point = 750
	Hard reg 2 is preferable by r809 with profit 1
   Insn 624: point = 752
   Insn 1276: point = 752
	Hard reg 2 is preferable by r809 with profit 1
	Hard reg 0 is preferable by r809 with profit 1
   Insn 623: point = 754
   Insn 622: point = 756
   Insn 621: point = 757
   Insn 620: point = 759
   Insn 619: point = 761
   Insn 618: point = 763
   Insn 617: point = 765
   Insn 1275: point = 766
	Hard reg 2 is preferable by r808 with profit 1
   Insn 616: point = 768
   Insn 1274: point = 768
	Hard reg 2 is preferable by r808 with profit 1
	Hard reg 0 is preferable by r808 with profit 1
   Insn 615: point = 770
   Insn 614: point = 772
   Insn 613: point = 773
   Insn 612: point = 775
   Insn 611: point = 777
   Insn 610: point = 778
   Insn 609: point = 780
   Insn 608: point = 782
  BB 38
   Insn 606: point = 783
   Insn 605: point = 783
   Insn 604: point = 783
   Insn 603: point = 783
   Insn 602: point = 783
   Insn 601: point = 783
   Insn 600: point = 784
   Insn 599: point = 785
   Insn 598: point = 785
   Insn 597: point = 786
   Insn 596: point = 788
   Insn 595: point = 790
   Insn 594: point = 791
   Insn 593: point = 793
   Insn 592: point = 795
  BB 36
   Insn 586: point = 796
  BB 34
   Insn 1223: point = 796
   Insn 538: point = 796
   Insn 1271: point = 797
	Hard reg 0 is preferable by r806 with profit 1
   Insn 537: point = 799
   Insn 1270: point = 800
	Hard reg 0 is preferable by r806 with profit 1
	Hard reg 2 is preferable by r806 with profit 1
   Insn 536: point = 802
   Insn 535: point = 804
   Insn 534: point = 806
   Insn 533: point = 807
   Insn 532: point = 809
   Insn 531: point = 811
   Insn 530: point = 813
   Insn 529: point = 814
   Insn 528: point = 814
   Insn 527: point = 815
   Insn 526: point = 817
   Insn 525: point = 818
   Insn 524: point = 820
   Insn 523: point = 822
   Insn 522: point = 823
   Insn 521: point = 825
   Insn 520: point = 827
   Insn 519: point = 829
   Insn 518: point = 830
   Insn 517: point = 830
   Insn 516: point = 831
   Insn 515: point = 833
   Insn 514: point = 834
   Insn 513: point = 834
   Insn 512: point = 835
   Insn 511: point = 836
   Insn 510: point = 836
   Insn 509: point = 838
   Insn 508: point = 840
   Insn 507: point = 841
   Insn 506: point = 843
   Insn 505: point = 845
   Insn 504: point = 846
   Insn 503: point = 848
   Insn 502: point = 850
   Insn 501: point = 852
   Insn 500: point = 853
   Insn 499: point = 855
   Insn 498: point = 856
   Insn 497: point = 858
   Insn 496: point = 859
   Insn 495: point = 860
   Insn 494: point = 860
  BB 35
   Insn 583: point = 860
   Insn 1273: point = 861
	Hard reg 0 is preferable by r807 with profit 1
   Insn 582: point = 863
   Insn 1272: point = 864
	Hard reg 0 is preferable by r807 with profit 1
	Hard reg 2 is preferable by r807 with profit 1
   Insn 581: point = 866
   Insn 580: point = 868
   Insn 579: point = 870
   Insn 578: point = 871
   Insn 577: point = 873
   Insn 576: point = 875
   Insn 575: point = 877
   Insn 574: point = 878
   Insn 573: point = 878
   Insn 572: point = 879
   Insn 571: point = 881
   Insn 570: point = 882
   Insn 569: point = 884
   Insn 568: point = 886
   Insn 567: point = 887
   Insn 566: point = 889
   Insn 565: point = 891
   Insn 564: point = 893
   Insn 563: point = 894
   Insn 562: point = 894
   Insn 561: point = 895
   Insn 560: point = 897
   Insn 559: point = 898
   Insn 558: point = 898
   Insn 557: point = 899
   Insn 556: point = 900
   Insn 555: point = 900
   Insn 554: point = 902
   Insn 553: point = 904
   Insn 552: point = 905
   Insn 551: point = 907
   Insn 550: point = 909
   Insn 549: point = 910
   Insn 548: point = 912
   Insn 547: point = 914
   Insn 546: point = 916
   Insn 545: point = 917
   Insn 544: point = 919
   Insn 543: point = 920
  BB 33
   Insn 492: point = 921
   Insn 491: point = 921
  BB 31
   Insn 480: point = 921
  BB 29
   Insn 1221: point = 921
   Insn 430: point = 921
   Insn 429: point = 921
   Insn 428: point = 921
   Insn 427: point = 921
   Insn 426: point = 921
   Insn 425: point = 921
   Insn 424: point = 922
   Insn 423: point = 922
   Insn 422: point = 923
   Insn 421: point = 924
   Insn 420: point = 925
   Insn 419: point = 926
   Insn 418: point = 927
   Insn 417: point = 928
   Insn 416: point = 928
   Insn 415: point = 929
   Insn 414: point = 930
   Insn 413: point = 931
   Insn 412: point = 932
   Insn 411: point = 933
   Insn 410: point = 934
   Insn 409: point = 935
   Insn 408: point = 935
   Insn 407: point = 936
   Insn 406: point = 938
   Insn 405: point = 940
   Insn 404: point = 942
   Insn 403: point = 944
  BB 25
   Insn 1219: point = 945
   Insn 383: point = 945
   Insn 382: point = 945
   Insn 381: point = 945
   Insn 380: point = 945
   Insn 379: point = 945
   Insn 378: point = 945
   Insn 377: point = 946
   Insn 376: point = 946
   Insn 375: point = 947
   Insn 374: point = 948
   Insn 373: point = 949
   Insn 372: point = 950
   Insn 371: point = 951
   Insn 370: point = 952
   Insn 369: point = 952
   Insn 368: point = 953
   Insn 367: point = 954
   Insn 366: point = 955
   Insn 365: point = 956
   Insn 364: point = 957
   Insn 363: point = 958
   Insn 362: point = 959
   Insn 361: point = 959
   Insn 360: point = 960
   Insn 359: point = 962
   Insn 358: point = 964
   Insn 357: point = 966
  BB 30
   Insn 477: point = 967
   Insn 476: point = 967
   Insn 475: point = 967
   Insn 474: point = 967
   Insn 473: point = 967
   Insn 472: point = 967
   Insn 471: point = 968
   Insn 470: point = 968
   Insn 469: point = 969
   Insn 468: point = 970
   Insn 467: point = 971
   Insn 466: point = 972
   Insn 465: point = 973
   Insn 464: point = 974
   Insn 463: point = 974
   Insn 462: point = 975
   Insn 461: point = 976
   Insn 460: point = 977
   Insn 459: point = 978
   Insn 458: point = 979
   Insn 457: point = 980
   Insn 456: point = 981
   Insn 455: point = 981
   Insn 454: point = 982
   Insn 453: point = 984
   Insn 452: point = 986
   Insn 451: point = 988
   Insn 450: point = 990
   Insn 1267: point = 991
	Hard reg 1 is preferable by r804 with profit 1
   Insn 449: point = 993
   Insn 1266: point = 993
	Hard reg 1 is preferable by r804 with profit 1
	Hard reg 0 is preferable by r804 with profit 1
   Insn 448: point = 995
   Insn 447: point = 997
   Insn 446: point = 998
   Insn 445: point = 999
   Insn 444: point = 1000
   Insn 443: point = 1000
   Insn 442: point = 1001
   Insn 441: point = 1003
   Insn 440: point = 1005
   Insn 439: point = 1007
   Insn 438: point = 1009
   Insn 1265: point = 1010
	Hard reg 1 is preferable by r803 with profit 1
   Insn 437: point = 1012
   Insn 1264: point = 1012
	Hard reg 1 is preferable by r803 with profit 1
	Hard reg 0 is preferable by r803 with profit 1
   Insn 436: point = 1014
   Insn 435: point = 1016
  BB 28
   Insn 400: point = 1017
   Insn 399: point = 1017
   Insn 398: point = 1018
   Insn 397: point = 1020
   Insn 396: point = 1022
  BB 27
   Insn 394: point = 1023
   Insn 393: point = 1023
   Insn 392: point = 1024
   Insn 391: point = 1026
  BB 26
   Insn 389: point = 1027
   Insn 388: point = 1027
  BB 24
   Insn 355: point = 1027
   Insn 354: point = 1027
   Insn 353: point = 1027
   Insn 352: point = 1028
   Insn 351: point = 1030
   Insn 350: point = 1032
   Insn 349: point = 1033
   Insn 348: point = 1035
   Insn 347: point = 1037
   Insn 346: point = 1039
   Insn 345: point = 1040
   Insn 344: point = 1042
   Insn 343: point = 1044
   Insn 342: point = 1046
   Insn 341: point = 1047
   Insn 340: point = 1047
   Insn 339: point = 1048
   Insn 338: point = 1050
   Insn 337: point = 1051
   Insn 336: point = 1052
   Insn 335: point = 1054
   Insn 334: point = 1056
   Insn 333: point = 1058
   Insn 332: point = 1060
   Insn 331: point = 1061
   Insn 330: point = 1063
   Insn 329: point = 1065
   Insn 328: point = 1067
   Insn 327: point = 1068
   Insn 326: point = 1068
   Insn 325: point = 1069
   Insn 324: point = 1071
   Insn 1263: point = 1072
	Hard reg 2 is preferable by r802 with profit 1
   Insn 323: point = 1074
   Insn 1262: point = 1075
	Hard reg 2 is preferable by r802 with profit 1
	Hard reg 1 is preferable by r802 with profit 1
   Insn 322: point = 1077
   Insn 321: point = 1079
   Insn 320: point = 1081
   Insn 1261: point = 1082
	Hard reg 2 is preferable by r801 with profit 1
   Insn 319: point = 1084
   Insn 1260: point = 1084
	Hard reg 2 is preferable by r801 with profit 1
	Hard reg 0 is preferable by r801 with profit 1
   Insn 318: point = 1086
   Insn 317: point = 1088
   Insn 316: point = 1089
   Insn 315: point = 1091
   Insn 314: point = 1093
   Insn 1259: point = 1094
	Hard reg 1 is preferable by r800 with profit 1
   Insn 313: point = 1096
   Insn 1258: point = 1096
	Hard reg 1 is preferable by r800 with profit 1
	Hard reg 0 is preferable by r800 with profit 1
   Insn 312: point = 1098
   Insn 311: point = 1100
   Insn 310: point = 1101
   Insn 309: point = 1102
   Insn 308: point = 1104
   Insn 307: point = 1106
   Insn 306: point = 1108
   Insn 1257: point = 1109
	Hard reg 2 is preferable by r799 with profit 1
   Insn 305: point = 1111
   Insn 1256: point = 1111
	Hard reg 2 is preferable by r799 with profit 1
	Hard reg 0 is preferable by r799 with profit 1
   Insn 304: point = 1113
   Insn 303: point = 1115
   Insn 302: point = 1116
   Insn 301: point = 1118
   Insn 300: point = 1120
   Insn 1255: point = 1121
	Hard reg 1 is preferable by r798 with profit 1
   Insn 299: point = 1123
   Insn 1254: point = 1123
	Hard reg 1 is preferable by r798 with profit 1
	Hard reg 0 is preferable by r798 with profit 1
   Insn 298: point = 1125
   Insn 297: point = 1127
  BB 23
   Insn 294: point = 1128
   Insn 293: point = 1128
   Insn 292: point = 1128
  BB 22
   Insn 290: point = 1128
   Insn 289: point = 1128
   Insn 288: point = 1129
   Insn 287: point = 1130
   Insn 286: point = 1130
   Insn 285: point = 1131
   Insn 284: point = 1131
   Insn 283: point = 1133
   Insn 282: point = 1134
  BB 19
   Insn 1217: point = 1134
   Insn 263: point = 1134
   Insn 262: point = 1134
   Insn 261: point = 1134
  BB 17
   Insn 1215: point = 1134
   Insn 247: point = 1134
  BB 15
   Insn 1213: point = 1134
   Insn 233: point = 1134
  BB 13
   Insn 1211: point = 1134
   Insn 219: point = 1134
  BB 10
   Insn 1209: point = 1134
   Insn 195: point = 1134
  BB 21
   Insn 279: point = 1134
   Insn 278: point = 1134
   Insn 277: point = 1134
  BB 20
   Insn 275: point = 1134
   Insn 274: point = 1134
   Insn 273: point = 1135
   Insn 272: point = 1136
   Insn 271: point = 1136
   Insn 270: point = 1137
   Insn 269: point = 1137
   Insn 268: point = 1139
  BB 18
   Insn 259: point = 1140
   Insn 258: point = 1140
   Insn 257: point = 1141
   Insn 256: point = 1142
   Insn 255: point = 1142
   Insn 254: point = 1143
   Insn 253: point = 1143
   Insn 252: point = 1145
  BB 16
   Insn 245: point = 1146
   Insn 244: point = 1146
   Insn 243: point = 1147
   Insn 242: point = 1148
   Insn 241: point = 1148
   Insn 240: point = 1149
   Insn 239: point = 1149
   Insn 238: point = 1151
  BB 14
   Insn 231: point = 1152
   Insn 230: point = 1152
   Insn 229: point = 1153
   Insn 228: point = 1154
   Insn 227: point = 1154
   Insn 226: point = 1155
   Insn 225: point = 1155
   Insn 224: point = 1157
  BB 12
   Insn 216: point = 1158
   Insn 215: point = 1158
   Insn 214: point = 1159
   Insn 213: point = 1160
   Insn 212: point = 1160
   Insn 211: point = 1161
   Insn 210: point = 1161
   Insn 209: point = 1163
  BB 11
   Insn 207: point = 1164
   Insn 206: point = 1164
   Insn 205: point = 1165
   Insn 204: point = 1166
   Insn 203: point = 1166
   Insn 202: point = 1167
   Insn 201: point = 1167
   Insn 200: point = 1169
  BB 9
   Insn 192: point = 1170
   Insn 191: point = 1170
   Insn 190: point = 1171
   Insn 189: point = 1172
   Insn 188: point = 1172
   Insn 187: point = 1173
   Insn 186: point = 1173
   Insn 185: point = 1175
  BB 8
   Insn 183: point = 1176
   Insn 182: point = 1176
   Insn 181: point = 1177
   Insn 180: point = 1178
   Insn 179: point = 1178
   Insn 178: point = 1179
   Insn 177: point = 1179
   Insn 176: point = 1181
  BB 6
   Insn 143: point = 1182
   Insn 142: point = 1182
   Insn 141: point = 1183
  BB 7
   Insn 1207: point = 1184
   Insn 170: point = 1184
   Insn 169: point = 1184
   Insn 168: point = 1185
   Insn 167: point = 1186
   Insn 166: point = 1188
   Insn 165: point = 1190
   Insn 164: point = 1192
   Insn 163: point = 1194
   Insn 162: point = 1195
   Insn 161: point = 1197
   Insn 160: point = 1199
   Insn 159: point = 1200
   Insn 158: point = 1202
   Insn 157: point = 1204
   Insn 156: point = 1205
   Insn 155: point = 1206
   Insn 154: point = 1207
   Insn 153: point = 1209
   Insn 152: point = 1211
   Insn 151: point = 1213
   Insn 150: point = 1214
   Insn 149: point = 1216
   Insn 148: point = 1218
   Insn 147: point = 1219
   Insn 146: point = 1221
   Insn 145: point = 1223
  BB 5
   Insn 139: point = 1224
   Insn 138: point = 1224
   Insn 137: point = 1225
   Insn 136: point = 1227
   Insn 135: point = 1228
   Insn 134: point = 1228
   Insn 133: point = 1229
   Insn 132: point = 1231
   Insn 131: point = 1233
   Insn 130: point = 1234
   Insn 129: point = 1236
   Insn 128: point = 1237
   Insn 127: point = 1239
   Insn 126: point = 1241
   Insn 125: point = 1242
   Insn 124: point = 1243
   Insn 123: point = 1245
   Insn 122: point = 1246
   Insn 121: point = 1246
   Insn 120: point = 1247
   Insn 119: point = 1249
   Insn 118: point = 1251
   Insn 117: point = 1252
   Insn 116: point = 1254
   Insn 115: point = 1255
   Insn 114: point = 1257
   Insn 113: point = 1259
   Insn 112: point = 1260
   Insn 111: point = 1261
   Insn 110: point = 1263
   Insn 109: point = 1264
   Insn 108: point = 1264
   Insn 107: point = 1265
   Insn 106: point = 1267
   Insn 105: point = 1269
   Insn 104: point = 1270
   Insn 103: point = 1272
   Insn 102: point = 1273
   Insn 101: point = 1275
   Insn 100: point = 1277
   Insn 99: point = 1278
   Insn 98: point = 1279
   Insn 97: point = 1281
   Insn 96: point = 1282
   Insn 95: point = 1282
   Insn 94: point = 1283
   Insn 93: point = 1285
   Insn 92: point = 1287
   Insn 91: point = 1288
   Insn 90: point = 1290
   Insn 89: point = 1291
   Insn 88: point = 1293
   Insn 87: point = 1295
   Insn 86: point = 1296
   Insn 85: point = 1297
   Insn 84: point = 1299
   Insn 83: point = 1300
   Insn 82: point = 1300
   Insn 81: point = 1301
   Insn 80: point = 1303
   Insn 79: point = 1305
   Insn 78: point = 1306
   Insn 77: point = 1308
   Insn 76: point = 1309
   Insn 75: point = 1311
   Insn 74: point = 1313
   Insn 73: point = 1314
   Insn 72: point = 1315
   Insn 71: point = 1317
   Insn 70: point = 1318
   Insn 69: point = 1318
   Insn 68: point = 1319
   Insn 67: point = 1321
   Insn 66: point = 1323
   Insn 65: point = 1324
   Insn 64: point = 1326
   Insn 63: point = 1327
   Insn 62: point = 1329
   Insn 61: point = 1331
   Insn 60: point = 1332
   Insn 59: point = 1333
   Insn 58: point = 1334
   Insn 57: point = 1334
   Insn 56: point = 1335
   Insn 55: point = 1337
   Insn 54: point = 1339
   Insn 53: point = 1340
   Insn 52: point = 1341
   Insn 51: point = 1343
   Insn 50: point = 1345
   Insn 49: point = 1347
   Insn 48: point = 1349
   Insn 1253: point = 1350
	Hard reg 1 is preferable by r797 with profit 1
   Insn 47: point = 1352
   Insn 1252: point = 1352
	Hard reg 1 is preferable by r797 with profit 1
	Hard reg 0 is preferable by r797 with profit 1
   Insn 46: point = 1354
   Insn 45: point = 1356
  BB 4
   Insn 43: point = 1357
   Insn 42: point = 1357
   Insn 41: point = 1358
   Insn 40: point = 1360
   Insn 39: point = 1362
   Insn 38: point = 1363
   Insn 37: point = 1365
   Insn 36: point = 1367
   Insn 35: point = 1369
   Insn 34: point = 1370
   Insn 33: point = 1370
   Insn 32: point = 1370
   Insn 31: point = 1370
   Insn 30: point = 1371
   Insn 29: point = 1373
  BB 2
   Insn 22: point = 1374
   Insn 21: point = 1374
   Insn 20: point = 1374
   Insn 19: point = 1374
   Insn 18: point = 1374
   Insn 17: point = 1374
   Insn 16: point = 1374
   Insn 15: point = 1374
   Insn 14: point = 1374
   Insn 13: point = 1374
   Insn 9: point = 1374
   Insn 8: point = 1375
   Insn 7: point = 1376
   Insn 6: point = 1376
   Insn 5: point = 1376
   Insn 4: point = 1376
   Insn 3: point = 1376
   Insn 2: point = 1376
 r87: [6..7]
 r88: [1369..1371]
 r89: [1361..1363]
 r90: [1359..1360]
 r91: [1357..1358]
 r92: [1353..1354]
 r93: [1348..1350]
 r94: [1346..1347]
 r95: [1344..1345]
 r96: [1342..1343]
 r97: [1336..1337]
 r98: [1334..1335]
 r99: [1328..1329]
 r100: [1325..1327]
 r101: [1314..1324]
 r102: [1320..1321]
 r103: [1318..1319]
 r104: [1314..1315]
 r105: [1310..1311]
 r106: [1307..1309]
 r107: [1296..1306]
 r108: [1302..1303]
 r109: [1300..1301]
 r110: [1296..1297]
 r111: [1292..1293]
 r112: [1289..1291]
 r113: [1278..1288]
 r114: [1284..1285]
 r115: [1282..1283]
 r116: [1278..1279]
 r117: [1274..1275]
 r118: [1271..1273]
 r119: [1260..1270]
 r120: [1266..1267]
 r121: [1264..1265]
 r122: [1260..1261]
 r123: [1256..1257]
 r124: [1253..1255]
 r125: [1242..1252]
 r126: [1248..1249]
 r127: [1246..1247]
 r128: [1242..1243]
 r129: [1238..1239]
 r130: [1235..1237]
 r131: [1224..1234]
 r132: [1230..1231]
 r133: [1228..1229]
 r134: [1224..1225]
 r135: [1220..1221]
 r136: [1217..1219]
 r137: [1215..1216]
 r138: [1208..1214]
 r139: [1210..1211]
 r140: [1208..1209]
 r141: [1205..1207]
 r142: [1201..1202]
 r143: [1198..1200]
 r144: [1196..1197]
 r145: [1187..1195]
 r146: [1191..1192]
 r147: [1189..1190]
 r148: [1187..1188]
 r149: [1184..1186]
 r150: [1178..1179]
 r151: [1176..1177]
 r152: [1172..1173]
 r153: [1170..1171]
 r154: [1166..1167]
 r155: [1164..1165]
 r156: [1160..1161]
 r157: [1158..1159]
 r158: [1154..1155]
 r159: [1152..1153]
 r160: [1148..1149]
 r161: [1146..1147]
 r162: [1142..1143]
 r163: [1140..1141]
 r164: [1136..1137]
 r165: [1134..1135]
 r166: [1130..1131]
 r167: [1128..1129]
 r168: [1124..1125]
 r169: [1119..1121]
 r170: [1117..1118]
 r171: [1103..1116]
 r172: [1112..1113]
 r173: [1107..1109]
 r174: [1105..1106]
 r175: [1103..1104]
 r176: [1097..1098]
 r177: [1092..1094]
 r178: [1090..1091]
 r179: [1076..1089]
 r180: [1085..1086]
 r181: [1080..1082]
 r182: [1078..1079]
 r183: [1074..1077]
 r184: [1053..1072]
 r185: [1067..1069]
 r186: [1059..1061]
 r187: [1057..1058]
 r188: [1055..1056]
 r189: [1053..1054]
 r190: [1046..1048]
 r191: [1038..1040]
 r192: [1036..1037]
 r193: [1034..1035]
 r194: [1029..1033]
 r195: [1029..1030]
 r196: [1027..1028]
 r197: [963..964]
 r198: [961..962]
 r199: [959..960]
 r200: [1023..1024]
 r201: [1019..1020]
 r202: [1017..1018]
 r203: [941..942]
 r204: [939..940]
 r205: [937..938]
 r206: [935..936]
 r207: [1013..1014]
 r208: [1008..1010]
 r209: [1006..1007]
 r210: [1004..1005]
 r211: [1002..1003]
 r212: [1000..1001]
 r213: [994..995]
 r214: [989..991]
 r215: [987..988]
 r216: [985..986]
 r217: [983..984]
 r218: [981..982]
 r219: [19..20]
 r220: [14..16]
 r221: [12..13]
 r222: [10..11]
 r223: [854..856]
 r224: [847..853]
 r225: [849..850]
 r226: [847..848]
 r227: [835..846]
 r228: [842..843]
 r229: [839..841]
 r230: [837..838]
 r231: [834..836]
 r232: [829..831]
 r233: [821..823]
 r234: [819..820]
 r235: [801..818]
 r236: [813..815]
 r237: [805..807]
 r238: [803..804]
 r239: [799..802]
 r240: [911..917]
 r241: [913..914]
 r242: [911..912]
 r243: [899..910]
 r244: [906..907]
 r245: [903..905]
 r246: [901..902]
 r247: [898..900]
 r248: [893..895]
 r249: [885..887]
 r250: [883..884]
 r251: [865..882]
 r252: [877..879]
 r253: [869..871]
 r254: [867..868]
 r255: [863..866]
 r256: [792..793]
 r257: [789..791]
 r258: [787..788]
 r259: [785..786]
 r260: [783..784]
 r261: [779..780]
 r262: [776..778]
 r263: [774..775]
 r264: [732..773]
 r265: [769..770]
 r266: [764..766]
 r267: [762..763]
 r268: [760..761]
 r269: [758..759]
 r270: [731..757]
 r271: [753..754]
 r272: [748..750]
 r273: [746..747]
 r274: [741..745]
 r275: [735..736]
 r276: [730..734]
 r277: [727..728]
 r278: [709..724]
 r279: [720..721]
 r280: [715..717]
 r281: [713..714]
 r282: [711..712]
 r283: [709..710]
 r284: [650..651]
 r285: [661..676]
 r286: [672..673]
 r287: [667..669]
 r288: [665..666]
 r289: [663..664]
 r290: [661..662]
 r291: [705..706]
 r292: [702..704]
 r293: [700..701]
 r294: [693..699]
 r295: [695..696]
 r296: [693..694]
 r297: [679..692]
 r298: [688..689]
 r299: [685..687]
 r300: [683..684]
 r301: [681..682]
 r302: [679..680]
 r303: [459..474]
 r304: [470..471]
 r305: [465..467]
 r306: [463..464]
 r307: [461..462]
 r308: [459..460]
 r309: [646..647]
 r310: [641..643]
 r311: [639..640]
 r312: [637..638]
 r313: [635..636]
 r314: [633..634]
 r315: [560..578]
 r316: [574..575]
 r317: [571..573]
 r318: [569..570]
 r319: [562..568]
 r320: [564..565]
 r321: [562..563]
 r322: [559..561]
 r323: [629..630]
 r324: [624..626]
 r325: [622..623]
 r326: [620..621]
 r327: [618..619]
 r328: [616..617]
 r329: [549..558]
 r330: [554..555]
 r331: [551..553]
 r332: [548..550]
 r333: [544..545]
 r334: [541..543]
 r335: [539..540]
 r336: [532..538]
 r337: [534..535]
 r338: [532..533]
 r339: [518..531]
 r340: [527..528]
 r341: [524..526]
 r342: [522..523]
 r343: [520..521]
 r344: [518..519]
 r345: [612..613]
 r346: [607..609]
 r347: [605..606]
 r348: [603..604]
 r349: [601..602]
 r350: [599..600]
 r351: [508..517]
 r352: [513..514]
 r353: [510..512]
 r354: [507..509]
 r355: [503..504]
 r356: [500..502]
 r357: [498..499]
 r358: [491..497]
 r359: [493..494]
 r360: [491..492]
 r361: [477..490]
 r362: [486..487]
 r363: [483..485]
 r364: [481..482]
 r365: [479..480]
 r366: [477..478]
 r367: [580..598]
 r368: [594..595]
 r369: [591..593]
 r370: [589..590]
 r371: [582..588]
 r372: [584..585]
 r373: [582..583]
 r374: [579..581]
 r375: [455..456]
 r376: [450..452]
 r377: [448..449]
 r378: [443..447]
 r379: [437..438]
 r380: [433..434]
 r381: [428..430]
 r382: [426..427]
 r383: [424..425]
 r384: [422..423]
 r385: [420..421]
 r386: [416..417]
 r387: [411..413]
 r388: [409..410]
 r389: [407..408]
 r390: [405..406]
 r391: [403..404]
 r392: [401..402]
 r393: [397..398]
 r394: [394..396]
 r395: [392..393]
 r396: [385..391]
 r397: [387..388]
 r398: [385..386]
 r399: [360..384]
 r400: [380..381]
 r401: [377..379]
 r402: [375..376]
 r403: [368..374]
 r404: [370..371]
 r405: [368..369]
 r406: [366..367]
 r407: [364..365]
 r408: [360..361]
 r409: [356..357]
 r410: [351..353]
 r411: [349..350]
 r412: [347..348]
 r413: [345..346]
 r414: [343..344]
 r415: [284..299]
 r416: [295..296]
 r417: [290..292]
 r418: [288..289]
 r419: [286..287]
 r420: [284..285]
 r421: [339..340]
 r422: [336..338]
 r423: [334..335]
 r424: [327..333]
 r425: [329..330]
 r426: [327..328]
 r427: [325..326]
 r428: [323..324]
 r429: [317..318]
 r430: [314..316]
 r431: [312..313]
 r432: [305..311]
 r433: [307..308]
 r434: [305..306]
 r435: [302..304]
 r436: [280..281]
 r437: [275..277]
 r438: [273..274]
 r439: [271..272]
 r440: [269..270]
 r441: [267..268]
 r442: [217..232]
 r443: [228..229]
 r444: [223..225]
 r445: [221..222]
 r446: [219..220]
 r447: [217..218]
 r448: [263..264]
 r449: [260..262]
 r450: [258..259]
 r451: [256..257]
 r452: [250..251]
 r453: [247..249]
 r454: [245..246]
 r455: [238..244]
 r456: [240..241]
 r457: [238..239]
 r458: [235..237]
 r459: [210..214]
 r460: [209..211]
 r461: [175..206]
 r462: [202..203]
 r463: [197..199]
 r464: [195..196]
 r465: [193..194]
 r466: [191..192]
 r467: [189..190]
 r468: [172..188]
 r469: [184..185]
 r470: [181..183]
 r471: [179..180]
 r472: [171..178]
 r473: [165..166]
 r474: [25..40]
 r475: [36..37]
 r476: [31..33]
 r477: [29..30]
 r478: [27..28]
 r479: [25..26]
 r480: [161..162]
 r481: [158..160]
 r482: [156..157]
 r483: [149..155]
 r484: [151..152]
 r485: [149..150]
 r486: [107..148]
 r487: [144..145]
 r488: [141..143]
 r489: [139..140]
 r490: [132..138]
 r491: [134..135]
 r492: [132..133]
 r493: [130..131]
 r494: [109..129]
 r495: [125..126]
 r496: [122..124]
 r497: [120..121]
 r498: [113..119]
 r499: [115..116]
 r500: [113..114]
 r501: [111..112]
 r502: [109..110]
 r503: [107..108]
 r504: [103..104]
 r505: [100..102]
 r506: [98..99]
 r507: [89..97]
 r508: [93..94]
 r509: [91..92]
 r510: [89..90]
 r511: [43..88]
 r512: [84..85]
 r513: [81..83]
 r514: [79..80]
 r515: [70..78]
 r516: [74..75]
 r517: [72..73]
 r518: [70..71]
 r519: [68..69]
 r520: [45..67]
 r521: [63..64]
 r522: [60..62]
 r523: [58..59]
 r524: [49..57]
 r525: [53..54]
 r526: [51..52]
 r527: [49..50]
 r528: [47..48]
 r529: [45..46]
 r530: [43..44]
 r531: [2..3]
 r532: [0..1]
 r533: [1374..1375]
 r534: [8..9]
 r535: [1372..1373]
 r536: [1368..1370] [1364..1365]
 r537: [1366..1367]
 r538: [1361..1362]
 r539: [1355..1356]
 r540: [1348..1349]
 r541: [1340..1341]
 r542: [1338..1339]
 r543: [1332..1333]
 r544: [1330..1331]
 r545: [1325..1326]
 r546: [1322..1323]
 r547: [1316..1317]
 r548: [1312..1313]
 r549: [1307..1308]
 r550: [1304..1305]
 r551: [1298..1299]
 r552: [1294..1295]
 r553: [1289..1290]
 r554: [1286..1287]
 r555: [1280..1281]
 r556: [1276..1277]
 r557: [1271..1272]
 r558: [1268..1269]
 r559: [1262..1263]
 r560: [1258..1259]
 r561: [1253..1254]
 r562: [1250..1251]
 r563: [1244..1245]
 r564: [1240..1241]
 r565: [1235..1236]
 r566: [1232..1233]
 r567: [1226..1227]
 r568: [1182..1183]
 r569: [1222..1223]
 r570: [1217..1218]
 r571: [1212..1213]
 r572: [1205..1206]
 r573: [1203..1204]
 r574: [1198..1199]
 r575: [1193..1194]
 r576: [1184..1185]
 r577: [1180..1181]
 r578: [1174..1175]
 r579: [1168..1169]
 r580: [1162..1163]
 r581: [1156..1157]
 r582: [1150..1151]
 r583: [1144..1145]
 r584: [1138..1139]
 r585: [1132..1133]
 r586: [1126..1127]
 r587: [1119..1120]
 r588: [1114..1115]
 r589: [1107..1108]
 r590: [1101..1102]
 r591: [1099..1100]
 r592: [1092..1093]
 r593: [1087..1088]
 r594: [1080..1081]
 r595: [1070..1071]
 r596: [1066..1068] [1062..1063]
 r597: [1064..1065]
 r598: [1059..1060]
 r599: [1051..1052]
 r600: [1049..1050]
 r601: [1045..1047] [1041..1042]
 r602: [1043..1044]
 r603: [1038..1039]
 r604: [1031..1032]
 r605: [965..966]
 r606: [957..958]
 r607: [949..956]
 r608: [948..955]
 r609: [947..954]
 r610: [946..953]
 r611: [945..952]
 r612: [950..951]
 r613: [1025..1026]
 r614: [1021..1022]
 r615: [943..944]
 r616: [933..934]
 r617: [925..932]
 r618: [924..931]
 r619: [923..930]
 r620: [922..929]
 r621: [921..928]
 r622: [926..927]
 r623: [1015..1016]
 r624: [1008..1009]
 r625: [998..999]
 r626: [996..997]
 r627: [989..990]
 r628: [979..980]
 r629: [971..978]
 r630: [970..977]
 r631: [969..976]
 r632: [968..975]
 r633: [967..974]
 r634: [972..973]
 r635: [21..22]
 r636: [14..15]
 r637: [857..859]
 r638: [857..858]
 r639: [854..855]
 r640: [851..852]
 r641: [844..845]
 r642: [839..840]
 r643: [832..833]
 r644: [828..830] [824..825]
 r645: [826..827]
 r646: [821..822]
 r647: [816..817]
 r648: [812..814] [808..809]
 r649: [810..811]
 r650: [805..806]
 r651: [796..797]
 r652: [918..920]
 r653: [918..919]
 r654: [915..916]
 r655: [908..909]
 r656: [903..904]
 r657: [896..897]
 r658: [892..894] [888..889]
 r659: [890..891]
 r660: [885..886]
 r661: [880..881]
 r662: [876..878] [872..873]
 r663: [874..875]
 r664: [869..870]
 r665: [860..861]
 r666: [23..24]
 r667: [794..795]
 r668: [789..790]
 r669: [781..782]
 r670: [776..777]
 r671: [771..772]
 r672: [764..765]
 r673: [755..756]
 r674: [748..749]
 r675: [741..742]
 r676: [739..740]
 r677: [737..738]
 r678: [729..733]
 r679: [725..726]
 r680: [722..723]
 r681: [715..716]
 r682: [657..658]
 r683: [659..660]
 r684: [652..654]
 r685: [652..653]
 r686: [677..678]
 r687: [674..675]
 r688: [667..668]
 r689: [707..708]
 r690: [702..703]
 r691: [697..698]
 r692: [690..691]
 r693: [685..686]
 r694: [475..476]
 r695: [472..473]
 r696: [465..466]
 r697: [648..649]
 r698: [641..642]
 r699: [576..577]
 r700: [571..572]
 r701: [566..567]
 r702: [631..632]
 r703: [624..625]
 r704: [556..557]
 r705: [551..552]
 r706: [546..547]
 r707: [541..542]
 r708: [536..537]
 r709: [529..530]
 r710: [524..525]
 r711: [614..615]
 r712: [607..608]
 r713: [515..516]
 r714: [510..511]
 r715: [505..506]
 r716: [500..501]
 r717: [495..496]
 r718: [488..489]
 r719: [483..484]
 r720: [596..597]
 r721: [591..592]
 r722: [586..587]
 r723: [457..458]
 r724: [450..451]
 r725: [443..444]
 r726: [441..442]
 r727: [439..440]
 r728: [435..436]
 r729: [428..429]
 r730: [418..419]
 r731: [411..412]
 r732: [399..400]
 r733: [394..395]
 r734: [389..390]
 r735: [382..383]
 r736: [377..378]
 r737: [372..373]
 r738: [362..363]
 r739: [358..359]
 r740: [351..352]
 r741: [300..301]
 r742: [297..298]
 r743: [290..291]
 r744: [341..342]
 r745: [336..337]
 r746: [331..332]
 r747: [321..322]
 r748: [319..320]
 r749: [314..315]
 r750: [309..310]
 r751: [302..303]
 r752: [282..283]
 r753: [275..276]
 r754: [233..234]
 r755: [230..231]
 r756: [223..224]
 r757: [265..266]
 r758: [260..261]
 r759: [254..255]
 r760: [252..253]
 r761: [247..248]
 r762: [242..243]
 r763: [235..236]
 r764: [215..216]
 r765: [212..213]
 r766: [207..208]
 r767: [204..205]
 r768: [197..198]
 r769: [186..187]
 r770: [181..182]
 r771: [174..177]
 r772: [173..176]
 r773: [167..168]
 r774: [41..42]
 r775: [38..39]
 r776: [31..32]
 r777: [163..164]
 r778: [158..159]
 r779: [153..154]
 r780: [146..147]
 r781: [141..142]
 r782: [136..137]
 r783: [127..128]
 r784: [122..123]
 r785: [117..118]
 r786: [105..106]
 r787: [100..101]
 r788: [95..96]
 r789: [86..87]
 r790: [81..82]
 r791: [76..77]
 r792: [65..66]
 r793: [60..61]
 r794: [55..56]
 r795: [4..5]
 r797: [1351..1352]
 r798: [1122..1123]
 r799: [1110..1111]
 r800: [1095..1096]
 r801: [1083..1084]
 r802: [1073..1075]
 r803: [1011..1012]
 r804: [992..993]
 r805: [17..18]
 r806: [798..800]
 r807: [862..864]
 r808: [767..768]
 r809: [751..752]
 r810: [743..744]
 r811: [718..719]
 r812: [655..656]
 r813: [670..671]
 r814: [468..469]
 r815: [644..645]
 r816: [627..628]
 r817: [610..611]
 r818: [453..454]
 r819: [445..446]
 r820: [431..432]
 r821: [414..415]
 r822: [354..355]
 r823: [293..294]
 r824: [278..279]
 r825: [226..227]
 r826: [200..201]
 r827: [169..170]
 r828: [34..35]
Compressing live ranges: from 1376 to 1178 - 85%
Ranges after the compression:
 r87: [6..7]
 r88: [1172..1173]
 r89: [1166..1167]
 r90: [1164..1165]
 r91: [1162..1163]
 r92: [1158..1159]
 r93: [1154..1155]
 r94: [1152..1153]
 r95: [1150..1151]
 r96: [1148..1149]
 r97: [1142..1143]
 r98: [1140..1141]
 r99: [1134..1135]
 r100: [1132..1133]
 r101: [1122..1131]
 r102: [1128..1129]
 r103: [1126..1127]
 r104: [1122..1123]
 r105: [1118..1119]
 r106: [1116..1117]
 r107: [1106..1115]
 r108: [1112..1113]
 r109: [1110..1111]
 r110: [1106..1107]
 r111: [1102..1103]
 r112: [1100..1101]
 r113: [1090..1099]
 r114: [1096..1097]
 r115: [1094..1095]
 r116: [1090..1091]
 r117: [1086..1087]
 r118: [1084..1085]
 r119: [1074..1083]
 r120: [1080..1081]
 r121: [1078..1079]
 r122: [1074..1075]
 r123: [1070..1071]
 r124: [1068..1069]
 r125: [1058..1067]
 r126: [1064..1065]
 r127: [1062..1063]
 r128: [1058..1059]
 r129: [1054..1055]
 r130: [1052..1053]
 r131: [1042..1051]
 r132: [1048..1049]
 r133: [1046..1047]
 r134: [1042..1043]
 r135: [1038..1039]
 r136: [1036..1037]
 r137: [1034..1035]
 r138: [1028..1033]
 r139: [1030..1031]
 r140: [1028..1029]
 r141: [1026..1027]
 r142: [1022..1023]
 r143: [1020..1021]
 r144: [1018..1019]
 r145: [1010..1017]
 r146: [1014..1015]
 r147: [1012..1013]
 r148: [1010..1011]
 r149: [1008..1009]
 r150: [1002..1003]
 r151: [1000..1001]
 r152: [996..997]
 r153: [994..995]
 r154: [990..991]
 r155: [988..989]
 r156: [984..985]
 r157: [982..983]
 r158: [978..979]
 r159: [976..977]
 r160: [972..973]
 r161: [970..971]
 r162: [966..967]
 r163: [964..965]
 r164: [960..961]
 r165: [958..959]
 r166: [954..955]
 r167: [952..953]
 r168: [948..949]
 r169: [944..945]
 r170: [942..943]
 r171: [930..941]
 r172: [938..939]
 r173: [934..935]
 r174: [932..933]
 r175: [930..931]
 r176: [924..925]
 r177: [920..921]
 r178: [918..919]
 r179: [906..917]
 r180: [914..915]
 r181: [910..911]
 r182: [908..909]
 r183: [904..907]
 r184: [888..903]
 r185: [900..901]
 r186: [894..895]
 r187: [892..893]
 r188: [890..891]
 r189: [888..889]
 r190: [882..883]
 r191: [876..877]
 r192: [874..875]
 r193: [872..873]
 r194: [868..871]
 r195: [868..869]
 r196: [866..867]
 r197: [814..815]
 r198: [812..813]
 r199: [810..811]
 r200: [862..863]
 r201: [858..859]
 r202: [856..857]
 r203: [802..803]
 r204: [800..801]
 r205: [798..799]
 r206: [796..797]
 r207: [852..853]
 r208: [848..849]
 r209: [846..847]
 r210: [844..845]
 r211: [842..843]
 r212: [840..841]
 r213: [834..835]
 r214: [830..831]
 r215: [828..829]
 r216: [826..827]
 r217: [824..825]
 r218: [822..823]
 r219: [18..19]
 r220: [14..15]
 r221: [12..13]
 r222: [10..11]
 r223: [740..741]
 r224: [734..739]
 r225: [736..737]
 r226: [734..735]
 r227: [724..733]
 r228: [730..731]
 r229: [728..729]
 r230: [726..727]
 r231: [724..725]
 r232: [720..721]
 r233: [714..715]
 r234: [712..713]
 r235: [698..711]
 r236: [708..709]
 r237: [702..703]
 r238: [700..701]
 r239: [696..699]
 r240: [784..789]
 r241: [786..787]
 r242: [784..785]
 r243: [774..783]
 r244: [780..781]
 r245: [778..779]
 r246: [776..777]
 r247: [774..775]
 r248: [770..771]
 r249: [764..765]
 r250: [762..763]
 r251: [748..761]
 r252: [758..759]
 r253: [752..753]
 r254: [750..751]
 r255: [746..749]
 r256: [690..691]
 r257: [688..689]
 r258: [686..687]
 r259: [684..685]
 r260: [682..683]
 r261: [678..679]
 r262: [676..677]
 r263: [674..675]
 r264: [638..673]
 r265: [670..671]
 r266: [666..667]
 r267: [664..665]
 r268: [662..663]
 r269: [660..661]
 r270: [638..659]
 r271: [656..657]
 r272: [652..653]
 r273: [650..651]
 r274: [646..649]
 r275: [640..641]
 r276: [638..639]
 r277: [636..637]
 r278: [620..633]
 r279: [630..631]
 r280: [626..627]
 r281: [624..625]
 r282: [622..623]
 r283: [620..621]
 r284: [568..569]
 r285: [578..591]
 r286: [588..589]
 r287: [584..585]
 r288: [582..583]
 r289: [580..581]
 r290: [578..579]
 r291: [616..617]
 r292: [614..615]
 r293: [612..613]
 r294: [606..611]
 r295: [608..609]
 r296: [606..607]
 r297: [594..605]
 r298: [602..603]
 r299: [600..601]
 r300: [598..599]
 r301: [596..597]
 r302: [594..595]
 r303: [404..417]
 r304: [414..415]
 r305: [410..411]
 r306: [408..409]
 r307: [406..407]
 r308: [404..405]
 r309: [564..565]
 r310: [560..561]
 r311: [558..559]
 r312: [556..557]
 r313: [554..555]
 r314: [552..553]
 r315: [488..503]
 r316: [500..501]
 r317: [498..499]
 r318: [496..497]
 r319: [490..495]
 r320: [492..493]
 r321: [490..491]
 r322: [488..489]
 r323: [548..549]
 r324: [544..545]
 r325: [542..543]
 r326: [540..541]
 r327: [538..539]
 r328: [536..537]
 r329: [480..487]
 r330: [484..485]
 r331: [482..483]
 r332: [480..481]
 r333: [476..477]
 r334: [474..475]
 r335: [472..473]
 r336: [466..471]
 r337: [468..469]
 r338: [466..467]
 r339: [454..465]
 r340: [462..463]
 r341: [460..461]
 r342: [458..459]
 r343: [456..457]
 r344: [454..455]
 r345: [532..533]
 r346: [528..529]
 r347: [526..527]
 r348: [524..525]
 r349: [522..523]
 r350: [520..521]
 r351: [446..453]
 r352: [450..451]
 r353: [448..449]
 r354: [446..447]
 r355: [442..443]
 r356: [440..441]
 r357: [438..439]
 r358: [432..437]
 r359: [434..435]
 r360: [432..433]
 r361: [420..431]
 r362: [428..429]
 r363: [426..427]
 r364: [424..425]
 r365: [422..423]
 r366: [420..421]
 r367: [504..519]
 r368: [516..517]
 r369: [514..515]
 r370: [512..513]
 r371: [506..511]
 r372: [508..509]
 r373: [506..507]
 r374: [504..505]
 r375: [400..401]
 r376: [396..397]
 r377: [394..395]
 r378: [390..393]
 r379: [384..385]
 r380: [380..381]
 r381: [376..377]
 r382: [374..375]
 r383: [372..373]
 r384: [370..371]
 r385: [368..369]
 r386: [364..365]
 r387: [360..361]
 r388: [358..359]
 r389: [356..357]
 r390: [354..355]
 r391: [352..353]
 r392: [350..351]
 r393: [346..347]
 r394: [344..345]
 r395: [342..343]
 r396: [336..341]
 r397: [338..339]
 r398: [336..337]
 r399: [314..335]
 r400: [332..333]
 r401: [330..331]
 r402: [328..329]
 r403: [322..327]
 r404: [324..325]
 r405: [322..323]
 r406: [320..321]
 r407: [318..319]
 r408: [314..315]
 r409: [310..311]
 r410: [306..307]
 r411: [304..305]
 r412: [302..303]
 r413: [300..301]
 r414: [298..299]
 r415: [246..259]
 r416: [256..257]
 r417: [252..253]
 r418: [250..251]
 r419: [248..249]
 r420: [246..247]
 r421: [294..295]
 r422: [292..293]
 r423: [290..291]
 r424: [284..289]
 r425: [286..287]
 r426: [284..285]
 r427: [282..283]
 r428: [280..281]
 r429: [274..275]
 r430: [272..273]
 r431: [270..271]
 r432: [264..269]
 r433: [266..267]
 r434: [264..265]
 r435: [262..263]
 r436: [242..243]
 r437: [238..239]
 r438: [236..237]
 r439: [234..235]
 r440: [232..233]
 r441: [230..231]
 r442: [186..199]
 r443: [196..197]
 r444: [192..193]
 r445: [190..191]
 r446: [188..189]
 r447: [186..187]
 r448: [226..227]
 r449: [224..225]
 r450: [222..223]
 r451: [220..221]
 r452: [214..215]
 r453: [212..213]
 r454: [210..211]
 r455: [204..209]
 r456: [206..207]
 r457: [204..205]
 r458: [202..203]
 r459: [180..183]
 r460: [180..181]
 r461: [152..177]
 r462: [174..175]
 r463: [170..171]
 r464: [168..169]
 r465: [166..167]
 r466: [164..165]
 r467: [162..163]
 r468: [152..161]
 r469: [158..159]
 r470: [156..157]
 r471: [154..155]
 r472: [152..153]
 r473: [146..147]
 r474: [24..37]
 r475: [34..35]
 r476: [30..31]
 r477: [28..29]
 r478: [26..27]
 r479: [24..25]
 r480: [142..143]
 r481: [140..141]
 r482: [138..139]
 r483: [132..137]
 r484: [134..135]
 r485: [132..133]
 r486: [96..131]
 r487: [128..129]
 r488: [126..127]
 r489: [124..125]
 r490: [118..123]
 r491: [120..121]
 r492: [118..119]
 r493: [116..117]
 r494: [98..115]
 r495: [112..113]
 r496: [110..111]
 r497: [108..109]
 r498: [102..107]
 r499: [104..105]
 r500: [102..103]
 r501: [100..101]
 r502: [98..99]
 r503: [96..97]
 r504: [92..93]
 r505: [90..91]
 r506: [88..89]
 r507: [80..87]
 r508: [84..85]
 r509: [82..83]
 r510: [80..81]
 r511: [40..79]
 r512: [76..77]
 r513: [74..75]
 r514: [72..73]
 r515: [64..71]
 r516: [68..69]
 r517: [66..67]
 r518: [64..65]
 r519: [62..63]
 r520: [42..61]
 r521: [58..59]
 r522: [56..57]
 r523: [54..55]
 r524: [46..53]
 r525: [50..51]
 r526: [48..49]
 r527: [46..47]
 r528: [44..45]
 r529: [42..43]
 r530: [40..41]
 r531: [2..3]
 r532: [0..1]
 r533: [1176..1177]
 r534: [8..9]
 r535: [1174..1175]
 r536: [1172..1173] [1168..1169]
 r537: [1170..1171]
 r538: [1166..1167]
 r539: [1160..1161]
 r540: [1154..1155]
 r541: [1146..1147]
 r542: [1144..1145]
 r543: [1138..1139]
 r544: [1136..1137]
 r545: [1132..1133]
 r546: [1130..1131]
 r547: [1124..1125]
 r548: [1120..1121]
 r549: [1116..1117]
 r550: [1114..1115]
 r551: [1108..1109]
 r552: [1104..1105]
 r553: [1100..1101]
 r554: [1098..1099]
 r555: [1092..1093]
 r556: [1088..1089]
 r557: [1084..1085]
 r558: [1082..1083]
 r559: [1076..1077]
 r560: [1072..1073]
 r561: [1068..1069]
 r562: [1066..1067]
 r563: [1060..1061]
 r564: [1056..1057]
 r565: [1052..1053]
 r566: [1050..1051]
 r567: [1044..1045]
 r568: [1006..1007]
 r569: [1040..1041]
 r570: [1036..1037]
 r571: [1032..1033]
 r572: [1026..1027]
 r573: [1024..1025]
 r574: [1020..1021]
 r575: [1016..1017]
 r576: [1008..1009]
 r577: [1004..1005]
 r578: [998..999]
 r579: [992..993]
 r580: [986..987]
 r581: [980..981]
 r582: [974..975]
 r583: [968..969]
 r584: [962..963]
 r585: [956..957]
 r586: [950..951]
 r587: [944..945]
 r588: [940..941]
 r589: [934..935]
 r590: [928..929]
 r591: [926..927]
 r592: [920..921]
 r593: [916..917]
 r594: [910..911]
 r595: [902..903]
 r596: [900..901] [896..897]
 r597: [898..899]
 r598: [894..895]
 r599: [886..887]
 r600: [884..885]
 r601: [882..883] [878..879]
 r602: [880..881]
 r603: [876..877]
 r604: [870..871]
 r605: [816..817]
 r606: [808..809]
 r607: [806..807]
 r608: [806..807]
 r609: [806..807]
 r610: [806..807]
 r611: [806..807]
 r612: [806..807]
 r613: [864..865]
 r614: [860..861]
 r615: [804..805]
 r616: [794..795]
 r617: [792..793]
 r618: [792..793]
 r619: [792..793]
 r620: [792..793]
 r621: [792..793]
 r622: [792..793]
 r623: [854..855]
 r624: [848..849]
 r625: [838..839]
 r626: [836..837]
 r627: [830..831]
 r628: [820..821]
 r629: [818..819]
 r630: [818..819]
 r631: [818..819]
 r632: [818..819]
 r633: [818..819]
 r634: [818..819]
 r635: [20..21]
 r636: [14..15]
 r637: [742..743]
 r638: [742..743]
 r639: [740..741]
 r640: [738..739]
 r641: [732..733]
 r642: [728..729]
 r643: [722..723]
 r644: [720..721] [716..717]
 r645: [718..719]
 r646: [714..715]
 r647: [710..711]
 r648: [708..709] [704..705]
 r649: [706..707]
 r650: [702..703]
 r651: [694..695]
 r652: [790..791]
 r653: [790..791]
 r654: [788..789]
 r655: [782..783]
 r656: [778..779]
 r657: [772..773]
 r658: [770..771] [766..767]
 r659: [768..769]
 r660: [764..765]
 r661: [760..761]
 r662: [758..759] [754..755]
 r663: [756..757]
 r664: [752..753]
 r665: [744..745]
 r666: [22..23]
 r667: [692..693]
 r668: [688..689]
 r669: [680..681]
 r670: [676..677]
 r671: [672..673]
 r672: [666..667]
 r673: [658..659]
 r674: [652..653]
 r675: [646..647]
 r676: [644..645]
 r677: [642..643]
 r678: [638..639]
 r679: [634..635]
 r680: [632..633]
 r681: [626..627]
 r682: [574..575]
 r683: [576..577]
 r684: [570..571]
 r685: [570..571]
 r686: [592..593]
 r687: [590..591]
 r688: [584..585]
 r689: [618..619]
 r690: [614..615]
 r691: [610..611]
 r692: [604..605]
 r693: [600..601]
 r694: [418..419]
 r695: [416..417]
 r696: [410..411]
 r697: [566..567]
 r698: [560..561]
 r699: [502..503]
 r700: [498..499]
 r701: [494..495]
 r702: [550..551]
 r703: [544..545]
 r704: [486..487]
 r705: [482..483]
 r706: [478..479]
 r707: [474..475]
 r708: [470..471]
 r709: [464..465]
 r710: [460..461]
 r711: [534..535]
 r712: [528..529]
 r713: [452..453]
 r714: [448..449]
 r715: [444..445]
 r716: [440..441]
 r717: [436..437]
 r718: [430..431]
 r719: [426..427]
 r720: [518..519]
 r721: [514..515]
 r722: [510..511]
 r723: [402..403]
 r724: [396..397]
 r725: [390..391]
 r726: [388..389]
 r727: [386..387]
 r728: [382..383]
 r729: [376..377]
 r730: [366..367]
 r731: [360..361]
 r732: [348..349]
 r733: [344..345]
 r734: [340..341]
 r735: [334..335]
 r736: [330..331]
 r737: [326..327]
 r738: [316..317]
 r739: [312..313]
 r740: [306..307]
 r741: [260..261]
 r742: [258..259]
 r743: [252..253]
 r744: [296..297]
 r745: [292..293]
 r746: [288..289]
 r747: [278..279]
 r748: [276..277]
 r749: [272..273]
 r750: [268..269]
 r751: [262..263]
 r752: [244..245]
 r753: [238..239]
 r754: [200..201]
 r755: [198..199]
 r756: [192..193]
 r757: [228..229]
 r758: [224..225]
 r759: [218..219]
 r760: [216..217]
 r761: [212..213]
 r762: [208..209]
 r763: [202..203]
 r764: [184..185]
 r765: [182..183]
 r766: [178..179]
 r767: [176..177]
 r768: [170..171]
 r769: [160..161]
 r770: [156..157]
 r771: [152..153]
 r772: [152..153]
 r773: [148..149]
 r774: [38..39]
 r775: [36..37]
 r776: [30..31]
 r777: [144..145]
 r778: [140..141]
 r779: [136..137]
 r780: [130..131]
 r781: [126..127]
 r782: [122..123]
 r783: [114..115]
 r784: [110..111]
 r785: [106..107]
 r786: [94..95]
 r787: [90..91]
 r788: [86..87]
 r789: [78..79]
 r790: [74..75]
 r791: [70..71]
 r792: [60..61]
 r793: [56..57]
 r794: [52..53]
 r795: [4..5]
 r797: [1156..1157]
 r798: [946..947]
 r799: [936..937]
 r800: [922..923]
 r801: [912..913]
 r802: [904..905]
 r803: [850..851]
 r804: [832..833]
 r805: [16..17]
 r806: [696..697]
 r807: [746..747]
 r808: [668..669]
 r809: [654..655]
 r810: [648..649]
 r811: [628..629]
 r812: [572..573]
 r813: [586..587]
 r814: [412..413]
 r815: [562..563]
 r816: [546..547]
 r817: [530..531]
 r818: [398..399]
 r819: [392..393]
 r820: [378..379]
 r821: [362..363]
 r822: [308..309]
 r823: [254..255]
 r824: [240..241]
 r825: [194..195]
 r826: [172..173]
 r827: [150..151]
 r828: [32..33]

********** Assignment #1: **********

	 Assigning to 797 (cl=GENERAL_REGS, orig=93, freq=3, tfirst=797, tfreq=3)...
	   Assign 0 to reload r797 (freq=3)
	 Assigning to 798 (cl=GENERAL_REGS, orig=169, freq=3, tfirst=798, tfreq=3)...
	   Assign 0 to reload r798 (freq=3)
	 Assigning to 799 (cl=GENERAL_REGS, orig=173, freq=3, tfirst=799, tfreq=3)...
	   Assign 0 to reload r799 (freq=3)
	 Assigning to 800 (cl=GENERAL_REGS, orig=177, freq=3, tfirst=800, tfreq=3)...
	   Assign 0 to reload r800 (freq=3)
	 Assigning to 801 (cl=GENERAL_REGS, orig=181, freq=3, tfirst=801, tfreq=3)...
	   Assign 0 to reload r801 (freq=3)
	 Assigning to 802 (cl=GENERAL_REGS, orig=184, freq=3, tfirst=802, tfreq=3)...
	   Assign 2 to reload r802 (freq=3)
	 Assigning to 803 (cl=GENERAL_REGS, orig=208, freq=3, tfirst=803, tfreq=3)...
	   Assign 0 to reload r803 (freq=3)
	 Assigning to 804 (cl=GENERAL_REGS, orig=214, freq=3, tfirst=804, tfreq=3)...
	   Assign 0 to reload r804 (freq=3)
	 Assigning to 805 (cl=GENERAL_REGS, orig=220, freq=3, tfirst=805, tfreq=3)...
	   Assign 0 to reload r805 (freq=3)
	 Assigning to 806 (cl=GENERAL_REGS, orig=651, freq=3, tfirst=806, tfreq=3)...
	   Assign 2 to reload r806 (freq=3)
	 Assigning to 807 (cl=GENERAL_REGS, orig=665, freq=3, tfirst=807, tfreq=3)...
	   Assign 2 to reload r807 (freq=3)
	 Assigning to 808 (cl=GENERAL_REGS, orig=266, freq=3, tfirst=808, tfreq=3)...
	   Assign 0 to reload r808 (freq=3)
	 Assigning to 809 (cl=GENERAL_REGS, orig=272, freq=3, tfirst=809, tfreq=3)...
	   Assign 0 to reload r809 (freq=3)
	 Assigning to 810 (cl=GENERAL_REGS, orig=675, freq=3, tfirst=810, tfreq=3)...
	   Assign 2 to reload r810 (freq=3)
	 Assigning to 811 (cl=GENERAL_REGS, orig=280, freq=3, tfirst=811, tfreq=3)...
	   Assign 2 to reload r811 (freq=3)
	 Assigning to 812 (cl=GENERAL_REGS, orig=684, freq=3, tfirst=812, tfreq=3)...
	   Assign 0 to reload r812 (freq=3)
	 Assigning to 813 (cl=GENERAL_REGS, orig=287, freq=3, tfirst=813, tfreq=3)...
	   Assign 2 to reload r813 (freq=3)
	 Assigning to 814 (cl=GENERAL_REGS, orig=305, freq=3, tfirst=814, tfreq=3)...
	   Assign 2 to reload r814 (freq=3)
	 Assigning to 815 (cl=GENERAL_REGS, orig=310, freq=3, tfirst=815, tfreq=3)...
	   Assign 0 to reload r815 (freq=3)
	 Assigning to 816 (cl=GENERAL_REGS, orig=324, freq=3, tfirst=816, tfreq=3)...
	   Assign 0 to reload r816 (freq=3)
	 Assigning to 817 (cl=GENERAL_REGS, orig=346, freq=3, tfirst=817, tfreq=3)...
	   Assign 0 to reload r817 (freq=3)
	 Assigning to 818 (cl=GENERAL_REGS, orig=376, freq=3, tfirst=818, tfreq=3)...
	   Assign 0 to reload r818 (freq=3)
	 Assigning to 819 (cl=GENERAL_REGS, orig=725, freq=3, tfirst=819, tfreq=3)...
	   Assign 1 to reload r819 (freq=3)
	 Assigning to 820 (cl=GENERAL_REGS, orig=381, freq=3, tfirst=820, tfreq=3)...
	   Assign 0 to reload r820 (freq=3)
	 Assigning to 821 (cl=GENERAL_REGS, orig=387, freq=3, tfirst=821, tfreq=3)...
	   Assign 0 to reload r821 (freq=3)
	 Assigning to 822 (cl=GENERAL_REGS, orig=410, freq=3, tfirst=822, tfreq=3)...
	   Assign 0 to reload r822 (freq=3)
	 Assigning to 823 (cl=GENERAL_REGS, orig=417, freq=3, tfirst=823, tfreq=3)...
	   Assign 2 to reload r823 (freq=3)
	 Assigning to 824 (cl=GENERAL_REGS, orig=437, freq=3, tfirst=824, tfreq=3)...
	   Assign 0 to reload r824 (freq=3)
	 Assigning to 825 (cl=GENERAL_REGS, orig=444, freq=3, tfirst=825, tfreq=3)...
	   Assign 2 to reload r825 (freq=3)
	 Assigning to 826 (cl=GENERAL_REGS, orig=463, freq=3, tfirst=826, tfreq=3)...
	   Assign 0 to reload r826 (freq=3)
	 Assigning to 828 (cl=GENERAL_REGS, orig=476, freq=3, tfirst=828, tfreq=3)...
	   Assign 2 to reload r828 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 4):	 827
Changing spilled pseudos to memory in insn #1073
Changing spilled pseudos to memory in insn #1312
	   Spilling non-eliminable hard regs: 6

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 7 for insn #1312
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 1312:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=4,overall=6,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 1073:  (0) ?m  (1) rF {*movsf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=176, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=144, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 35
changing reg in insn 33
changing reg in insn 31
changing reg in insn 35
changing reg in insn 33
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 65
changing reg in insn 65
changing reg in insn 65
changing reg in insn 73
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 78
changing reg in insn 86
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 85
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 89
changing reg in insn 91
changing reg in insn 91
changing reg in insn 91
changing reg in insn 99
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 98
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 104
changing reg in insn 104
changing reg in insn 112
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 117
changing reg in insn 117
changing reg in insn 117
changing reg in insn 125
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 130
changing reg in insn 130
changing reg in insn 138
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 154
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 167
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 167
changing reg in insn 169
changing reg in insn 177
changing reg in insn 179
changing reg in insn 181
changing reg in insn 182
changing reg in insn 186
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 201
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 210
changing reg in insn 212
changing reg in insn 214
changing reg in insn 215
changing reg in insn 225
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 239
changing reg in insn 241
changing reg in insn 243
changing reg in insn 244
changing reg in insn 253
changing reg in insn 255
changing reg in insn 257
changing reg in insn 258
changing reg in insn 269
changing reg in insn 271
changing reg in insn 273
changing reg in insn 274
changing reg in insn 284
changing reg in insn 286
changing reg in insn 288
changing reg in insn 289
changing reg in insn 298
changing reg in insn 301
changing reg in insn 301
changing reg in insn 302
changing reg in insn 302
changing reg in insn 304
changing reg in insn 307
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 312
changing reg in insn 315
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 318
changing reg in insn 321
changing reg in insn 321
changing reg in insn 322
changing reg in insn 322
changing reg in insn 323
changing reg in insn 325
changing reg in insn 328
changing reg in insn 326
changing reg in insn 328
changing reg in insn 331
changing reg in insn 333
changing reg in insn 333
changing reg in insn 334
changing reg in insn 334
changing reg in insn 335
changing reg in insn 335
changing reg in insn 339
changing reg in insn 342
changing reg in insn 340
changing reg in insn 342
changing reg in insn 345
changing reg in insn 347
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 358
changing reg in insn 359
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 361
changing reg in insn 392
changing reg in insn 393
changing reg in insn 397
changing reg in insn 398
changing reg in insn 398
changing reg in insn 399
changing reg in insn 404
changing reg in insn 405
changing reg in insn 405
changing reg in insn 406
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 436
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 441
changing reg in insn 441
changing reg in insn 442
changing reg in insn 442
changing reg in insn 443
changing reg in insn 448
changing reg in insn 451
changing reg in insn 451
changing reg in insn 452
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 454
changing reg in insn 454
changing reg in insn 455
changing reg in insn 483
changing reg in insn 486
changing reg in insn 486
changing reg in insn 487
changing reg in insn 487
changing reg in insn 488
changing reg in insn 498
changing reg in insn 500
changing reg in insn 500
changing reg in insn 500
changing reg in insn 504
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 504
changing reg in insn 504
changing reg in insn 512
changing reg in insn 506
changing reg in insn 507
changing reg in insn 507
changing reg in insn 509
changing reg in insn 509
changing reg in insn 510
changing reg in insn 510
changing reg in insn 513
changing reg in insn 516
changing reg in insn 519
changing reg in insn 517
changing reg in insn 519
changing reg in insn 522
changing reg in insn 524
changing reg in insn 524
changing reg in insn 525
changing reg in insn 525
changing reg in insn 527
changing reg in insn 530
changing reg in insn 528
changing reg in insn 530
changing reg in insn 533
changing reg in insn 535
changing reg in insn 535
changing reg in insn 536
changing reg in insn 536
changing reg in insn 537
changing reg in insn 545
changing reg in insn 549
changing reg in insn 547
changing reg in insn 548
changing reg in insn 548
changing reg in insn 549
changing reg in insn 549
changing reg in insn 557
changing reg in insn 551
changing reg in insn 552
changing reg in insn 552
changing reg in insn 554
changing reg in insn 554
changing reg in insn 555
changing reg in insn 555
changing reg in insn 558
changing reg in insn 561
changing reg in insn 564
changing reg in insn 562
changing reg in insn 564
changing reg in insn 567
changing reg in insn 569
changing reg in insn 569
changing reg in insn 570
changing reg in insn 570
changing reg in insn 572
changing reg in insn 575
changing reg in insn 573
changing reg in insn 575
changing reg in insn 578
changing reg in insn 580
changing reg in insn 580
changing reg in insn 581
changing reg in insn 581
changing reg in insn 582
changing reg in insn 593
changing reg in insn 594
changing reg in insn 594
changing reg in insn 596
changing reg in insn 596
changing reg in insn 597
changing reg in insn 597
changing reg in insn 598
changing reg in insn 600
changing reg in insn 601
changing reg in insn 609
changing reg in insn 610
changing reg in insn 610
changing reg in insn 612
changing reg in insn 612
changing reg in insn 613
changing reg in insn 613
changing reg in insn 634
changing reg in insn 615
changing reg in insn 618
changing reg in insn 618
changing reg in insn 619
changing reg in insn 619
changing reg in insn 620
changing reg in insn 620
changing reg in insn 621
changing reg in insn 621
changing reg in insn 635
changing reg in insn 623
changing reg in insn 626
changing reg in insn 626
changing reg in insn 627
changing reg in insn 627
changing reg in insn 631
changing reg in insn 632
changing reg in insn 632
changing reg in insn 636
changing reg in insn 639
changing reg in insn 644
changing reg in insn 652
changing reg in insn 646
changing reg in insn 649
changing reg in insn 649
changing reg in insn 650
changing reg in insn 650
changing reg in insn 651
changing reg in insn 651
changing reg in insn 652
changing reg in insn 659
changing reg in insn 660
changing reg in insn 670
changing reg in insn 678
changing reg in insn 672
changing reg in insn 675
changing reg in insn 675
changing reg in insn 676
changing reg in insn 676
changing reg in insn 677
changing reg in insn 677
changing reg in insn 678
changing reg in insn 685
changing reg in insn 686
changing reg in insn 686
changing reg in insn 688
changing reg in insn 688
changing reg in insn 689
changing reg in insn 689
changing reg in insn 691
changing reg in insn 692
changing reg in insn 692
changing reg in insn 693
changing reg in insn 701
changing reg in insn 695
changing reg in insn 696
changing reg in insn 696
changing reg in insn 698
changing reg in insn 698
changing reg in insn 699
changing reg in insn 699
changing reg in insn 700
changing reg in insn 700
changing reg in insn 701
changing reg in insn 716
changing reg in insn 724
changing reg in insn 718
changing reg in insn 721
changing reg in insn 721
changing reg in insn 722
changing reg in insn 722
changing reg in insn 723
changing reg in insn 723
changing reg in insn 724
changing reg in insn 728
changing reg in insn 731
changing reg in insn 731
changing reg in insn 732
changing reg in insn 732
changing reg in insn 733
changing reg in insn 733
changing reg in insn 734
changing reg in insn 734
changing reg in insn 735
changing reg in insn 738
changing reg in insn 749
changing reg in insn 740
changing reg in insn 741
changing reg in insn 741
changing reg in insn 743
changing reg in insn 743
changing reg in insn 744
changing reg in insn 744
changing reg in insn 748
changing reg in insn 746
changing reg in insn 747
changing reg in insn 747
changing reg in insn 748
changing reg in insn 748
changing reg in insn 750
changing reg in insn 757
changing reg in insn 760
changing reg in insn 760
changing reg in insn 761
changing reg in insn 761
changing reg in insn 762
changing reg in insn 762
changing reg in insn 763
changing reg in insn 763
changing reg in insn 764
changing reg in insn 767
changing reg in insn 773
changing reg in insn 769
changing reg in insn 770
changing reg in insn 770
changing reg in insn 772
changing reg in insn 772
changing reg in insn 774
changing reg in insn 777
changing reg in insn 778
changing reg in insn 778
changing reg in insn 780
changing reg in insn 780
changing reg in insn 781
changing reg in insn 781
changing reg in insn 783
changing reg in insn 784
changing reg in insn 784
changing reg in insn 785
changing reg in insn 793
changing reg in insn 787
changing reg in insn 788
changing reg in insn 788
changing reg in insn 790
changing reg in insn 790
changing reg in insn 791
changing reg in insn 791
changing reg in insn 792
changing reg in insn 792
changing reg in insn 793
changing reg in insn 799
changing reg in insn 802
changing reg in insn 802
changing reg in insn 803
changing reg in insn 803
changing reg in insn 804
changing reg in insn 804
changing reg in insn 805
changing reg in insn 805
changing reg in insn 806
changing reg in insn 809
changing reg in insn 815
changing reg in insn 811
changing reg in insn 812
changing reg in insn 812
changing reg in insn 814
changing reg in insn 814
changing reg in insn 816
changing reg in insn 819
changing reg in insn 820
changing reg in insn 820
changing reg in insn 822
changing reg in insn 822
changing reg in insn 823
changing reg in insn 823
changing reg in insn 825
changing reg in insn 826
changing reg in insn 826
changing reg in insn 827
changing reg in insn 835
changing reg in insn 829
changing reg in insn 830
changing reg in insn 830
changing reg in insn 832
changing reg in insn 832
changing reg in insn 833
changing reg in insn 833
changing reg in insn 834
changing reg in insn 834
changing reg in insn 835
changing reg in insn 840
changing reg in insn 851
changing reg in insn 842
changing reg in insn 843
changing reg in insn 843
changing reg in insn 845
changing reg in insn 845
changing reg in insn 846
changing reg in insn 846
changing reg in insn 850
changing reg in insn 848
changing reg in insn 849
changing reg in insn 849
changing reg in insn 850
changing reg in insn 850
changing reg in insn 852
changing reg in insn 863
changing reg in insn 866
changing reg in insn 866
changing reg in insn 867
changing reg in insn 867
changing reg in insn 871
changing reg in insn 872
changing reg in insn 877
changing reg in insn 880
changing reg in insn 880
changing reg in insn 881
changing reg in insn 881
changing reg in insn 882
changing reg in insn 882
changing reg in insn 883
changing reg in insn 883
changing reg in insn 884
changing reg in insn 888
changing reg in insn 891
changing reg in insn 891
changing reg in insn 892
changing reg in insn 892
changing reg in insn 893
changing reg in insn 894
changing reg in insn 894
changing reg in insn 895
changing reg in insn 895
changing reg in insn 896
changing reg in insn 902
changing reg in insn 903
changing reg in insn 903
changing reg in insn 905
changing reg in insn 905
changing reg in insn 906
changing reg in insn 906
changing reg in insn 910
changing reg in insn 908
changing reg in insn 909
changing reg in insn 909
changing reg in insn 910
changing reg in insn 910
changing reg in insn 924
changing reg in insn 912
changing reg in insn 913
changing reg in insn 913
changing reg in insn 915
changing reg in insn 915
changing reg in insn 916
changing reg in insn 916
changing reg in insn 920
changing reg in insn 918
changing reg in insn 919
changing reg in insn 919
changing reg in insn 920
changing reg in insn 920
changing reg in insn 921
changing reg in insn 921
changing reg in insn 922
changing reg in insn 923
changing reg in insn 924
changing reg in insn 932
changing reg in insn 935
changing reg in insn 935
changing reg in insn 936
changing reg in insn 936
changing reg in insn 937
changing reg in insn 937
changing reg in insn 938
changing reg in insn 938
changing reg in insn 939
changing reg in insn 945
changing reg in insn 953
changing reg in insn 947
changing reg in insn 950
changing reg in insn 950
changing reg in insn 951
changing reg in insn 951
changing reg in insn 952
changing reg in insn 952
changing reg in insn 953
changing reg in insn 957
changing reg in insn 958
changing reg in insn 958
changing reg in insn 960
changing reg in insn 960
changing reg in insn 961
changing reg in insn 961
changing reg in insn 965
changing reg in insn 963
changing reg in insn 964
changing reg in insn 964
changing reg in insn 965
changing reg in insn 965
changing reg in insn 966
changing reg in insn 966
changing reg in insn 967
changing reg in insn 970
changing reg in insn 971
changing reg in insn 971
changing reg in insn 973
changing reg in insn 973
changing reg in insn 974
changing reg in insn 974
changing reg in insn 978
changing reg in insn 976
changing reg in insn 977
changing reg in insn 977
changing reg in insn 978
changing reg in insn 978
changing reg in insn 980
changing reg in insn 988
changing reg in insn 991
changing reg in insn 991
changing reg in insn 992
changing reg in insn 992
changing reg in insn 993
changing reg in insn 993
changing reg in insn 994
changing reg in insn 994
changing reg in insn 995
changing reg in insn 1001
changing reg in insn 1009
changing reg in insn 1003
changing reg in insn 1006
changing reg in insn 1006
changing reg in insn 1007
changing reg in insn 1007
changing reg in insn 1008
changing reg in insn 1008
changing reg in insn 1009
changing reg in insn 1013
changing reg in insn 1014
changing reg in insn 1014
changing reg in insn 1016
changing reg in insn 1016
changing reg in insn 1017
changing reg in insn 1017
changing reg in insn 1018
changing reg in insn 1021
changing reg in insn 1022
changing reg in insn 1022
changing reg in insn 1024
changing reg in insn 1024
changing reg in insn 1025
changing reg in insn 1025
changing reg in insn 1029
changing reg in insn 1027
changing reg in insn 1028
changing reg in insn 1028
changing reg in insn 1029
changing reg in insn 1029
changing reg in insn 1031
changing reg in insn 1042
changing reg in insn 1045
changing reg in insn 1044
changing reg in insn 1046
changing reg in insn 1051
changing reg in insn 1069
changing reg in insn 1053
changing reg in insn 1056
changing reg in insn 1056
changing reg in insn 1057
changing reg in insn 1057
changing reg in insn 1058
changing reg in insn 1059
changing reg in insn 1059
changing reg in insn 1060
changing reg in insn 1060
changing reg in insn 1072
changing reg in insn 1062
changing reg in insn 1063
changing reg in insn 1063
changing reg in insn 1065
changing reg in insn 1065
changing reg in insn 1066
changing reg in insn 1066
changing reg in insn 1073
changing reg in insn 1078
changing reg in insn 1079
changing reg in insn 1086
changing reg in insn 1094
changing reg in insn 1088
changing reg in insn 1091
changing reg in insn 1091
changing reg in insn 1092
changing reg in insn 1092
changing reg in insn 1093
changing reg in insn 1093
changing reg in insn 1094
changing reg in insn 1098
changing reg in insn 1099
changing reg in insn 1099
changing reg in insn 1101
changing reg in insn 1101
changing reg in insn 1102
changing reg in insn 1102
changing reg in insn 1106
changing reg in insn 1104
changing reg in insn 1105
changing reg in insn 1105
changing reg in insn 1106
changing reg in insn 1106
changing reg in insn 1130
changing reg in insn 1108
changing reg in insn 1109
changing reg in insn 1109
changing reg in insn 1111
changing reg in insn 1111
changing reg in insn 1112
changing reg in insn 1112
changing reg in insn 1116
changing reg in insn 1114
changing reg in insn 1115
changing reg in insn 1115
changing reg in insn 1116
changing reg in insn 1116
changing reg in insn 1117
changing reg in insn 1117
changing reg in insn 1119
changing reg in insn 1120
changing reg in insn 1120
changing reg in insn 1122
changing reg in insn 1122
changing reg in insn 1123
changing reg in insn 1123
changing reg in insn 1127
changing reg in insn 1125
changing reg in insn 1126
changing reg in insn 1126
changing reg in insn 1127
changing reg in insn 1127
changing reg in insn 1128
changing reg in insn 1128
changing reg in insn 1129
changing reg in insn 1130
changing reg in insn 1132
changing reg in insn 1133
changing reg in insn 1133
changing reg in insn 1135
changing reg in insn 1135
changing reg in insn 1136
changing reg in insn 1136
changing reg in insn 1141
changing reg in insn 1138
changing reg in insn 1139
changing reg in insn 1139
changing reg in insn 1140
changing reg in insn 1140
changing reg in insn 1141
changing reg in insn 1141
changing reg in insn 1167
changing reg in insn 1143
changing reg in insn 1144
changing reg in insn 1144
changing reg in insn 1146
changing reg in insn 1146
changing reg in insn 1147
changing reg in insn 1147
changing reg in insn 1152
changing reg in insn 1149
changing reg in insn 1150
changing reg in insn 1150
changing reg in insn 1151
changing reg in insn 1151
changing reg in insn 1152
changing reg in insn 1152
changing reg in insn 1153
changing reg in insn 1153
changing reg in insn 1155
changing reg in insn 1156
changing reg in insn 1156
changing reg in insn 1158
changing reg in insn 1158
changing reg in insn 1159
changing reg in insn 1159
changing reg in insn 1164
changing reg in insn 1161
changing reg in insn 1162
changing reg in insn 1162
changing reg in insn 1163
changing reg in insn 1163
changing reg in insn 1164
changing reg in insn 1164
changing reg in insn 1165
changing reg in insn 1165
changing reg in insn 1166
changing reg in insn 1167
changing reg in insn 1197
changing reg in insn 1200
changing reg in insn 1200
changing reg in insn 1204
changing reg in insn 8
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 32
changing reg in insn 31
changing reg in insn 38
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 123
changing reg in insn 124
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 136
changing reg in insn 137
changing reg in insn 141
changing reg in insn 142
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 151
changing reg in insn 152
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 160
changing reg in insn 163
changing reg in insn 164
changing reg in insn 168
changing reg in insn 169
changing reg in insn 176
changing reg in insn 177
changing reg in insn 185
changing reg in insn 186
changing reg in insn 200
changing reg in insn 201
changing reg in insn 209
changing reg in insn 210
changing reg in insn 224
changing reg in insn 225
changing reg in insn 238
changing reg in insn 239
changing reg in insn 252
changing reg in insn 253
changing reg in insn 268
changing reg in insn 269
changing reg in insn 283
changing reg in insn 284
changing reg in insn 297
changing reg in insn 298
changing reg in insn 300
changing reg in insn 303
changing reg in insn 304
changing reg in insn 306
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 314
changing reg in insn 317
changing reg in insn 318
changing reg in insn 320
changing reg in insn 324
changing reg in insn 325
changing reg in insn 330
changing reg in insn 328
changing reg in insn 327
changing reg in insn 326
changing reg in insn 331
changing reg in insn 329
changing reg in insn 328
changing reg in insn 327
changing reg in insn 329
changing reg in insn 330
changing reg in insn 332
changing reg in insn 336
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 344
changing reg in insn 342
changing reg in insn 341
changing reg in insn 340
changing reg in insn 345
changing reg in insn 343
changing reg in insn 342
changing reg in insn 341
changing reg in insn 343
changing reg in insn 344
changing reg in insn 346
changing reg in insn 350
changing reg in insn 357
changing reg in insn 358
changing reg in insn 363
changing reg in insn 364
changing reg in insn 365
changing reg in insn 373
changing reg in insn 366
changing reg in insn 374
changing reg in insn 367
changing reg in insn 375
changing reg in insn 368
changing reg in insn 376
changing reg in insn 369
changing reg in insn 378
changing reg in insn 371
changing reg in insn 372
changing reg in insn 391
changing reg in insn 392
changing reg in insn 396
changing reg in insn 397
changing reg in insn 403
changing reg in insn 404
changing reg in insn 410
changing reg in insn 411
changing reg in insn 412
changing reg in insn 420
changing reg in insn 413
changing reg in insn 421
changing reg in insn 414
changing reg in insn 422
changing reg in insn 415
changing reg in insn 423
changing reg in insn 416
changing reg in insn 425
changing reg in insn 418
changing reg in insn 419
changing reg in insn 435
changing reg in insn 436
changing reg in insn 438
changing reg in insn 445
changing reg in insn 446
changing reg in insn 447
changing reg in insn 448
changing reg in insn 450
changing reg in insn 457
changing reg in insn 458
changing reg in insn 459
changing reg in insn 467
changing reg in insn 460
changing reg in insn 468
changing reg in insn 461
changing reg in insn 469
changing reg in insn 462
changing reg in insn 470
changing reg in insn 463
changing reg in insn 472
changing reg in insn 465
changing reg in insn 466
changing reg in insn 482
changing reg in insn 483
changing reg in insn 485
changing reg in insn 496
changing reg in insn 498
changing reg in insn 497
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 501
changing reg in insn 502
changing reg in insn 505
changing reg in insn 506
changing reg in insn 508
changing reg in insn 515
changing reg in insn 516
changing reg in insn 521
changing reg in insn 519
changing reg in insn 518
changing reg in insn 517
changing reg in insn 522
changing reg in insn 520
changing reg in insn 519
changing reg in insn 518
changing reg in insn 520
changing reg in insn 521
changing reg in insn 523
changing reg in insn 526
changing reg in insn 527
changing reg in insn 532
changing reg in insn 530
changing reg in insn 529
changing reg in insn 528
changing reg in insn 533
changing reg in insn 531
changing reg in insn 530
changing reg in insn 529
changing reg in insn 531
changing reg in insn 532
changing reg in insn 534
changing reg in insn 538
changing reg in insn 543
changing reg in insn 545
changing reg in insn 544
changing reg in insn 545
changing reg in insn 546
changing reg in insn 547
changing reg in insn 550
changing reg in insn 551
changing reg in insn 553
changing reg in insn 560
changing reg in insn 561
changing reg in insn 566
changing reg in insn 564
changing reg in insn 563
changing reg in insn 562
changing reg in insn 567
changing reg in insn 565
changing reg in insn 564
changing reg in insn 563
changing reg in insn 565
changing reg in insn 566
changing reg in insn 568
changing reg in insn 571
changing reg in insn 572
changing reg in insn 577
changing reg in insn 575
changing reg in insn 574
changing reg in insn 573
changing reg in insn 578
changing reg in insn 576
changing reg in insn 575
changing reg in insn 574
changing reg in insn 576
changing reg in insn 577
changing reg in insn 579
changing reg in insn 583
changing reg in insn 588
changing reg in insn 589
changing reg in insn 592
changing reg in insn 593
changing reg in insn 595
changing reg in insn 608
changing reg in insn 609
changing reg in insn 611
changing reg in insn 614
changing reg in insn 615
changing reg in insn 617
changing reg in insn 622
changing reg in insn 623
changing reg in insn 625
changing reg in insn 629
changing reg in insn 630
changing reg in insn 630
changing reg in insn 631
changing reg in insn 633
changing reg in insn 637
changing reg in insn 643
changing reg in insn 644
changing reg in insn 645
changing reg in insn 646
changing reg in insn 648
changing reg in insn 656
changing reg in insn 655
changing reg in insn 656
changing reg in insn 659
changing reg in insn 658
changing reg in insn 669
changing reg in insn 670
changing reg in insn 671
changing reg in insn 672
changing reg in insn 674
changing reg in insn 684
changing reg in insn 685
changing reg in insn 687
changing reg in insn 690
changing reg in insn 691
changing reg in insn 694
changing reg in insn 695
changing reg in insn 697
changing reg in insn 715
changing reg in insn 716
changing reg in insn 717
changing reg in insn 718
changing reg in insn 720
changing reg in insn 727
changing reg in insn 728
changing reg in insn 730
changing reg in insn 739
changing reg in insn 740
changing reg in insn 742
changing reg in insn 745
changing reg in insn 746
changing reg in insn 756
changing reg in insn 757
changing reg in insn 759
changing reg in insn 768
changing reg in insn 769
changing reg in insn 771
changing reg in insn 776
changing reg in insn 777
changing reg in insn 779
changing reg in insn 782
changing reg in insn 783
changing reg in insn 786
changing reg in insn 787
changing reg in insn 789
changing reg in insn 798
changing reg in insn 799
changing reg in insn 801
changing reg in insn 810
changing reg in insn 811
changing reg in insn 813
changing reg in insn 818
changing reg in insn 819
changing reg in insn 821
changing reg in insn 824
changing reg in insn 825
changing reg in insn 828
changing reg in insn 829
changing reg in insn 831
changing reg in insn 841
changing reg in insn 842
changing reg in insn 844
changing reg in insn 847
changing reg in insn 848
changing reg in insn 862
changing reg in insn 863
changing reg in insn 865
changing reg in insn 869
changing reg in insn 870
changing reg in insn 870
changing reg in insn 871
changing reg in insn 876
changing reg in insn 877
changing reg in insn 879
changing reg in insn 887
changing reg in insn 888
changing reg in insn 890
changing reg in insn 901
changing reg in insn 902
changing reg in insn 904
changing reg in insn 907
changing reg in insn 908
changing reg in insn 911
changing reg in insn 912
changing reg in insn 914
changing reg in insn 917
changing reg in insn 918
changing reg in insn 922
changing reg in insn 923
changing reg in insn 931
changing reg in insn 932
changing reg in insn 934
changing reg in insn 944
changing reg in insn 945
changing reg in insn 946
changing reg in insn 947
changing reg in insn 949
changing reg in insn 956
changing reg in insn 957
changing reg in insn 959
changing reg in insn 962
changing reg in insn 963
changing reg in insn 967
changing reg in insn 968
changing reg in insn 969
changing reg in insn 970
changing reg in insn 972
changing reg in insn 975
changing reg in insn 976
changing reg in insn 979
changing reg in insn 980
changing reg in insn 987
changing reg in insn 988
changing reg in insn 990
changing reg in insn 1000
changing reg in insn 1001
changing reg in insn 1002
changing reg in insn 1003
changing reg in insn 1005
changing reg in insn 1012
changing reg in insn 1013
changing reg in insn 1015
changing reg in insn 1018
changing reg in insn 1019
changing reg in insn 1020
changing reg in insn 1021
changing reg in insn 1023
changing reg in insn 1026
changing reg in insn 1027
changing reg in insn 1030
changing reg in insn 1031
changing reg in insn 1041
changing reg in insn 1042
changing reg in insn 1043
changing reg in insn 1044
changing reg in insn 1050
changing reg in insn 1051
changing reg in insn 1052
changing reg in insn 1053
changing reg in insn 1055
changing reg in insn 1061
changing reg in insn 1062
changing reg in insn 1064
changing reg in insn 1067
changing reg in insn 1070
changing reg in insn 1068
changing reg in insn 1071
changing reg in insn 1077
changing reg in insn 1078
changing reg in insn 1085
changing reg in insn 1086
changing reg in insn 1087
changing reg in insn 1088
changing reg in insn 1090
changing reg in insn 1097
changing reg in insn 1098
changing reg in insn 1100
changing reg in insn 1103
changing reg in insn 1104
changing reg in insn 1107
changing reg in insn 1108
changing reg in insn 1110
changing reg in insn 1113
changing reg in insn 1114
changing reg in insn 1118
changing reg in insn 1119
changing reg in insn 1121
changing reg in insn 1124
changing reg in insn 1125
changing reg in insn 1131
changing reg in insn 1132
changing reg in insn 1134
changing reg in insn 1137
changing reg in insn 1138
changing reg in insn 1142
changing reg in insn 1143
changing reg in insn 1145
changing reg in insn 1148
changing reg in insn 1149
changing reg in insn 1154
changing reg in insn 1155
changing reg in insn 1157
changing reg in insn 1160
changing reg in insn 1161
changing reg in insn 1194
changing reg in insn 1195
deleting insn with uid = 1263.
deleting insn with uid = 375.
deleting insn with uid = 376.
deleting insn with uid = 422.
deleting insn with uid = 423.
deleting insn with uid = 469.
deleting insn with uid = 470.
deleting insn with uid = 1270.
deleting insn with uid = 1272.
deleting insn with uid = 1279.
deleting insn with uid = 636.
deleting insn with uid = 1281.
deleting insn with uid = 1285.
deleting insn with uid = 1287.
deleting insn with uid = 1297.
deleting insn with uid = 1305.
deleting insn with uid = 1309.
deleting insn with uid = 1045.
deleting insn with uid = 1069.
deleting insn with uid = 1070.
deleting insn with uid = 1071.
deleting insn with uid = 1072.
deleting insn with uid = 1314.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 180.
verify found no changes in insn with uid = 189.
verify found no changes in insn with uid = 204.
verify found no changes in insn with uid = 213.
verify found no changes in insn with uid = 228.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 256.
verify found no changes in insn with uid = 262.
verify found no changes in insn with uid = 272.
verify found no changes in insn with uid = 278.
verify found no changes in insn with uid = 287.
verify found no changes in insn with uid = 294.
verify found no changes in insn with uid = 362.
verify found no changes in insn with uid = 379.
verify found no changes in insn with uid = 383.
verify found no changes in insn with uid = 409.
verify found no changes in insn with uid = 426.
verify found no changes in insn with uid = 430.
verify found no changes in insn with uid = 444.
verify found no changes in insn with uid = 456.
verify found no changes in insn with uid = 473.
verify found no changes in insn with uid = 477.
verify found no changes in insn with uid = 495.
verify found no changes in insn with uid = 514.
verify found no changes in insn with uid = 559.
verify found no changes in insn with uid = 599.
verify found no changes in insn with uid = 604.
verify found no changes in insn with uid = 638.
verify found no changes in insn with uid = 662.
verify found no changes in insn with uid = 751.
verify found no changes in insn with uid = 775.
verify found no changes in insn with uid = 817.
verify found no changes in insn with uid = 853.
verify found no changes in insn with uid = 875.
verify found no changes in insn with uid = 1049.
verify found no changes in insn with uid = 1074.
verify found no changes in insn with uid = 1082.
verify found no changes in insn with uid = 1196.


int read_data(int*, Preprocess*, IOFiles*, Data_file_header*, Data_block_header*, Precision2*, FILE**, Procpar_info*, Precision1*, float**, float**, int, InFile_struct*, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={558d,537u} r1={234d,197u,59e} r2={106d,61u,18e} r3={6d,6u} r4={74d,29u} r5={95d,50u} r6={1d,392u} r7={10d,138u} r8={45d} r9={45d} r10={45d} r11={45d} r12={45d} r13={45d} r14={45d} r15={45d} r16={40e} r17={348d,36u} r18={45d} r19={45d} r20={1d,1u,48e} r21={58d,12u} r22={48d,2u} r23={46d} r24={46d} r25={46d} r26={46d} r27={46d} r28={46d} r29={45d} r30={45d} r31={45d} r32={45d} r33={45d} r34={45d} r35={45d} r36={45d} r37={52d,7u} r38={49d,4u} r39={45d} r40={45d} r45={45d} r46={45d} r47={45d} r48={45d} r49={45d} r50={45d} r51={45d} r52={45d} r53={45d} r54={45d} r55={45d} r56={45d} r57={45d} r58={45d} r59={45d} r60={45d} r61={45d} r62={45d} r63={45d} r64={45d} r65={45d} r66={45d} r67={45d} r68={45d} r69={45d} r70={45d} r71={45d} r72={45d} r73={45d} r74={45d} r75={45d} r76={45d} r77={45d} r78={45d} r79={45d} r80={45d} 
;;    total ref usage 6073{4436d,1472u,165e} in 1093{1048 regular + 45 call} insns.
(note 1 0 11 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 533
(note 11 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 11 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 fid+0 S8 A64])
        (reg:DI 5 di [ fid ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])
        (reg:DI 4 si [ preprocess ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])
        (reg:DI 1 dx [ file ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])
        (reg:DI 2 cx [ main_header ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 block_header+0 S8 A64])
        (reg:DI 37 r8 [ block_header ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])
        (reg:DI 38 r9 [ switch_data ])) ge2fitman_fmtext_o.cpp:25 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 ax [533])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 72 [0x48])) [0 verbose+0 S4 A64])) ge2fitman_fmtext_o.cpp:25 90 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -148 [0xffffffffffffff6c])) [0 verbose+0 S1 A32])
        (reg:QI 0 ax [533])) ge2fitman_fmtext_o.cpp:25 93 {*movqi_internal}
     (nil))
(note 10 9 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 10 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:28 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:29 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:30 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 numSets+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:31 90 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 dataSizeChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:32 90 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:33 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:34 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:35 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:53 93 {*movqi_internal}
     (nil))
(insn 22 21 1189 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:63 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              77 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 534
(code_label 1189 22 23 3 45 "" [1 uses])
(note 23 1189 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg/f:DI 0 ax [534])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 fid+0 S8 A64])) ge2fitman_fmtext_o.cpp:63 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:SI 0 ax [orig:87 D.25517 ] [87])
        (mem:SI (reg/f:DI 0 ax [534]) [0 *fid_57(D)+0 S4 A32])) ge2fitman_fmtext_o.cpp:63 90 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.25517 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32]))) ge2fitman_fmtext_o.cpp:63 7 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1192)
            (pc))) ge2fitman_fmtext_o.cpp:63 612 {*jcc_1}
     (nil)
 -> 1192)
;;  succ:       78
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 91 535 536 537 538
(note 28 27 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 4 (set (reg:SI 0 ax [535])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:67 90 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:DI 1 dx [orig:88 D.25518 ] [88])
        (sign_extend:DI (reg:SI 0 ax [535]))) ge2fitman_fmtext_o.cpp:67 142 {*extendsidi2_rex64}
     (nil))
(insn 31 30 32 4 (set (reg:DI 0 ax [536])
        (reg:DI 1 dx [orig:88 D.25518 ] [88])) ge2fitman_fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:DI 0 ax [536])
                (ashift:DI (reg:DI 0 ax [536])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 512 {*ashldi3_1}
     (nil))
(insn 33 32 34 4 (parallel [
            (set (reg:DI 0 ax [536])
                (plus:DI (reg:DI 0 ax [536])
                    (reg:DI 1 dx [orig:88 D.25518 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.25518 ] [88])
            (const_int 9 [0x9]))
        (nil)))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 0 ax [536])
                (ashift:DI (reg:DI 0 ax [536])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 512 {*ashldi3_1}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 0 ax [536])
                (plus:DI (reg:DI 0 ax [536])
                    (reg:DI 1 dx [orig:88 D.25518 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:88 D.25518 ] [88])
            (const_int 19 [0x13]))
        (nil)))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 0 ax [537])
                (ashift:DI (reg:DI 0 ax [536])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 512 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (set (reg:DI 0 ax [536])
        (reg:DI 0 ax [537])) ge2fitman_fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 1 dx [orig:89 D.25518 ] [89])
        (reg:DI 0 ax [536])) ge2fitman_fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [538])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 preprocess+0 S8 A64])) ge2fitman_fmtext_o.cpp:67 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.25519 ] [90])
                (plus:DI (reg/f:DI 0 ax [538])
                    (reg:DI 1 dx [orig:89 D.25518 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:67 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:89 D.25518 ] [89]))
        (nil)))
(insn 41 40 42 4 (set (reg:SI 0 ax [orig:91 D.25517 ] [91])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:90 D.25519 ] [90])
                (const_int 20 [0x14])) [0 _62->file_type+0 S4 A32])) ge2fitman_fmtext_o.cpp:67 90 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 D.25517 ] [91])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:67 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 43 42 44 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1186)
            (pc))) ge2fitman_fmtext_o.cpp:67 612 {*jcc_1}
     (nil)
 -> 1186)
;;  succ:       5 (FALLTHRU)
;;              77
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567
(note 44 43 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 5 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 46 45 1252 5 (set (reg:DI 0 ax [orig:92 D.25518 ] [92])
        (sign_extend:DI (reg:SI 0 ax [539]))) ge2fitman_fmtext_o.cpp:73 142 {*extendsidi2_rex64}
     (nil))
(insn 1252 46 47 5 (set (reg:DI 0 ax [orig:93 D.25518 ] [93])
        (reg:DI 0 ax [orig:92 D.25518 ] [92])) ge2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 47 1252 1253 5 (parallel [
            (set (reg:DI 0 ax [orig:93 D.25518 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:93 D.25518 ] [93])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:73 512 {*ashldi3_1}
     (nil))
(insn 1253 47 48 5 (set (reg:DI 1 dx [orig:93 D.25518 ] [93])
        (reg:DI 0 ax [orig:93 D.25518 ] [93])) ge2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 48 1253 49 5 (set (reg/f:DI 0 ax [540])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (parallel [
            (set (reg/f:DI 0 ax [orig:94 D.25520 ] [94])
                (plus:DI (reg/f:DI 0 ax [540])
                    (reg:DI 1 dx [orig:93 D.25518 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:73 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:93 D.25518 ] [93]))
        (nil)))
(insn 50 49 51 5 (set (reg:DI 0 ax [orig:95 D.25521 ] [95])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:94 D.25520 ] [94])
                (const_int 16 [0x10])) [0 _67->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:73 89 {*movdi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:SI 0 ax [orig:96 D.25517 ] [96])
        (reg:SI 0 ax [orig:95 D.25521 ] [95])) ge2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (parallel [
            (set (reg:SI 0 ax [541])
                (ashift:SI (reg:SI 0 ax [orig:96 D.25517 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:73 511 {*ashlsi3_1}
     (nil))
(insn 53 52 54 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])
        (reg:SI 0 ax [541])) ge2fitman_fmtext_o.cpp:73 90 {*movsi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:SI 0 ax [542])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:80 90 {*movsi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:DI 0 ax [orig:97 D.25518 ] [97])
        (sign_extend:DI (reg:SI 0 ax [542]))) ge2fitman_fmtext_o.cpp:80 142 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 5 (parallel [
            (set (reg:DI 0 ax [orig:98 D.25518 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.25518 ] [97])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:80 512 {*ashldi3_1}
     (nil))
(insn 57 56 58 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:98 D.25518 ] [98])) ge2fitman_fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(call_insn 58 57 59 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:80 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 59 58 60 5 (set (reg/f:DI 0 ax [543])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:80 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [543])
        (nil)))
(insn 60 59 61 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])
        (reg/f:DI 0 ax [543])) ge2fitman_fmtext_o.cpp:80 89 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:SI 0 ax [544])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:91 90 {*movsi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:DI 0 ax [orig:99 D.25518 ] [99])
        (sign_extend:DI (reg:SI 0 ax [544]))) ge2fitman_fmtext_o.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 5 (parallel [
            (set (reg:DI 1 dx [orig:100 D.25518 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:99 D.25518 ] [99])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:91 512 {*ashldi3_1}
     (nil))
(insn 64 63 65 5 (set (reg/f:DI 0 ax [545])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 40 [0x28])) [0 out_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (nil))
(insn 65 64 66 5 (parallel [
            (set (reg/f:DI 3 bx [orig:101 D.25522 ] [101])
                (plus:DI (reg:DI 1 dx [orig:100 D.25518 ] [100])
                    (reg/f:DI 0 ax [545])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:91 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [0 out_data+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.25518 ] [100]))
        (nil)))
(insn 66 65 67 5 (set (reg:SI 0 ax [546])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:91 90 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:DI 0 ax [orig:102 D.25518 ] [102])
        (sign_extend:DI (reg:SI 0 ax [546]))) ge2fitman_fmtext_o.cpp:91 142 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 5 (parallel [
            (set (reg:DI 0 ax [orig:103 D.25518 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 D.25518 ] [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:91 512 {*ashldi3_1}
     (nil))
(insn 69 68 70 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:103 D.25518 ] [103])) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (nil))
(call_insn 70 69 71 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:91 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 5 (set (reg/f:DI 0 ax [547])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [547])
        (nil)))
(insn 72 71 73 5 (set (reg/f:DI 0 ax [orig:104 D.25523 ] [104])
        (reg/f:DI 0 ax [547])) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (nil))
(insn 73 72 74 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:101 D.25522 ] [101]) [0 *_78+0 S8 A64])
        (reg/f:DI 0 ax [orig:104 D.25523 ] [104])) ge2fitman_fmtext_o.cpp:91 89 {*movdi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:SI 0 ax [548])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
(insn 75 74 76 5 (set (reg:DI 0 ax [orig:105 D.25518 ] [105])
        (sign_extend:DI (reg:SI 0 ax [548]))) ge2fitman_fmtext_o.cpp:92 142 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 5 (parallel [
            (set (reg:DI 1 dx [orig:106 D.25518 ] [106])
                (ashift:DI (reg:DI 0 ax [orig:105 D.25518 ] [105])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:92 512 {*ashldi3_1}
     (nil))
(insn 77 76 78 5 (set (reg/f:DI 0 ax [549])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 48 [0x30])) [0 scratch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (nil))
(insn 78 77 79 5 (parallel [
            (set (reg/f:DI 3 bx [orig:107 D.25522 ] [107])
                (plus:DI (reg:DI 1 dx [orig:106 D.25518 ] [106])
                    (reg/f:DI 0 ax [549])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:92 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 32 [0x20])) [0 scratch_data+0 S8 A64])
            (reg:DI 1 dx [orig:106 D.25518 ] [106]))
        (nil)))
(insn 79 78 80 5 (set (reg:SI 0 ax [550])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:92 90 {*movsi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:DI 0 ax [orig:108 D.25518 ] [108])
        (sign_extend:DI (reg:SI 0 ax [550]))) ge2fitman_fmtext_o.cpp:92 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 5 (parallel [
            (set (reg:DI 0 ax [orig:109 D.25518 ] [109])
                (ashift:DI (reg:DI 0 ax [orig:108 D.25518 ] [108])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:92 512 {*ashldi3_1}
     (nil))
(insn 82 81 83 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:109 D.25518 ] [109])) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (nil))
(call_insn 83 82 84 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:92 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 84 83 85 5 (set (reg/f:DI 0 ax [551])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [551])
        (nil)))
(insn 85 84 86 5 (set (reg/f:DI 0 ax [orig:110 D.25523 ] [110])
        (reg/f:DI 0 ax [551])) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (nil))
(insn 86 85 87 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:107 D.25522 ] [107]) [0 *_87+0 S8 A64])
        (reg/f:DI 0 ax [orig:110 D.25523 ] [110])) ge2fitman_fmtext_o.cpp:92 89 {*movdi_internal}
     (nil))
(insn 87 86 88 5 (set (reg:SI 0 ax [552])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:94 90 {*movsi_internal}
     (nil))
(insn 88 87 89 5 (set (reg:DI 0 ax [orig:111 D.25518 ] [111])
        (sign_extend:DI (reg:SI 0 ax [552]))) ge2fitman_fmtext_o.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 5 (parallel [
            (set (reg:DI 1 dx [orig:112 D.25518 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:111 D.25518 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:94 512 {*ashldi3_1}
     (nil))
(insn 90 89 91 5 (set (reg/f:DI 0 ax [553])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 91 90 92 5 (parallel [
            (set (reg/f:DI 3 bx [orig:113 D.25524 ] [113])
                (plus:DI (reg:DI 1 dx [orig:112 D.25518 ] [112])
                    (reg/f:DI 0 ax [553])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:94 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.25518 ] [112]))
        (nil)))
(insn 92 91 93 5 (set (reg:SI 0 ax [554])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:94 90 {*movsi_internal}
     (nil))
(insn 93 92 94 5 (set (reg:DI 0 ax [orig:114 D.25518 ] [114])
        (sign_extend:DI (reg:SI 0 ax [554]))) ge2fitman_fmtext_o.cpp:94 142 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 5 (parallel [
            (set (reg:DI 0 ax [orig:115 D.25518 ] [115])
                (ashift:DI (reg:DI 0 ax [orig:114 D.25518 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:94 512 {*ashldi3_1}
     (nil))
(insn 95 94 96 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:115 D.25518 ] [115])) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(call_insn 96 95 97 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:94 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 97 96 98 5 (set (reg/f:DI 0 ax [555])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [555])
        (nil)))
(insn 98 97 99 5 (set (reg/f:DI 0 ax [orig:116 D.25523 ] [116])
        (reg/f:DI 0 ax [555])) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 99 98 100 5 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:113 D.25524 ] [113]) [0 _96->fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:116 D.25523 ] [116])) ge2fitman_fmtext_o.cpp:94 89 {*movdi_internal}
     (nil))
(insn 100 99 101 5 (set (reg:SI 0 ax [556])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:95 90 {*movsi_internal}
     (nil))
(insn 101 100 102 5 (set (reg:DI 0 ax [orig:117 D.25518 ] [117])
        (sign_extend:DI (reg:SI 0 ax [556]))) ge2fitman_fmtext_o.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 5 (parallel [
            (set (reg:DI 1 dx [orig:118 D.25518 ] [118])
                (ashift:DI (reg:DI 0 ax [orig:117 D.25518 ] [117])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:95 512 {*ashldi3_1}
     (nil))
(insn 103 102 104 5 (set (reg/f:DI 0 ax [557])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (nil))
(insn 104 103 105 5 (parallel [
            (set (reg/f:DI 3 bx [orig:119 D.25525 ] [119])
                (plus:DI (reg:DI 1 dx [orig:118 D.25518 ] [118])
                    (reg/f:DI 0 ax [557])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:95 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.25518 ] [118]))
        (nil)))
(insn 105 104 106 5 (set (reg:SI 0 ax [558])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:95 90 {*movsi_internal}
     (nil))
(insn 106 105 107 5 (set (reg:DI 0 ax [orig:120 D.25518 ] [120])
        (sign_extend:DI (reg:SI 0 ax [558]))) ge2fitman_fmtext_o.cpp:95 142 {*extendsidi2_rex64}
     (nil))
(insn 107 106 108 5 (parallel [
            (set (reg:DI 0 ax [orig:121 D.25518 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:120 D.25518 ] [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:95 512 {*ashldi3_1}
     (nil))
(insn 108 107 109 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:121 D.25518 ] [121])) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (nil))
(call_insn 109 108 110 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:95 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 110 109 111 5 (set (reg/f:DI 0 ax [559])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [559])
        (nil)))
(insn 111 110 112 5 (set (reg/f:DI 0 ax [orig:122 D.25523 ] [122])
        (reg/f:DI 0 ax [559])) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (nil))
(insn 112 111 113 5 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:119 D.25525 ] [119]) [0 _105->fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:122 D.25523 ] [122])) ge2fitman_fmtext_o.cpp:95 89 {*movdi_internal}
     (nil))
(insn 113 112 114 5 (set (reg:SI 0 ax [560])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:98 90 {*movsi_internal}
     (nil))
(insn 114 113 115 5 (set (reg:DI 0 ax [orig:123 D.25518 ] [123])
        (sign_extend:DI (reg:SI 0 ax [560]))) ge2fitman_fmtext_o.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 115 114 116 5 (parallel [
            (set (reg:DI 1 dx [orig:124 D.25518 ] [124])
                (ashift:DI (reg:DI 0 ax [orig:123 D.25518 ] [123])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:98 512 {*ashldi3_1}
     (nil))
(insn 116 115 117 5 (set (reg/f:DI 0 ax [561])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (nil))
(insn 117 116 118 5 (parallel [
            (set (reg/f:DI 3 bx [orig:125 D.25524 ] [125])
                (plus:DI (reg:DI 1 dx [orig:124 D.25518 ] [124])
                    (reg/f:DI 0 ax [561])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:98 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.25518 ] [124]))
        (nil)))
(insn 118 117 119 5 (set (reg:SI 0 ax [562])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:98 90 {*movsi_internal}
     (nil))
(insn 119 118 120 5 (set (reg:DI 0 ax [orig:126 D.25518 ] [126])
        (sign_extend:DI (reg:SI 0 ax [562]))) ge2fitman_fmtext_o.cpp:98 142 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 5 (parallel [
            (set (reg:DI 0 ax [orig:127 D.25518 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 D.25518 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:98 512 {*ashldi3_1}
     (nil))
(insn 121 120 122 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:127 D.25518 ] [127])) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (nil))
(call_insn 122 121 123 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:98 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 123 122 124 5 (set (reg/f:DI 0 ax [563])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [563])
        (nil)))
(insn 124 123 125 5 (set (reg/f:DI 0 ax [orig:128 D.25523 ] [128])
        (reg/f:DI 0 ax [563])) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (nil))
(insn 125 124 126 5 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:125 D.25524 ] [125]) [0 _113->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:128 D.25523 ] [128])) ge2fitman_fmtext_o.cpp:98 89 {*movdi_internal}
     (nil))
(insn 126 125 127 5 (set (reg:SI 0 ax [564])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:99 90 {*movsi_internal}
     (nil))
(insn 127 126 128 5 (set (reg:DI 0 ax [orig:129 D.25518 ] [129])
        (sign_extend:DI (reg:SI 0 ax [564]))) ge2fitman_fmtext_o.cpp:99 142 {*extendsidi2_rex64}
     (nil))
(insn 128 127 129 5 (parallel [
            (set (reg:DI 1 dx [orig:130 D.25518 ] [130])
                (ashift:DI (reg:DI 0 ax [orig:129 D.25518 ] [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:99 512 {*ashldi3_1}
     (nil))
(insn 129 128 130 5 (set (reg/f:DI 0 ax [565])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 130 129 131 5 (parallel [
            (set (reg/f:DI 3 bx [orig:131 D.25525 ] [131])
                (plus:DI (reg:DI 1 dx [orig:130 D.25518 ] [130])
                    (reg/f:DI 0 ax [565])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:99 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.25518 ] [130]))
        (nil)))
(insn 131 130 132 5 (set (reg:SI 0 ax [566])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32])) ge2fitman_fmtext_o.cpp:99 90 {*movsi_internal}
     (nil))
(insn 132 131 133 5 (set (reg:DI 0 ax [orig:132 D.25518 ] [132])
        (sign_extend:DI (reg:SI 0 ax [566]))) ge2fitman_fmtext_o.cpp:99 142 {*extendsidi2_rex64}
     (nil))
(insn 133 132 134 5 (parallel [
            (set (reg:DI 0 ax [orig:133 D.25518 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:132 D.25518 ] [132])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:99 512 {*ashldi3_1}
     (nil))
(insn 134 133 135 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:133 D.25518 ] [133])) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(call_insn 135 134 136 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:99 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 136 135 137 5 (set (reg/f:DI 0 ax [567])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [567])
        (nil)))
(insn 137 136 138 5 (set (reg/f:DI 0 ax [orig:134 D.25523 ] [134])
        (reg/f:DI 0 ax [567])) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 138 137 139 5 (set (mem/f/j:DI (reg/f:DI 3 bx [orig:131 D.25525 ] [131]) [0 _121->lo+0 S8 A64])
        (reg/f:DI 0 ax [orig:134 D.25523 ] [134])) ge2fitman_fmtext_o.cpp:99 89 {*movdi_internal}
     (nil))
(insn 139 138 171 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:104 90 {*movsi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              7 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 568
(code_label 171 139 140 6 5 "" [1 uses])
(note 140 171 141 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 6 (set (reg:SI 0 ax [568])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:104 90 {*movsi_internal}
     (nil))
(insn 142 141 143 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [568])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 out_data_size+0 S4 A32]))) ge2fitman_fmtext_o.cpp:104 7 {*cmpsi_1}
     (nil))
(jump_insn 143 142 144 6 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) ge2fitman_fmtext_o.cpp:104 612 {*jcc_1}
     (nil)
 -> 174)
;;  succ:       8
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 569 570 571 572 573 574 575 576
(note 144 143 145 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 7 (set (reg:SI 0 ax [569])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:105 90 {*movsi_internal}
     (nil))
(insn 146 145 147 7 (set (reg:DI 0 ax [orig:135 D.25518 ] [135])
        (sign_extend:DI (reg:SI 0 ax [569]))) ge2fitman_fmtext_o.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 147 146 148 7 (parallel [
            (set (reg:DI 1 dx [orig:136 D.25518 ] [136])
                (ashift:DI (reg:DI 0 ax [orig:135 D.25518 ] [135])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:105 512 {*ashldi3_1}
     (nil))
(insn 148 147 149 7 (set (reg/f:DI 0 ax [570])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:105 89 {*movdi_internal}
     (nil))
(insn 149 148 150 7 (parallel [
            (set (reg/f:DI 0 ax [orig:137 D.25525 ] [137])
                (plus:DI (reg/f:DI 0 ax [570])
                    (reg:DI 1 dx [orig:136 D.25518 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:105 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:136 D.25518 ] [136]))
        (nil)))
(insn 150 149 151 7 (set (reg/f:DI 0 ax [orig:138 D.25526 ] [138])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:137 D.25525 ] [137]) [0 _130->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:105 89 {*movdi_internal}
     (nil))
(insn 151 150 152 7 (set (reg:SI 1 dx [571])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:105 90 {*movsi_internal}
     (nil))
(insn 152 151 153 7 (set (reg:DI 1 dx [orig:139 D.25518 ] [139])
        (sign_extend:DI (reg:SI 1 dx [571]))) ge2fitman_fmtext_o.cpp:105 142 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 7 (parallel [
            (set (reg:DI 1 dx [orig:140 D.25518 ] [140])
                (ashift:DI (reg:DI 1 dx [orig:139 D.25518 ] [139])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:105 512 {*ashldi3_1}
     (nil))
(insn 154 153 155 7 (parallel [
            (set (reg/f:DI 0 ax [orig:141 D.25526 ] [141])
                (plus:DI (reg/f:DI 0 ax [orig:138 D.25526 ] [138])
                    (reg:DI 1 dx [orig:140 D.25518 ] [140])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:105 218 {*adddi_1}
     (nil))
(insn 155 154 156 7 (set (reg:SF 21 xmm0 [572])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:105 129 {*movsf_internal}
     (nil))
(insn 156 155 157 7 (set (mem:SF (reg/f:DI 0 ax [orig:141 D.25526 ] [141]) [0 *_134+0 S4 A32])
        (reg:SF 21 xmm0 [572])) ge2fitman_fmtext_o.cpp:105 129 {*movsf_internal}
     (nil))
(insn 157 156 158 7 (set (reg:SI 0 ax [573])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:106 90 {*movsi_internal}
     (nil))
(insn 158 157 159 7 (set (reg:DI 0 ax [orig:142 D.25518 ] [142])
        (sign_extend:DI (reg:SI 0 ax [573]))) ge2fitman_fmtext_o.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 159 158 160 7 (parallel [
            (set (reg:DI 1 dx [orig:143 D.25518 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.25518 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 512 {*ashldi3_1}
     (nil))
(insn 160 159 161 7 (set (reg/f:DI 0 ax [574])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:106 89 {*movdi_internal}
     (nil))
(insn 161 160 162 7 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.25525 ] [144])
                (plus:DI (reg/f:DI 0 ax [574])
                    (reg:DI 1 dx [orig:143 D.25518 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.25518 ] [143]))
        (nil)))
(insn 162 161 163 7 (set (reg/f:DI 0 ax [orig:145 D.25526 ] [145])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:144 D.25525 ] [144]) [0 _138->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:106 89 {*movdi_internal}
     (nil))
(insn 163 162 164 7 (set (reg:SI 1 dx [575])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:106 90 {*movsi_internal}
     (nil))
(insn 164 163 165 7 (set (reg:DI 1 dx [orig:146 D.25527 ] [146])
        (sign_extend:DI (reg:SI 1 dx [575]))) ge2fitman_fmtext_o.cpp:106 142 {*extendsidi2_rex64}
     (nil))
(insn 165 164 166 7 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25527 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 D.25527 ] [146])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 218 {*adddi_1}
     (nil))
(insn 166 165 167 7 (parallel [
            (set (reg:DI 1 dx [orig:148 D.25527 ] [148])
                (ashift:DI (reg:DI 1 dx [orig:147 D.25527 ] [147])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 512 {*ashldi3_1}
     (nil))
(insn 167 166 168 7 (parallel [
            (set (reg/f:DI 0 ax [orig:149 D.25526 ] [149])
                (plus:DI (reg/f:DI 0 ax [orig:145 D.25526 ] [145])
                    (reg:DI 1 dx [orig:148 D.25527 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:106 218 {*adddi_1}
     (nil))
(insn 168 167 169 7 (set (reg:SF 21 xmm0 [576])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:106 129 {*movsf_internal}
     (nil))
(insn 169 168 170 7 (set (mem:SF (reg/f:DI 0 ax [orig:149 D.25526 ] [149]) [0 *_143+0 S4 A32])
        (reg:SF 21 xmm0 [576])) ge2fitman_fmtext_o.cpp:106 129 {*movsf_internal}
     (nil))
(insn 170 169 1207 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:104 217 {*addsi_1}
     (nil))
(jump_insn 1207 170 1208 7 (set (pc)
        (label_ref 171)) ge2fitman_fmtext_o.cpp:104 654 {jump}
     (nil)
 -> 171)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1208 1207 174)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 150 151 577
(code_label 174 1208 175 8 4 "" [1 uses])
(note 175 174 176 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 8 (set (reg/f:DI 0 ax [577])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:110 89 {*movdi_internal}
     (nil))
(insn 177 176 178 8 (parallel [
            (set (reg/f:DI 0 ax [orig:150 D.25528 ] [150])
                (plus:DI (reg/f:DI 0 ax [577])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:110 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 178 177 179 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f7c3720e7e0 *.LC1>)) ge2fitman_fmtext_o.cpp:110 89 {*movdi_internal}
     (nil))
(insn 179 178 180 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:150 D.25528 ] [150])) ge2fitman_fmtext_o.cpp:110 89 {*movdi_internal}
     (nil))
(call_insn/i 180 179 181 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:110 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 181 180 182 8 (set (reg:SI 0 ax [orig:151 D.25517 ] [151])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:110 90 {*movsi_internal}
     (nil))
(insn 182 181 183 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:151 D.25517 ] [151])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 183 182 184 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) ge2fitman_fmtext_o.cpp:110 612 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 152 153 578
(note 184 183 185 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 185 184 186 9 (set (reg/f:DI 0 ax [578])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:111 89 {*movdi_internal}
     (nil))
(insn 186 185 187 9 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.25528 ] [152])
                (plus:DI (reg/f:DI 0 ax [578])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:111 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 187 186 188 9 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7c3720e870 *.LC2>)) ge2fitman_fmtext_o.cpp:111 89 {*movdi_internal}
     (nil))
(insn 188 187 189 9 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:152 D.25528 ] [152])) ge2fitman_fmtext_o.cpp:111 89 {*movdi_internal}
     (nil))
(call_insn/i 189 188 190 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:111 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 190 189 191 9 (set (reg:SI 0 ax [orig:153 D.25517 ] [153])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:111 90 {*movsi_internal}
     (nil))
(insn 191 190 192 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:153 D.25517 ] [153])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:110 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 192 191 193 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 198)
            (pc))) ge2fitman_fmtext_o.cpp:110 612 {*jcc_1}
     (nil)
 -> 198)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 193 192 194 10 6 "" [1 uses])
(note 194 193 195 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 1209 10 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 39984 [0x9c30])) ge2fitman_fmtext_o.cpp:112 89 {*movdi_internal}
     (nil))
(jump_insn 1209 195 1210 10 (set (pc)
        (label_ref 280)) ge2fitman_fmtext_o.cpp:112 654 {jump}
     (nil)
 -> 280)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1210 1209 198)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 154 155 579
(code_label 198 1210 199 11 7 "" [1 uses])
(note 199 198 200 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 200 199 201 11 (set (reg/f:DI 0 ax [579])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 201 200 202 11 (parallel [
            (set (reg/f:DI 0 ax [orig:154 D.25528 ] [154])
                (plus:DI (reg/f:DI 0 ax [579])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:113 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 202 201 203 11 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7c3720e900 *.LC3>)) ge2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(insn 203 202 204 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:154 D.25528 ] [154])) ge2fitman_fmtext_o.cpp:113 89 {*movdi_internal}
     (nil))
(call_insn/i 204 203 205 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:113 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 205 204 206 11 (set (reg:SI 0 ax [orig:155 D.25517 ] [155])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:113 90 {*movsi_internal}
     (nil))
(insn 206 205 207 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:155 D.25517 ] [155])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:113 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 207 206 208 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 217)
            (pc))) ge2fitman_fmtext_o.cpp:113 612 {*jcc_1}
     (nil)
 -> 217)
;;  succ:       13
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 156 157 580
(note 208 207 209 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 210 12 (set (reg/f:DI 0 ax [580])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:114 89 {*movdi_internal}
     (nil))
(insn 210 209 211 12 (parallel [
            (set (reg/f:DI 0 ax [orig:156 D.25528 ] [156])
                (plus:DI (reg/f:DI 0 ax [580])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:114 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 211 210 212 12 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7c3720e990 *.LC4>)) ge2fitman_fmtext_o.cpp:114 89 {*movdi_internal}
     (nil))
(insn 212 211 213 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:156 D.25528 ] [156])) ge2fitman_fmtext_o.cpp:114 89 {*movdi_internal}
     (nil))
(call_insn/i 213 212 214 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:114 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 214 213 215 12 (set (reg:SI 0 ax [orig:157 D.25517 ] [157])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:114 90 {*movsi_internal}
     (nil))
(insn 215 214 216 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:157 D.25517 ] [157])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:113 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 216 215 217 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) ge2fitman_fmtext_o.cpp:113 612 {*jcc_1}
     (nil)
 -> 222)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 217 216 218 13 9 "" [1 uses])
(note 218 217 219 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 1211 13 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 60464 [0xec30])) ge2fitman_fmtext_o.cpp:115 89 {*movdi_internal}
     (nil))
(jump_insn 1211 219 1212 13 (set (pc)
        (label_ref 280)) ge2fitman_fmtext_o.cpp:115 654 {jump}
     (nil)
 -> 280)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1212 1211 222)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 158 159 581
(code_label 222 1212 223 14 10 "" [1 uses])
(note 223 222 224 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 14 (set (reg/f:DI 0 ax [581])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:116 89 {*movdi_internal}
     (nil))
(insn 225 224 226 14 (parallel [
            (set (reg/f:DI 0 ax [orig:158 D.25528 ] [158])
                (plus:DI (reg/f:DI 0 ax [581])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:116 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 226 225 227 14 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f7c3720ea20 *.LC5>)) ge2fitman_fmtext_o.cpp:116 89 {*movdi_internal}
     (nil))
(insn 227 226 228 14 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:158 D.25528 ] [158])) ge2fitman_fmtext_o.cpp:116 89 {*movdi_internal}
     (nil))
(call_insn/i 228 227 229 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:116 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 229 228 230 14 (set (reg:SI 0 ax [orig:159 D.25517 ] [159])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:116 90 {*movsi_internal}
     (nil))
(insn 230 229 231 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:159 D.25517 ] [159])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:116 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 231 230 232 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 236)
            (pc))) ge2fitman_fmtext_o.cpp:116 612 {*jcc_1}
     (nil)
 -> 236)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 232 231 233 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 1213 15 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 61464 [0xf018])) ge2fitman_fmtext_o.cpp:117 89 {*movdi_internal}
     (nil))
(jump_insn 1213 233 1214 15 (set (pc)
        (label_ref 280)) 654 {jump}
     (nil)
 -> 280)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1214 1213 236)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 160 161 582
(code_label 236 1214 237 16 11 "" [1 uses])
(note 237 236 238 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 16 (set (reg/f:DI 0 ax [582])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(insn 239 238 240 16 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.25528 ] [160])
                (plus:DI (reg/f:DI 0 ax [582])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:118 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 240 239 241 16 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f7c3720eab0 *.LC6>)) ge2fitman_fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(insn 241 240 242 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:160 D.25528 ] [160])) ge2fitman_fmtext_o.cpp:118 89 {*movdi_internal}
     (nil))
(call_insn/i 242 241 243 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:118 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 243 242 244 16 (set (reg:SI 0 ax [orig:161 D.25517 ] [161])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:118 90 {*movsi_internal}
     (nil))
(insn 244 243 245 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:161 D.25517 ] [161])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:118 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 245 244 246 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 250)
            (pc))) ge2fitman_fmtext_o.cpp:118 612 {*jcc_1}
     (nil)
 -> 250)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 246 245 247 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 247 246 1215 17 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 66072 [0x10218])) ge2fitman_fmtext_o.cpp:120 89 {*movdi_internal}
     (nil))
(jump_insn 1215 247 1216 17 (set (pc)
        (label_ref 280)) 654 {jump}
     (nil)
 -> 280)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1216 1215 250)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 162 163 583
(code_label 250 1216 251 18 12 "" [1 uses])
(note 251 250 252 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 252 251 253 18 (set (reg/f:DI 0 ax [583])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:121 89 {*movdi_internal}
     (nil))
(insn 253 252 254 18 (parallel [
            (set (reg/f:DI 0 ax [orig:162 D.25528 ] [162])
                (plus:DI (reg/f:DI 0 ax [583])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:121 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 254 253 255 18 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f7c3720eb40 *.LC7>)) ge2fitman_fmtext_o.cpp:121 89 {*movdi_internal}
     (nil))
(insn 255 254 256 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:162 D.25528 ] [162])) ge2fitman_fmtext_o.cpp:121 89 {*movdi_internal}
     (nil))
(call_insn/i 256 255 257 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:121 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 257 256 258 18 (set (reg:SI 0 ax [orig:163 D.25517 ] [163])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:121 90 {*movsi_internal}
     (nil))
(insn 258 257 259 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:163 D.25517 ] [163])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:121 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 259 258 260 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 266)
            (pc))) ge2fitman_fmtext_o.cpp:121 612 {*jcc_1}
     (nil)
 -> 266)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 260 259 261 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 261 260 262 19 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f7c3720eb40 *.LC7>)) ge2fitman_fmtext_o.cpp:122 89 {*movdi_internal}
     (nil))
(call_insn 262 261 263 19 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:122 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 263 262 1217 19 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 149788 [0x2491c])) ge2fitman_fmtext_o.cpp:126 89 {*movdi_internal}
     (nil))
(jump_insn 1217 263 1218 19 (set (pc)
        (label_ref 280)) 654 {jump}
     (nil)
 -> 280)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1218 1217 266)
;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 164 165 584
(code_label 266 1218 267 20 13 "" [1 uses])
(note 267 266 268 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 268 267 269 20 (set (reg/f:DI 0 ax [584])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:128 89 {*movdi_internal}
     (nil))
(insn 269 268 270 20 (parallel [
            (set (reg/f:DI 0 ax [orig:164 D.25528 ] [164])
                (plus:DI (reg/f:DI 0 ax [584])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:128 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 270 269 271 20 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f7c3720ebd0 *.LC8>)) ge2fitman_fmtext_o.cpp:128 89 {*movdi_internal}
     (nil))
(insn 271 270 272 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:164 D.25528 ] [164])) ge2fitman_fmtext_o.cpp:128 89 {*movdi_internal}
     (nil))
(call_insn/i 272 271 273 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:128 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 273 272 274 20 (set (reg:SI 0 ax [orig:165 D.25517 ] [165])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:128 90 {*movsi_internal}
     (nil))
(insn 274 273 275 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:165 D.25517 ] [165])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:128 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 275 274 276 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 280)
            (pc))) ge2fitman_fmtext_o.cpp:128 612 {*jcc_1}
     (nil)
 -> 280)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 276 275 277 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 277 276 278 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f7c3720ebd0 *.LC8>)) ge2fitman_fmtext_o.cpp:129 89 {*movdi_internal}
     (nil))
(call_insn 278 277 279 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:129 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 279 278 280 21 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 149788 [0x2491c])) ge2fitman_fmtext_o.cpp:130 89 {*movdi_internal}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              10 [100.0%] 
;;              13 [100.0%] 
;;              15 [100.0%] 
;;              17 [100.0%] 
;;              20
;;              19 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 166 167 585
(code_label 280 279 281 22 8 "" [6 uses])
(note 281 280 282 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 283 22 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 149788 [0x2491c])) ge2fitman_fmtext_o.cpp:141 89 {*movdi_internal}
     (nil))
(insn 283 282 284 22 (set (reg/f:DI 0 ax [585])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 284 283 285 22 (parallel [
            (set (reg/f:DI 0 ax [orig:166 D.25528 ] [166])
                (plus:DI (reg/f:DI 0 ax [585])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:143 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 285 284 286 22 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f7c3720ebd0 *.LC8>)) ge2fitman_fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(insn 286 285 287 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:166 D.25528 ] [166])) ge2fitman_fmtext_o.cpp:143 89 {*movdi_internal}
     (nil))
(call_insn/i 287 286 288 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f7c3898f360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:143 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 288 287 289 22 (set (reg:SI 0 ax [orig:167 D.25517 ] [167])
        (reg:SI 0 ax)) ge2fitman_fmtext_o.cpp:143 90 {*movsi_internal}
     (nil))
(insn 289 288 290 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:167 D.25517 ] [167])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:143 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 290 289 291 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 295)
            (pc))) ge2fitman_fmtext_o.cpp:143 612 {*jcc_1}
     (nil)
 -> 295)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 291 290 292 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 292 291 293 23 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])
        (const_int 145908 [0x239f4])) ge2fitman_fmtext_o.cpp:144 89 {*movdi_internal}
     (nil))
(insn 293 292 294 23 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f7c3720ec60 *.LC9>)) ge2fitman_fmtext_o.cpp:145 89 {*movdi_internal}
     (nil))
(call_insn 294 293 295 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:145 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604
(code_label 295 294 296 24 14 "" [1 uses])
(note 296 295 297 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 24 (set (reg:SI 0 ax [586])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
(insn 298 297 1254 24 (set (reg:DI 0 ax [orig:168 D.25518 ] [168])
        (sign_extend:DI (reg:SI 0 ax [586]))) ge2fitman_fmtext_o.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 1254 298 299 24 (set (reg:DI 0 ax [orig:169 D.25518 ] [169])
        (reg:DI 0 ax [orig:168 D.25518 ] [168])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 299 1254 1255 24 (parallel [
            (set (reg:DI 0 ax [orig:169 D.25518 ] [169])
                (ashift:DI (reg:DI 0 ax [orig:169 D.25518 ] [169])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 512 {*ashldi3_1}
     (nil))
(insn 1255 299 300 24 (set (reg:DI 1 dx [orig:169 D.25518 ] [169])
        (reg:DI 0 ax [orig:169 D.25518 ] [169])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 300 1255 301 24 (set (reg/f:DI 0 ax [587])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 301 300 302 24 (parallel [
            (set (reg/f:DI 0 ax [orig:170 D.25520 ] [170])
                (plus:DI (reg/f:DI 0 ax [587])
                    (reg:DI 1 dx [orig:169 D.25518 ] [169])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:169 D.25518 ] [169]))
        (nil)))
(insn 302 301 303 24 (set (reg:DI 1 dx [orig:171 D.25521 ] [171])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:170 D.25520 ] [170])
                (const_int 24 [0x18])) [0 _178->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 303 302 304 24 (set (reg:SI 0 ax [588])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:162 90 {*movsi_internal}
     (nil))
(insn 304 303 1256 24 (set (reg:DI 0 ax [orig:172 D.25518 ] [172])
        (sign_extend:DI (reg:SI 0 ax [588]))) ge2fitman_fmtext_o.cpp:162 142 {*extendsidi2_rex64}
     (nil))
(insn 1256 304 305 24 (set (reg:DI 0 ax [orig:173 D.25518 ] [173])
        (reg:DI 0 ax [orig:172 D.25518 ] [172])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 305 1256 1257 24 (parallel [
            (set (reg:DI 0 ax [orig:173 D.25518 ] [173])
                (ashift:DI (reg:DI 0 ax [orig:173 D.25518 ] [173])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 512 {*ashldi3_1}
     (nil))
(insn 1257 305 306 24 (set (reg:DI 2 cx [orig:173 D.25518 ] [173])
        (reg:DI 0 ax [orig:173 D.25518 ] [173])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 306 1257 307 24 (set (reg/f:DI 0 ax [589])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 307 306 308 24 (parallel [
            (set (reg/f:DI 0 ax [orig:174 D.25520 ] [174])
                (plus:DI (reg/f:DI 0 ax [589])
                    (reg:DI 2 cx [orig:173 D.25518 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:173 D.25518 ] [173]))
        (nil)))
(insn 308 307 309 24 (set (reg:DI 0 ax [orig:175 D.25521 ] [175])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:174 D.25520 ] [174])
                (const_int 16 [0x10])) [0 _182->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 309 308 310 24 (parallel [
            (set (reg:DI 0 ax [590])
                (mult:DI (reg:DI 0 ax [orig:175 D.25521 ] [175])
                    (reg:DI 1 dx [orig:171 D.25521 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:162 306 {*muldi3_1}
     (nil))
(insn 310 309 311 24 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])
        (reg:DI 0 ax [590])) ge2fitman_fmtext_o.cpp:162 89 {*movdi_internal}
     (nil))
(insn 311 310 312 24 (set (reg:SI 0 ax [591])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:167 90 {*movsi_internal}
     (nil))
(insn 312 311 1258 24 (set (reg:DI 0 ax [orig:176 D.25518 ] [176])
        (sign_extend:DI (reg:SI 0 ax [591]))) ge2fitman_fmtext_o.cpp:167 142 {*extendsidi2_rex64}
     (nil))
(insn 1258 312 313 24 (set (reg:DI 0 ax [orig:177 D.25518 ] [177])
        (reg:DI 0 ax [orig:176 D.25518 ] [176])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 313 1258 1259 24 (parallel [
            (set (reg:DI 0 ax [orig:177 D.25518 ] [177])
                (ashift:DI (reg:DI 0 ax [orig:177 D.25518 ] [177])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 512 {*ashldi3_1}
     (nil))
(insn 1259 313 314 24 (set (reg:DI 1 dx [orig:177 D.25518 ] [177])
        (reg:DI 0 ax [orig:177 D.25518 ] [177])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 314 1259 315 24 (set (reg/f:DI 0 ax [592])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 315 314 316 24 (parallel [
            (set (reg/f:DI 0 ax [orig:178 D.25520 ] [178])
                (plus:DI (reg/f:DI 0 ax [592])
                    (reg:DI 1 dx [orig:177 D.25518 ] [177])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:177 D.25518 ] [177]))
        (nil)))
(insn 316 315 317 24 (set (reg:DI 1 dx [orig:179 D.25521 ] [179])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:178 D.25520 ] [178])
                (const_int 24 [0x18])) [0 _187->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 317 316 318 24 (set (reg:SI 0 ax [593])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:167 90 {*movsi_internal}
     (nil))
(insn 318 317 1260 24 (set (reg:DI 0 ax [orig:180 D.25518 ] [180])
        (sign_extend:DI (reg:SI 0 ax [593]))) ge2fitman_fmtext_o.cpp:167 142 {*extendsidi2_rex64}
     (nil))
(insn 1260 318 319 24 (set (reg:DI 0 ax [orig:181 D.25518 ] [181])
        (reg:DI 0 ax [orig:180 D.25518 ] [180])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 319 1260 1261 24 (parallel [
            (set (reg:DI 0 ax [orig:181 D.25518 ] [181])
                (ashift:DI (reg:DI 0 ax [orig:181 D.25518 ] [181])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 512 {*ashldi3_1}
     (nil))
(insn 1261 319 320 24 (set (reg:DI 2 cx [orig:181 D.25518 ] [181])
        (reg:DI 0 ax [orig:181 D.25518 ] [181])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 320 1261 321 24 (set (reg/f:DI 0 ax [594])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 321 320 322 24 (parallel [
            (set (reg/f:DI 0 ax [orig:182 D.25520 ] [182])
                (plus:DI (reg/f:DI 0 ax [594])
                    (reg:DI 2 cx [orig:181 D.25518 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:181 D.25518 ] [181]))
        (nil)))
(insn 322 321 1262 24 (set (reg:DI 0 ax [orig:183 D.25521 ] [183])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:182 D.25520 ] [182])
                (const_int 16 [0x10])) [0 _191->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 1262 322 323 24 (set (reg:DI 2 cx [orig:184 D.25521 ] [184])
        (reg:DI 1 dx [orig:179 D.25521 ] [179])) ge2fitman_fmtext_o.cpp:167 89 {*movdi_internal}
     (nil))
(insn 323 1262 324 24 (parallel [
            (set (reg:DI 2 cx [orig:184 D.25521 ] [184])
                (mult:DI (reg:DI 2 cx [orig:184 D.25521 ] [184])
                    (reg:DI 0 ax [orig:183 D.25521 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:167 306 {*muldi3_1}
     (nil))
(insn 324 323 325 24 (set (reg:SI 0 ax [595])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:168 90 {*movsi_internal}
     (nil))
(insn 325 324 326 24 (set (reg:DI 1 dx [orig:185 D.25518 ] [185])
        (sign_extend:DI (reg:SI 0 ax [595]))) ge2fitman_fmtext_o.cpp:168 142 {*extendsidi2_rex64}
     (nil))
(insn 326 325 327 24 (set (reg:DI 0 ax [596])
        (reg:DI 1 dx [orig:185 D.25518 ] [185])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 327 326 328 24 (parallel [
            (set (reg:DI 0 ax [596])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 512 {*ashldi3_1}
     (nil))
(insn 328 327 329 24 (parallel [
            (set (reg:DI 0 ax [596])
                (plus:DI (reg:DI 0 ax [596])
                    (reg:DI 1 dx [orig:185 D.25518 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:185 D.25518 ] [185])
            (const_int 5 [0x5]))
        (nil)))
(insn 329 328 330 24 (parallel [
            (set (reg:DI 0 ax [597])
                (ashift:DI (reg:DI 0 ax [596])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 512 {*ashldi3_1}
     (nil))
(insn 330 329 331 24 (set (reg:DI 0 ax [596])
        (reg:DI 0 ax [597])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 331 330 332 24 (set (reg:DI 1 dx [orig:186 D.25518 ] [186])
        (reg:DI 0 ax [596])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 332 331 333 24 (set (reg/f:DI 0 ax [598])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 333 332 334 24 (parallel [
            (set (reg/f:DI 0 ax [orig:187 D.25529 ] [187])
                (plus:DI (reg/f:DI 0 ax [598])
                    (reg:DI 1 dx [orig:186 D.25518 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:186 D.25518 ] [186]))
        (nil)))
(insn 334 333 335 24 (set (reg:SI 0 ax [orig:188 D.25517 ] [188])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:187 D.25529 ] [187])
                (const_int 4 [0x4])) [0 _196->num_unsup_sets+0 S4 A32])) ge2fitman_fmtext_o.cpp:168 90 {*movsi_internal}
     (nil))
(insn 335 334 336 24 (set (reg:DI 0 ax [orig:189 D.25521 ] [189])
        (sign_extend:DI (reg:SI 0 ax [orig:188 D.25517 ] [188]))) ge2fitman_fmtext_o.cpp:168 142 {*extendsidi2_rex64}
     (nil))
(insn 336 335 337 24 (parallel [
            (set (reg:DI 0 ax [599])
                (mult:DI (reg:DI 0 ax [orig:189 D.25521 ] [189])
                    (reg:DI 2 cx [orig:184 D.25521 ] [184])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:168 306 {*muldi3_1}
     (nil))
(insn 337 336 338 24 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])
        (reg:DI 0 ax [599])) ge2fitman_fmtext_o.cpp:168 89 {*movdi_internal}
     (nil))
(insn 338 337 339 24 (set (reg:SI 0 ax [600])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 339 338 340 24 (set (reg:DI 1 dx [orig:190 D.25518 ] [190])
        (sign_extend:DI (reg:SI 0 ax [600]))) ge2fitman_fmtext_o.cpp:174 142 {*extendsidi2_rex64}
     (nil))
(insn 340 339 341 24 (set (reg:DI 0 ax [601])
        (reg:DI 1 dx [orig:190 D.25518 ] [190])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 341 340 342 24 (parallel [
            (set (reg:DI 0 ax [601])
                (ashift:DI (reg:DI 0 ax [601])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 512 {*ashldi3_1}
     (nil))
(insn 342 341 343 24 (parallel [
            (set (reg:DI 0 ax [601])
                (plus:DI (reg:DI 0 ax [601])
                    (reg:DI 1 dx [orig:190 D.25518 ] [190])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:190 D.25518 ] [190])
            (const_int 5 [0x5]))
        (nil)))
(insn 343 342 344 24 (parallel [
            (set (reg:DI 0 ax [602])
                (ashift:DI (reg:DI 0 ax [601])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 512 {*ashldi3_1}
     (nil))
(insn 344 343 345 24 (set (reg:DI 0 ax [601])
        (reg:DI 0 ax [602])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 345 344 346 24 (set (reg:DI 1 dx [orig:191 D.25518 ] [191])
        (reg:DI 0 ax [601])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 346 345 347 24 (set (reg/f:DI 0 ax [603])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 347 346 348 24 (parallel [
            (set (reg/f:DI 0 ax [orig:192 D.25529 ] [192])
                (plus:DI (reg/f:DI 0 ax [603])
                    (reg:DI 1 dx [orig:191 D.25518 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:191 D.25518 ] [191]))
        (nil)))
(insn 348 347 349 24 (set (reg:SI 0 ax [orig:193 D.25517 ] [193])
        (mem/j:SI (reg/f:DI 0 ax [orig:192 D.25529 ] [192]) [0 _202->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 349 348 350 24 (set (reg:SI 1 dx [orig:194 D.25530 ] [194])
        (reg:SI 0 ax [orig:193 D.25517 ] [193])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 350 349 351 24 (set (reg:DI 0 ax [604])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:174 89 {*movdi_internal}
     (nil))
(insn 351 350 352 24 (set (reg:SI 0 ax [orig:195 D.25530 ] [195])
        (reg:SI 0 ax [604])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 352 351 353 24 (parallel [
            (set (reg:SI 0 ax [orig:196 D.25530 ] [196])
                (mult:SI (reg:SI 0 ax [orig:195 D.25530 ] [195])
                    (reg:SI 1 dx [orig:194 D.25530 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:174 305 {*mulsi3_1}
     (nil))
(insn 353 352 354 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 dataSizeChannel+0 S4 A32])
        (reg:SI 0 ax [orig:196 D.25530 ] [196])) ge2fitman_fmtext_o.cpp:174 90 {*movsi_internal}
     (nil))
(insn 354 353 355 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:232 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 355 354 356 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 386)
            (pc))) ge2fitman_fmtext_o.cpp:232 612 {*jcc_1}
     (nil)
 -> 386)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 197 198 199 605 606 607 608 609 610 611 612
(note 356 355 357 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 357 356 358 25 (set (reg/f:DI 0 ax [605])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 358 357 359 25 (set (reg:SI 0 ax [orig:197 D.25517 ] [197])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [605])
                (const_int 508 [0x1fc])) [0 procpar_info_208(D)->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:233 90 {*movsi_internal}
     (nil))
(insn 359 358 360 25 (set (reg:DI 0 ax [orig:198 D.25518 ] [198])
        (sign_extend:DI (reg:SI 0 ax [orig:197 D.25517 ] [197]))) ge2fitman_fmtext_o.cpp:233 142 {*extendsidi2_rex64}
     (nil))
(insn 360 359 361 25 (parallel [
            (set (reg:DI 0 ax [orig:199 D.25518 ] [199])
                (ashift:DI (reg:DI 0 ax [orig:198 D.25518 ] [198])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:233 512 {*ashldi3_1}
     (nil))
(insn 361 360 362 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:199 D.25518 ] [199])) ge2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(call_insn 362 361 363 25 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:233 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 363 362 364 25 (set (reg/f:DI 0 ax [606])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [606])
        (nil)))
(insn 364 363 365 25 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])
        (reg/f:DI 0 ax [606])) ge2fitman_fmtext_o.cpp:233 89 {*movdi_internal}
     (nil))
(insn 365 364 366 25 (set (reg:DI 37 r8 [607])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 366 365 367 25 (set (reg:DI 5 di [608])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 367 366 368 25 (set (reg:DI 2 cx [609])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 368 367 369 25 (set (reg:DI 1 dx [610])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 369 368 370 25 (set (reg:DI 0 ax [611])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 370 369 371 25 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 371 370 372 25 (set (reg:SI 4 si [612])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 swap_bytes+0 S4 A64])) ge2fitman_fmtext_o.cpp:240 90 {*movsi_internal}
     (nil))
(insn 372 371 373 25 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 4 si [612])) ge2fitman_fmtext_o.cpp:240 69 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 373 372 374 25 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [607])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 374 373 377 25 (set (reg:DI 37 r8)
        (reg:DI 5 di [608])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 377 374 378 25 (set (reg:DI 4 si)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(insn 378 377 379 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [611])) ge2fitman_fmtext_o.cpp:240 89 {*movdi_internal}
     (nil))
(call_insn 379 378 380 25 (call (mem:QI (symbol_ref:DI ("_Z9get_phasePfPP8_IO_FILEP16Data_file_headerP13InFile_structlP7IOFilesiP12Procpar_info") [flags 0x3]  <function_decl 0x7f7c37522948 get_phase>) [0 get_phase S1 A8])
        (const_int 16 [0x10])) ge2fitman_fmtext_o.cpp:240 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 380 379 381 25 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:240 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 381 380 382 25 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:241 93 {*movqi_internal}
     (nil))
(insn 382 381 383 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f7c3720ecf0 *.LC10>)) ge2fitman_fmtext_o.cpp:242 89 {*movdi_internal}
     (nil))
(call_insn 383 382 1219 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:242 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1219 383 1220 25 (set (pc)
        (label_ref 478)) 654 {jump}
     (nil)
 -> 478)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1220 1219 386)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 386 1220 387 26 15 "" [1 uses])
(note 387 386 388 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 388 387 389 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:249 7 {*cmpsi_1}
     (nil))
(jump_insn 389 388 390 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 433)
            (pc))) ge2fitman_fmtext_o.cpp:249 612 {*jcc_1}
     (nil)
 -> 433)
;;  succ:       27 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 200 613
(note 390 389 391 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 391 390 392 27 (set (reg/f:DI 0 ax [613])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 392 391 393 27 (set (reg:SI 0 ax [orig:200 D.25517 ] [200])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [613])
                (const_int 508 [0x1fc])) [0 procpar_info_208(D)->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
(insn 393 392 394 27 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:200 D.25517 ] [200])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:249 7 {*cmpsi_1}
     (nil))
(jump_insn 394 393 395 27 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 401)
            (pc))) ge2fitman_fmtext_o.cpp:249 612 {*jcc_1}
     (nil)
 -> 401)
;;  succ:       29
;;              28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 201 202 614
(note 395 394 396 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 396 395 397 28 (set (reg/f:DI 0 ax [614])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:249 89 {*movdi_internal}
     (nil))
(insn 397 396 398 28 (parallel [
            (set (reg/f:DI 0 ax [orig:201 D.25531 ] [201])
                (plus:DI (reg/f:DI 0 ax [614])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:249 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 398 397 399 28 (set (reg:SI 0 ax [orig:202 D.25517 ] [202])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:201 D.25531 ] [201])
                (const_int 508 [0x1fc])) [0 _221->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:249 90 {*movsi_internal}
     (nil))
(insn 399 398 400 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:202 D.25517 ] [202])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:249 7 {*cmpsi_1}
     (nil))
(jump_insn 400 399 401 28 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 433)
            (pc))) ge2fitman_fmtext_o.cpp:249 612 {*jcc_1}
     (nil)
 -> 433)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27
;;              28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 203 204 205 206 615 616 617 618 619 620 621 622
(code_label 401 400 402 29 18 "" [1 uses])
(note 402 401 403 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 29 (set (reg/f:DI 0 ax [615])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 404 403 405 29 (parallel [
            (set (reg/f:DI 0 ax [orig:203 D.25531 ] [203])
                (plus:DI (reg/f:DI 0 ax [615])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:251 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 405 404 406 29 (set (reg:SI 0 ax [orig:204 D.25517 ] [204])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:203 D.25531 ] [203])
                (const_int 508 [0x1fc])) [0 _223->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:251 90 {*movsi_internal}
     (nil))
(insn 406 405 407 29 (set (reg:DI 0 ax [orig:205 D.25518 ] [205])
        (sign_extend:DI (reg:SI 0 ax [orig:204 D.25517 ] [204]))) ge2fitman_fmtext_o.cpp:251 142 {*extendsidi2_rex64}
     (nil))
(insn 407 406 408 29 (parallel [
            (set (reg:DI 0 ax [orig:206 D.25518 ] [206])
                (ashift:DI (reg:DI 0 ax [orig:205 D.25518 ] [205])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:251 512 {*ashldi3_1}
     (nil))
(insn 408 407 409 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:206 D.25518 ] [206])) ge2fitman_fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(call_insn 409 408 410 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:251 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 410 409 411 29 (set (reg/f:DI 0 ax [616])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:251 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [616])
        (nil)))
(insn 411 410 412 29 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])
        (reg/f:DI 0 ax [616])) ge2fitman_fmtext_o.cpp:251 89 {*movdi_internal}
     (nil))
(insn 412 411 413 29 (set (reg:DI 37 r8 [617])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 413 412 414 29 (set (reg:DI 5 di [618])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 414 413 415 29 (set (reg:DI 2 cx [619])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 415 414 416 29 (set (reg:DI 1 dx [620])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 416 415 417 29 (set (reg:DI 0 ax [621])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 417 416 418 29 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 418 417 419 29 (set (reg:SI 4 si [622])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 swap_bytes+0 S4 A64])) ge2fitman_fmtext_o.cpp:253 90 {*movsi_internal}
     (nil))
(insn 419 418 420 29 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 4 si [622])) ge2fitman_fmtext_o.cpp:253 69 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 420 419 421 29 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [617])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 421 420 424 29 (set (reg:DI 37 r8)
        (reg:DI 5 di [618])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 424 421 425 29 (set (reg:DI 4 si)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(insn 425 424 426 29 (set (reg:DI 5 di)
        (reg:DI 0 ax [621])) ge2fitman_fmtext_o.cpp:253 89 {*movdi_internal}
     (nil))
(call_insn 426 425 427 29 (call (mem:QI (symbol_ref:DI ("_Z9get_phasePfPP8_IO_FILEP16Data_file_headerP13InFile_structlP7IOFilesiP12Procpar_info") [flags 0x3]  <function_decl 0x7f7c37522948 get_phase>) [0 get_phase S1 A8])
        (const_int 16 [0x10])) ge2fitman_fmtext_o.cpp:253 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 427 426 428 29 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:253 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 428 427 429 29 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:254 93 {*movqi_internal}
     (nil))
(insn 429 428 430 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f7c3720ecf0 *.LC10>)) ge2fitman_fmtext_o.cpp:255 89 {*movdi_internal}
     (nil))
(call_insn 430 429 1221 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:255 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 1221 430 1222 29 (set (pc)
        (label_ref 478)) ge2fitman_fmtext_o.cpp:255 654 {jump}
     (nil)
 -> 478)
;;  succ:       31 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1222 1221 433)
;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;;              28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 207 208 209 210 211 212 213 214 215 216 217 218 623 624 625 626 627 628 629 630 631 632 633 634
(code_label 433 1222 434 30 17 "" [2 uses])
(note 434 433 435 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 435 434 436 30 (set (reg:SI 0 ax [623])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:261 90 {*movsi_internal}
     (nil))
(insn 436 435 1264 30 (set (reg:DI 0 ax [orig:207 D.25518 ] [207])
        (sign_extend:DI (reg:SI 0 ax [623]))) ge2fitman_fmtext_o.cpp:261 142 {*extendsidi2_rex64}
     (nil))
(insn 1264 436 437 30 (set (reg:DI 0 ax [orig:208 D.25518 ] [208])
        (reg:DI 0 ax [orig:207 D.25518 ] [207])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(insn 437 1264 1265 30 (parallel [
            (set (reg:DI 0 ax [orig:208 D.25518 ] [208])
                (ashift:DI (reg:DI 0 ax [orig:208 D.25518 ] [208])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:261 512 {*ashldi3_1}
     (nil))
(insn 1265 437 438 30 (set (reg:DI 1 dx [orig:208 D.25518 ] [208])
        (reg:DI 0 ax [orig:208 D.25518 ] [208])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(insn 438 1265 439 30 (set (reg/f:DI 0 ax [624])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(insn 439 438 440 30 (parallel [
            (set (reg/f:DI 0 ax [orig:209 D.25531 ] [209])
                (plus:DI (reg/f:DI 0 ax [624])
                    (reg:DI 1 dx [orig:208 D.25518 ] [208])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:261 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:208 D.25518 ] [208]))
        (nil)))
(insn 440 439 441 30 (set (reg:SI 0 ax [orig:210 D.25517 ] [210])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:209 D.25531 ] [209])
                (const_int 508 [0x1fc])) [0 _234->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:261 90 {*movsi_internal}
     (nil))
(insn 441 440 442 30 (set (reg:DI 0 ax [orig:211 D.25518 ] [211])
        (sign_extend:DI (reg:SI 0 ax [orig:210 D.25517 ] [210]))) ge2fitman_fmtext_o.cpp:261 142 {*extendsidi2_rex64}
     (nil))
(insn 442 441 443 30 (parallel [
            (set (reg:DI 0 ax [orig:212 D.25518 ] [212])
                (ashift:DI (reg:DI 0 ax [orig:211 D.25518 ] [211])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:261 512 {*ashldi3_1}
     (nil))
(insn 443 442 444 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:212 D.25518 ] [212])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(call_insn 444 443 445 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:261 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 445 444 446 30 (set (reg/f:DI 0 ax [625])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [625])
        (nil)))
(insn 446 445 447 30 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])
        (reg/f:DI 0 ax [625])) ge2fitman_fmtext_o.cpp:261 89 {*movdi_internal}
     (nil))
(insn 447 446 448 30 (set (reg:SI 0 ax [626])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:266 90 {*movsi_internal}
     (nil))
(insn 448 447 1266 30 (set (reg:DI 0 ax [orig:213 D.25518 ] [213])
        (sign_extend:DI (reg:SI 0 ax [626]))) ge2fitman_fmtext_o.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 1266 448 449 30 (set (reg:DI 0 ax [orig:214 D.25518 ] [214])
        (reg:DI 0 ax [orig:213 D.25518 ] [213])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 449 1266 1267 30 (parallel [
            (set (reg:DI 0 ax [orig:214 D.25518 ] [214])
                (ashift:DI (reg:DI 0 ax [orig:214 D.25518 ] [214])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:266 512 {*ashldi3_1}
     (nil))
(insn 1267 449 450 30 (set (reg:DI 1 dx [orig:214 D.25518 ] [214])
        (reg:DI 0 ax [orig:214 D.25518 ] [214])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 450 1267 451 30 (set (reg/f:DI 0 ax [627])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 451 450 452 30 (parallel [
            (set (reg/f:DI 0 ax [orig:215 D.25531 ] [215])
                (plus:DI (reg/f:DI 0 ax [627])
                    (reg:DI 1 dx [orig:214 D.25518 ] [214])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:266 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:214 D.25518 ] [214]))
        (nil)))
(insn 452 451 453 30 (set (reg:SI 0 ax [orig:216 D.25517 ] [216])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:215 D.25531 ] [215])
                (const_int 508 [0x1fc])) [0 _242->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:266 90 {*movsi_internal}
     (nil))
(insn 453 452 454 30 (set (reg:DI 0 ax [orig:217 D.25518 ] [217])
        (sign_extend:DI (reg:SI 0 ax [orig:216 D.25517 ] [216]))) ge2fitman_fmtext_o.cpp:266 142 {*extendsidi2_rex64}
     (nil))
(insn 454 453 455 30 (parallel [
            (set (reg:DI 0 ax [orig:218 D.25518 ] [218])
                (ashift:DI (reg:DI 0 ax [orig:217 D.25518 ] [217])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:266 512 {*ashldi3_1}
     (nil))
(insn 455 454 456 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:218 D.25518 ] [218])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(call_insn 456 455 457 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:266 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 457 456 458 30 (set (reg/f:DI 0 ax [628])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [628])
        (nil)))
(insn 458 457 459 30 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])
        (reg/f:DI 0 ax [628])) ge2fitman_fmtext_o.cpp:266 89 {*movdi_internal}
     (nil))
(insn 459 458 460 30 (set (reg:DI 37 r8 [629])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 460 459 461 30 (set (reg:DI 5 di [630])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 461 460 462 30 (set (reg:DI 2 cx [631])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 462 461 463 30 (set (reg:DI 1 dx [632])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 463 462 464 30 (set (reg:DI 0 ax [633])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 464 463 465 30 (set (mem/f:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A64])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 65 {*pushdi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 465 464 466 30 (set (reg:SI 4 si [634])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int 56 [0x38])) [0 swap_bytes+0 S4 A64])) ge2fitman_fmtext_o.cpp:269 90 {*movsi_internal}
     (nil))
(insn 466 465 467 30 (set (mem:SI (pre_modify:DI (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -8 [0xfffffffffffffff8]))) [0  S4 A32])
        (reg:SI 4 si [634])) ge2fitman_fmtext_o.cpp:269 69 {*pushsi2_rex64}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 467 466 468 30 (set (reg:DI 38 r9)
        (reg:DI 37 r8 [629])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 468 467 471 30 (set (reg:DI 37 r8)
        (reg:DI 5 di [630])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 471 468 472 30 (set (reg:DI 4 si)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(insn 472 471 473 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [633])) ge2fitman_fmtext_o.cpp:269 89 {*movdi_internal}
     (nil))
(call_insn 473 472 474 30 (call (mem:QI (symbol_ref:DI ("_Z9get_phasePfPP8_IO_FILEP16Data_file_headerP13InFile_structlP7IOFilesiP12Procpar_info") [flags 0x3]  <function_decl 0x7f7c37522948 get_phase>) [0 get_phase S1 A8])
        (const_int 16 [0x10])) ge2fitman_fmtext_o.cpp:269 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 474 473 475 30 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:269 218 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 475 474 476 30 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:270 93 {*movqi_internal}
     (nil))
(insn 476 475 477 30 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f7c3720ecf0 *.LC10>)) ge2fitman_fmtext_o.cpp:271 89 {*movdi_internal}
     (nil))
(call_insn 477 476 478 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:271 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;;              25 [100.0%] 
;;              29 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 478 477 479 31 16 "" [2 uses])
(note 479 478 480 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 480 479 1181 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:301 90 {*movsi_internal}
     (nil))
;;  succ:       32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;;              76 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 219 220 221 222 635 636
(code_label 1181 480 481 32 44 "" [1 uses])
(note 481 1181 482 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 482 481 483 32 (set (reg:SI 0 ax [635])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:301 90 {*movsi_internal}
     (nil))
(insn 483 482 1268 32 (set (reg:DI 0 ax [orig:219 D.25518 ] [219])
        (sign_extend:DI (reg:SI 0 ax [635]))) ge2fitman_fmtext_o.cpp:301 142 {*extendsidi2_rex64}
     (nil))
(insn 1268 483 484 32 (set (reg:DI 0 ax [orig:220 D.25518 ] [220])
        (reg:DI 0 ax [orig:219 D.25518 ] [219])) ge2fitman_fmtext_o.cpp:301 89 {*movdi_internal}
     (nil))
(insn 484 1268 1269 32 (parallel [
            (set (reg:DI 0 ax [orig:220 D.25518 ] [220])
                (ashift:DI (reg:DI 0 ax [orig:220 D.25518 ] [220])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:301 512 {*ashldi3_1}
     (nil))
(insn 1269 484 485 32 (set (reg:DI 1 dx [orig:220 D.25518 ] [220])
        (reg:DI 0 ax [orig:220 D.25518 ] [220])) ge2fitman_fmtext_o.cpp:301 89 {*movdi_internal}
     (nil))
(insn 485 1269 486 32 (set (reg/f:DI 0 ax [636])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:301 89 {*movdi_internal}
     (nil))
(insn 486 485 487 32 (parallel [
            (set (reg/f:DI 0 ax [orig:221 D.25531 ] [221])
                (plus:DI (reg/f:DI 0 ax [636])
                    (reg:DI 1 dx [orig:220 D.25518 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:301 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 8 [0x8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:220 D.25518 ] [220]))
        (nil)))
(insn 487 486 488 32 (set (reg:SI 0 ax [orig:222 D.25517 ] [222])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:221 D.25531 ] [221])
                (const_int 508 [0x1fc])) [0 _254->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:301 90 {*movsi_internal}
     (nil))
(insn 488 487 489 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:222 D.25517 ] [222])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32]))) ge2fitman_fmtext_o.cpp:301 7 {*cmpsi_1}
     (nil))
(jump_insn 489 488 490 32 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1186)
            (pc))) ge2fitman_fmtext_o.cpp:301 612 {*jcc_1}
     (nil)
 -> 1186)
;;  succ:       77
;;              33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 490 489 491 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 491 490 492 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:325 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 492 491 493 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 541)
            (pc))) ge2fitman_fmtext_o.cpp:325 612 {*jcc_1}
     (nil)
 -> 541)
;;  succ:       34 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651
(note 493 492 494 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 494 493 495 34 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f7c3720ed80 *.LC11>)) ge2fitman_fmtext_o.cpp:326 89 {*movdi_internal}
     (nil))
(call_insn 495 494 496 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:326 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 496 495 497 34 (set (reg:DI 1 dx [637])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 497 496 498 34 (set (reg:DI 0 ax [638])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 498 497 499 34 (parallel [
            (set (reg:DI 1 dx [orig:223 D.25521 ] [223])
                (plus:DI (reg:DI 1 dx [637])
                    (reg:DI 0 ax [638])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:331 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 baseline_set_size+0 S8 A64]))
        (nil)))
(insn 499 498 500 34 (set (reg:DI 0 ax [639])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 unsup_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:332 89 {*movdi_internal}
     (nil))
(insn 500 499 501 34 (parallel [
            (set (reg:DI 1 dx [orig:224 D.25521 ] [224])
                (plus:DI (reg:DI 1 dx [orig:223 D.25521 ] [223])
                    (reg:DI 0 ax [639])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:332 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg:DI 1 dx [orig:223 D.25521 ] [223])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 unsup_set_size+0 S8 A64]))
        (nil)))
(insn 501 500 502 34 (set (reg:SI 0 ax [640])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 dataSizeChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:332 90 {*movsi_internal}
     (nil))
(insn 502 501 503 34 (parallel [
            (set (reg:SI 0 ax [orig:225 D.25517 ] [225])
                (mult:SI (reg:SI 0 ax [640])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:332 305 {*mulsi3_1}
     (nil))
(insn 503 502 504 34 (set (reg:DI 0 ax [orig:226 D.25521 ] [226])
        (sign_extend:DI (reg:SI 0 ax [orig:225 D.25517 ] [225]))) ge2fitman_fmtext_o.cpp:331 142 {*extendsidi2_rex64}
     (nil))
(insn 504 503 505 34 (parallel [
            (set (reg:DI 2 cx [orig:227 D.25521 ] [227])
                (plus:DI (reg:DI 1 dx [orig:224 D.25521 ] [224])
                    (reg:DI 0 ax [orig:226 D.25521 ] [226])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:331 218 {*adddi_1}
     (nil))
(insn 505 504 506 34 (set (reg:SI 0 ax [641])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:331 90 {*movsi_internal}
     (nil))
(insn 506 505 507 34 (set (reg:DI 0 ax [orig:228 D.25518 ] [228])
        (sign_extend:DI (reg:SI 0 ax [641]))) ge2fitman_fmtext_o.cpp:331 142 {*extendsidi2_rex64}
     (nil))
(insn 507 506 508 34 (parallel [
            (set (reg:DI 1 dx [orig:229 D.25518 ] [229])
                (ashift:DI (reg:DI 0 ax [orig:228 D.25518 ] [228])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:331 512 {*ashldi3_1}
     (nil))
(insn 508 507 509 34 (set (reg/f:DI 0 ax [642])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 509 508 510 34 (parallel [
            (set (reg/f:DI 0 ax [orig:230 D.25532 ] [230])
                (plus:DI (reg/f:DI 0 ax [642])
                    (reg:DI 1 dx [orig:229 D.25518 ] [229])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:331 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:229 D.25518 ] [229]))
        (nil)))
(insn 510 509 511 34 (set (reg/f:DI 0 ax [orig:231 D.25533 ] [231])
        (mem/f:DI (reg/f:DI 0 ax [orig:230 D.25532 ] [230]) [0 *_264+0 S8 A64])) ge2fitman_fmtext_o.cpp:331 89 {*movdi_internal}
     (nil))
(insn 511 510 512 34 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:332 90 {*movsi_internal}
     (nil))
(insn 512 511 513 34 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:227 D.25521 ] [227])) ge2fitman_fmtext_o.cpp:332 89 {*movdi_internal}
     (nil))
(insn 513 512 514 34 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:231 D.25533 ] [231])) ge2fitman_fmtext_o.cpp:332 89 {*movdi_internal}
     (nil))
(call_insn 514 513 515 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7f7c387db948 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:332 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 515 514 516 34 (set (reg:SI 0 ax [643])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 516 515 517 34 (set (reg:DI 1 dx [orig:232 D.25518 ] [232])
        (sign_extend:DI (reg:SI 0 ax [643]))) ge2fitman_fmtext_o.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 517 516 518 34 (set (reg:DI 0 ax [644])
        (reg:DI 1 dx [orig:232 D.25518 ] [232])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 518 517 519 34 (parallel [
            (set (reg:DI 0 ax [644])
                (ashift:DI (reg:DI 0 ax [644])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 512 {*ashldi3_1}
     (nil))
(insn 519 518 520 34 (parallel [
            (set (reg:DI 0 ax [644])
                (plus:DI (reg:DI 0 ax [644])
                    (reg:DI 1 dx [orig:232 D.25518 ] [232])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:232 D.25518 ] [232])
            (const_int 5 [0x5]))
        (nil)))
(insn 520 519 521 34 (parallel [
            (set (reg:DI 0 ax [645])
                (ashift:DI (reg:DI 0 ax [644])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 512 {*ashldi3_1}
     (nil))
(insn 521 520 522 34 (set (reg:DI 0 ax [644])
        (reg:DI 0 ax [645])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 522 521 523 34 (set (reg:DI 1 dx [orig:233 D.25518 ] [233])
        (reg:DI 0 ax [644])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 523 522 524 34 (set (reg/f:DI 0 ax [646])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 524 523 525 34 (parallel [
            (set (reg/f:DI 0 ax [orig:234 D.25529 ] [234])
                (plus:DI (reg/f:DI 0 ax [646])
                    (reg:DI 1 dx [orig:233 D.25518 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:233 D.25518 ] [233]))
        (nil)))
(insn 525 524 526 34 (set (reg:SI 2 cx [orig:235 D.25517 ] [235])
        (mem/j:SI (reg/f:DI 0 ax [orig:234 D.25529 ] [234]) [0 _269->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 526 525 527 34 (set (reg:SI 0 ax [647])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 527 526 528 34 (set (reg:DI 1 dx [orig:236 D.25518 ] [236])
        (sign_extend:DI (reg:SI 0 ax [647]))) ge2fitman_fmtext_o.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 528 527 529 34 (set (reg:DI 0 ax [648])
        (reg:DI 1 dx [orig:236 D.25518 ] [236])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 529 528 530 34 (parallel [
            (set (reg:DI 0 ax [648])
                (ashift:DI (reg:DI 0 ax [648])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 512 {*ashldi3_1}
     (nil))
(insn 530 529 531 34 (parallel [
            (set (reg:DI 0 ax [648])
                (plus:DI (reg:DI 0 ax [648])
                    (reg:DI 1 dx [orig:236 D.25518 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:236 D.25518 ] [236])
            (const_int 5 [0x5]))
        (nil)))
(insn 531 530 532 34 (parallel [
            (set (reg:DI 0 ax [649])
                (ashift:DI (reg:DI 0 ax [648])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 512 {*ashldi3_1}
     (nil))
(insn 532 531 533 34 (set (reg:DI 0 ax [648])
        (reg:DI 0 ax [649])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 533 532 534 34 (set (reg:DI 1 dx [orig:237 D.25518 ] [237])
        (reg:DI 0 ax [648])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 534 533 535 34 (set (reg/f:DI 0 ax [650])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:337 89 {*movdi_internal}
     (nil))
(insn 535 534 536 34 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.25529 ] [238])
                (plus:DI (reg/f:DI 0 ax [650])
                    (reg:DI 1 dx [orig:237 D.25518 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:237 D.25518 ] [237]))
        (nil)))
(insn 536 535 537 34 (set (reg:SI 0 ax [orig:239 D.25517 ] [239])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:238 D.25529 ] [238])
                (const_int 4 [0x4])) [0 _273->num_unsup_sets+0 S4 A32])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 537 536 1271 34 (parallel [
            (set (reg:SI 2 cx [651])
                (minus:SI (reg:SI 2 cx [651])
                    (reg:SI 0 ax [orig:239 D.25517 ] [239])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:337 260 {*subsi_1}
     (nil))
(insn 1271 537 538 34 (set (reg:SI 0 ax [651])
        (reg:SI 2 cx [651])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(insn 538 1271 1223 34 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [651])) ge2fitman_fmtext_o.cpp:337 90 {*movsi_internal}
     (nil))
(jump_insn 1223 538 1224 34 (set (pc)
        (label_ref 584)) 654 {jump}
     (nil)
 -> 584)
;;  succ:       36 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1224 1223 541)
;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 652 653 654 655 656 657 658 659 660 661 662 663 664 665
(code_label 541 1224 542 35 20 "" [1 uses])
(note 542 541 543 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 543 542 544 35 (set (reg:DI 1 dx [652])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 544 543 545 35 (set (reg:DI 0 ax [653])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 545 544 546 35 (parallel [
            (set (reg:DI 1 dx [orig:240 D.25521 ] [240])
                (plus:DI (reg:DI 1 dx [652])
                    (reg:DI 0 ax [653])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 header_size+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 baseline_set_size+0 S8 A64]))
        (nil)))
(insn 546 545 547 35 (set (reg:SI 0 ax [654])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [0 dataSizeChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:347 90 {*movsi_internal}
     (nil))
(insn 547 546 548 35 (parallel [
            (set (reg:SI 0 ax [orig:241 D.25517 ] [241])
                (mult:SI (reg:SI 0 ax [654])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 305 {*mulsi3_1}
     (nil))
(insn 548 547 549 35 (set (reg:DI 0 ax [orig:242 D.25521 ] [242])
        (sign_extend:DI (reg:SI 0 ax [orig:241 D.25517 ] [241]))) ge2fitman_fmtext_o.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 549 548 550 35 (parallel [
            (set (reg:DI 2 cx [orig:243 D.25521 ] [243])
                (plus:DI (reg:DI 1 dx [orig:240 D.25521 ] [240])
                    (reg:DI 0 ax [orig:242 D.25521 ] [242])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 218 {*adddi_1}
     (nil))
(insn 550 549 551 35 (set (reg:SI 0 ax [655])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:347 90 {*movsi_internal}
     (nil))
(insn 551 550 552 35 (set (reg:DI 0 ax [orig:244 D.25518 ] [244])
        (sign_extend:DI (reg:SI 0 ax [655]))) ge2fitman_fmtext_o.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 552 551 553 35 (parallel [
            (set (reg:DI 1 dx [orig:245 D.25518 ] [245])
                (ashift:DI (reg:DI 0 ax [orig:244 D.25518 ] [244])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 512 {*ashldi3_1}
     (nil))
(insn 553 552 554 35 (set (reg/f:DI 0 ax [656])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 554 553 555 35 (parallel [
            (set (reg/f:DI 0 ax [orig:246 D.25532 ] [246])
                (plus:DI (reg/f:DI 0 ax [656])
                    (reg:DI 1 dx [orig:245 D.25518 ] [245])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:347 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:245 D.25518 ] [245]))
        (nil)))
(insn 555 554 556 35 (set (reg/f:DI 0 ax [orig:247 D.25533 ] [247])
        (mem/f:DI (reg/f:DI 0 ax [orig:246 D.25532 ] [246]) [0 *_282+0 S8 A64])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 556 555 557 35 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:347 90 {*movsi_internal}
     (nil))
(insn 557 556 558 35 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:243 D.25521 ] [243])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(insn 558 557 559 35 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:247 D.25533 ] [247])) ge2fitman_fmtext_o.cpp:347 89 {*movdi_internal}
     (nil))
(call_insn 559 558 560 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7f7c387db948 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:347 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 560 559 561 35 (set (reg:SI 0 ax [657])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 561 560 562 35 (set (reg:DI 1 dx [orig:248 D.25518 ] [248])
        (sign_extend:DI (reg:SI 0 ax [657]))) ge2fitman_fmtext_o.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 562 561 563 35 (set (reg:DI 0 ax [658])
        (reg:DI 1 dx [orig:248 D.25518 ] [248])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 563 562 564 35 (parallel [
            (set (reg:DI 0 ax [658])
                (ashift:DI (reg:DI 0 ax [658])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 512 {*ashldi3_1}
     (nil))
(insn 564 563 565 35 (parallel [
            (set (reg:DI 0 ax [658])
                (plus:DI (reg:DI 0 ax [658])
                    (reg:DI 1 dx [orig:248 D.25518 ] [248])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:248 D.25518 ] [248])
            (const_int 5 [0x5]))
        (nil)))
(insn 565 564 566 35 (parallel [
            (set (reg:DI 0 ax [659])
                (ashift:DI (reg:DI 0 ax [658])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 512 {*ashldi3_1}
     (nil))
(insn 566 565 567 35 (set (reg:DI 0 ax [658])
        (reg:DI 0 ax [659])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 567 566 568 35 (set (reg:DI 1 dx [orig:249 D.25518 ] [249])
        (reg:DI 0 ax [658])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 568 567 569 35 (set (reg/f:DI 0 ax [660])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 569 568 570 35 (parallel [
            (set (reg/f:DI 0 ax [orig:250 D.25529 ] [250])
                (plus:DI (reg/f:DI 0 ax [660])
                    (reg:DI 1 dx [orig:249 D.25518 ] [249])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:249 D.25518 ] [249]))
        (nil)))
(insn 570 569 571 35 (set (reg:SI 2 cx [orig:251 D.25517 ] [251])
        (mem/j:SI (reg/f:DI 0 ax [orig:250 D.25529 ] [250]) [0 _287->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 571 570 572 35 (set (reg:SI 0 ax [661])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 572 571 573 35 (set (reg:DI 1 dx [orig:252 D.25518 ] [252])
        (sign_extend:DI (reg:SI 0 ax [661]))) ge2fitman_fmtext_o.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 573 572 574 35 (set (reg:DI 0 ax [662])
        (reg:DI 1 dx [orig:252 D.25518 ] [252])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 574 573 575 35 (parallel [
            (set (reg:DI 0 ax [662])
                (ashift:DI (reg:DI 0 ax [662])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 512 {*ashldi3_1}
     (nil))
(insn 575 574 576 35 (parallel [
            (set (reg:DI 0 ax [662])
                (plus:DI (reg:DI 0 ax [662])
                    (reg:DI 1 dx [orig:252 D.25518 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:252 D.25518 ] [252])
            (const_int 5 [0x5]))
        (nil)))
(insn 576 575 577 35 (parallel [
            (set (reg:DI 0 ax [663])
                (ashift:DI (reg:DI 0 ax [662])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 512 {*ashldi3_1}
     (nil))
(insn 577 576 578 35 (set (reg:DI 0 ax [662])
        (reg:DI 0 ax [663])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 578 577 579 35 (set (reg:DI 1 dx [orig:253 D.25518 ] [253])
        (reg:DI 0 ax [662])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 579 578 580 35 (set (reg/f:DI 0 ax [664])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 64 [0x40])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:360 89 {*movdi_internal}
     (nil))
(insn 580 579 581 35 (parallel [
            (set (reg/f:DI 0 ax [orig:254 D.25529 ] [254])
                (plus:DI (reg/f:DI 0 ax [664])
                    (reg:DI 1 dx [orig:253 D.25518 ] [253])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 48 [0x30])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:253 D.25518 ] [253]))
        (nil)))
(insn 581 580 582 35 (set (reg:SI 0 ax [orig:255 D.25517 ] [255])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:254 D.25529 ] [254])
                (const_int 4 [0x4])) [0 _291->num_unsup_sets+0 S4 A32])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 582 581 1273 35 (parallel [
            (set (reg:SI 2 cx [665])
                (minus:SI (reg:SI 2 cx [665])
                    (reg:SI 0 ax [orig:255 D.25517 ] [255])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:360 260 {*subsi_1}
     (nil))
(insn 1273 582 583 35 (set (reg:SI 0 ax [665])
        (reg:SI 2 cx [665])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
(insn 583 1273 584 35 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [665])) ge2fitman_fmtext_o.cpp:360 90 {*movsi_internal}
     (nil))
;;  succ:       36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;;              34 [100.0%] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 584 583 585 36 21 "" [1 uses])
(note 585 584 586 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 586 585 1175 36 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:364 90 {*movsi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;;              75 [100.0%] 
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 666
(code_label 1175 586 587 37 43 "" [1 uses])
(note 587 1175 588 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 588 587 589 37 (set (reg:SI 0 ax [666])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:364 90 {*movsi_internal}
     (nil))
(insn 589 588 590 37 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [666])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -76 [0xffffffffffffffb4])) [0 numSets+0 S4 A32]))) ge2fitman_fmtext_o.cpp:364 7 {*cmpsi_1}
     (nil))
(jump_insn 590 589 591 37 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1178)
            (pc))) ge2fitman_fmtext_o.cpp:364 612 {*jcc_1}
     (nil)
 -> 1178)
;;  succ:       76
;;              38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 256 257 258 259 260 667 668
(note 591 590 592 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 592 591 593 38 (set (reg:SI 0 ax [667])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:367 90 {*movsi_internal}
     (nil))
(insn 593 592 594 38 (set (reg:DI 0 ax [orig:256 D.25518 ] [256])
        (sign_extend:DI (reg:SI 0 ax [667]))) ge2fitman_fmtext_o.cpp:367 142 {*extendsidi2_rex64}
     (nil))
(insn 594 593 595 38 (parallel [
            (set (reg:DI 1 dx [orig:257 D.25518 ] [257])
                (ashift:DI (reg:DI 0 ax [orig:256 D.25518 ] [256])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:367 512 {*ashldi3_1}
     (nil))
(insn 595 594 596 38 (set (reg/f:DI 0 ax [668])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 596 595 597 38 (parallel [
            (set (reg/f:DI 0 ax [orig:258 D.25532 ] [258])
                (plus:DI (reg/f:DI 0 ax [668])
                    (reg:DI 1 dx [orig:257 D.25518 ] [257])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:367 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:257 D.25518 ] [257]))
        (nil)))
(insn 597 596 598 38 (set (reg/f:DI 0 ax [orig:259 D.25533 ] [259])
        (mem/f:DI (reg/f:DI 0 ax [orig:258 D.25532 ] [258]) [0 *_297+0 S8 A64])) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 598 597 599 38 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:259 D.25533 ] [259])) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(call_insn 599 598 600 38 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("ftell") [flags 0x41]  <function_decl 0x7f7c387dba20 ftell>) [0 ftell S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:367 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 600 599 601 38 (set (reg:DI 0 ax [orig:260 D.25521 ] [260])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 601 600 602 38 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:260 D.25521 ] [260])) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 602 601 603 38 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f7c3720ee10 *.LC12>)) ge2fitman_fmtext_o.cpp:367 89 {*movdi_internal}
     (nil))
(insn 603 602 604 38 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:367 93 {*movqi_internal}
     (nil))
(call_insn 604 603 605 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f7c3899a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:367 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 605 604 606 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:377 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 606 605 607 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 641)
            (pc))) ge2fitman_fmtext_o.cpp:377 612 {*jcc_1}
     (nil)
 -> 641)
;;  succ:       39 (FALLTHRU)
;;              40
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 669 670 671 672 673 674 675 676 677 678
(note 607 606 608 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 608 607 609 39 (set (reg:SI 0 ax [669])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:380 90 {*movsi_internal}
     (nil))
(insn 609 608 610 39 (set (reg:DI 0 ax [orig:261 D.25518 ] [261])
        (sign_extend:DI (reg:SI 0 ax [669]))) ge2fitman_fmtext_o.cpp:380 142 {*extendsidi2_rex64}
     (nil))
(insn 610 609 611 39 (parallel [
            (set (reg:DI 1 dx [orig:262 D.25518 ] [262])
                (ashift:DI (reg:DI 0 ax [orig:261 D.25518 ] [261])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 512 {*ashldi3_1}
     (nil))
(insn 611 610 612 39 (set (reg/f:DI 0 ax [670])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 612 611 613 39 (parallel [
            (set (reg/f:DI 0 ax [orig:263 D.25532 ] [263])
                (plus:DI (reg/f:DI 0 ax [670])
                    (reg:DI 1 dx [orig:262 D.25518 ] [262])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (reg/f:DI 16 argp) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:262 D.25518 ] [262]))
        (nil)))
(insn 613 612 614 39 (set (reg/f:DI 1 dx [orig:264 D.25533 ] [264])
        (mem/f:DI (reg/f:DI 0 ax [orig:263 D.25532 ] [263]) [0 *_305+0 S8 A64])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 614 613 615 39 (set (reg:SI 0 ax [671])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:380 90 {*movsi_internal}
     (nil))
(insn 615 614 1274 39 (set (reg:DI 0 ax [orig:265 D.25518 ] [265])
        (sign_extend:DI (reg:SI 0 ax [671]))) ge2fitman_fmtext_o.cpp:380 142 {*extendsidi2_rex64}
     (nil))
(insn 1274 615 616 39 (set (reg:DI 0 ax [orig:266 D.25518 ] [266])
        (reg:DI 0 ax [orig:265 D.25518 ] [265])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 616 1274 1275 39 (parallel [
            (set (reg:DI 0 ax [orig:266 D.25518 ] [266])
                (ashift:DI (reg:DI 0 ax [orig:266 D.25518 ] [266])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 512 {*ashldi3_1}
     (nil))
(insn 1275 616 617 39 (set (reg:DI 2 cx [orig:266 D.25518 ] [266])
        (reg:DI 0 ax [orig:266 D.25518 ] [266])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 617 1275 618 39 (set (reg/f:DI 0 ax [672])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 618 617 619 39 (parallel [
            (set (reg/f:DI 0 ax [orig:267 D.25520 ] [267])
                (plus:DI (reg/f:DI 0 ax [672])
                    (reg:DI 2 cx [orig:266 D.25518 ] [266])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:266 D.25518 ] [266]))
        (nil)))
(insn 619 618 620 39 (set (reg:DI 0 ax [orig:268 D.25521 ] [268])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:267 D.25520 ] [267])
                (const_int 16 [0x10])) [0 _309->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:380 89 {*movdi_internal}
     (nil))
(insn 620 619 621 39 (parallel [
            (set (reg:DI 0 ax [orig:269 D.25521 ] [269])
                (ashift:DI (reg:DI 0 ax [orig:268 D.25521 ] [268])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:380 512 {*ashldi3_1}
     (nil))
(insn 621 620 622 39 (set (reg:DI 5 di [orig:270 D.25518 ] [270])
        (reg:DI 0 ax [orig:269 D.25521 ] [269])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 622 621 623 39 (set (reg:SI 0 ax [673])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:379 90 {*movsi_internal}
     (nil))
(insn 623 622 1276 39 (set (reg:DI 0 ax [orig:271 D.25518 ] [271])
        (sign_extend:DI (reg:SI 0 ax [673]))) ge2fitman_fmtext_o.cpp:379 142 {*extendsidi2_rex64}
     (nil))
(insn 1276 623 624 39 (set (reg:DI 0 ax [orig:272 D.25518 ] [272])
        (reg:DI 0 ax [orig:271 D.25518 ] [271])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 624 1276 1277 39 (parallel [
            (set (reg:DI 0 ax [orig:272 D.25518 ] [272])
                (ashift:DI (reg:DI 0 ax [orig:272 D.25518 ] [272])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 512 {*ashldi3_1}
     (nil))
(insn 1277 624 625 39 (set (reg:DI 2 cx [orig:272 D.25518 ] [272])
        (reg:DI 0 ax [orig:272 D.25518 ] [272])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 625 1277 626 39 (set (reg/f:DI 0 ax [674])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 626 625 627 39 (parallel [
            (set (reg/f:DI 0 ax [orig:273 D.25520 ] [273])
                (plus:DI (reg/f:DI 0 ax [674])
                    (reg:DI 2 cx [orig:272 D.25518 ] [272])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:272 D.25518 ] [272]))
        (nil)))
(insn 627 626 1278 39 (set (reg:DI 0 ax [orig:274 D.25521 ] [274])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:273 D.25520 ] [273])
                (const_int 24 [0x18])) [0 _315->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 1278 627 628 39 (set (reg:DI 2 cx [675])
        (reg:DI 0 ax [orig:274 D.25521 ] [274])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 628 1278 629 39 (parallel [
            (set (reg:DI 2 cx [675])
                (lshiftrt:DI (reg:DI 2 cx [675])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 546 {*lshrdi3_1}
     (nil))
(insn 629 628 630 39 (parallel [
            (set (reg:DI 0 ax [676])
                (plus:DI (reg:DI 0 ax [orig:274 D.25521 ] [274])
                    (reg:DI 2 cx [675])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 218 {*adddi_1}
     (nil))
(insn 630 629 631 39 (parallel [
            (set (reg:DI 0 ax [677])
                (ashiftrt:DI (reg:DI 0 ax [676])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:379 547 {*ashrdi3_1}
     (nil))
(insn 631 630 632 39 (set (reg:DI 0 ax [orig:275 D.25521 ] [275])
        (reg:DI 0 ax [677])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 632 631 633 39 (set (reg:DI 4 si [orig:276 D.25518 ] [276])
        (reg:DI 0 ax [orig:275 D.25521 ] [275])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 633 632 634 39 (set (reg:DI 0 ax [678])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 634 633 635 39 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:264 D.25533 ] [264])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 635 634 637 39 (set (reg:DI 1 dx)
        (reg:DI 5 di [orig:270 D.25518 ] [270])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 637 635 638 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [678])) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(call_insn 638 637 639 39 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f7c387db510 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:379 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 639 638 640 39 (set (reg:DI 0 ax [orig:277 D.25518 ] [277])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:379 89 {*movdi_internal}
     (nil))
(insn 640 639 641 39 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 k+0 S4 A32])
        (reg:SI 0 ax [orig:277 D.25518 ] [277])) ge2fitman_fmtext_o.cpp:380 90 {*movsi_internal}
     (nil))
;;  succ:       40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38
;;              39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 278 279 280 281 282 283 679 680 681
(code_label 641 640 642 40 23 "" [1 uses])
(note 642 641 643 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 643 642 644 40 (set (reg:SI 0 ax [679])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 k+0 S4 A32])) ge2fitman_fmtext_o.cpp:383 90 {*movsi_internal}
     (nil))
(insn 644 643 645 40 (set (reg:DI 0 ax [orig:278 D.25521 ] [278])
        (sign_extend:DI (reg:SI 0 ax [679]))) ge2fitman_fmtext_o.cpp:383 142 {*extendsidi2_rex64}
     (nil))
(insn 645 644 646 40 (set (reg:SI 1 dx [680])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:383 90 {*movsi_internal}
     (nil))
(insn 646 645 1280 40 (set (reg:DI 1 dx [orig:279 D.25518 ] [279])
        (sign_extend:DI (reg:SI 1 dx [680]))) ge2fitman_fmtext_o.cpp:383 142 {*extendsidi2_rex64}
     (nil))
(insn 1280 646 647 40 (set (reg:DI 2 cx [orig:280 D.25518 ] [280])
        (reg:DI 1 dx [orig:279 D.25518 ] [279])) ge2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 647 1280 648 40 (parallel [
            (set (reg:DI 2 cx [orig:280 D.25518 ] [280])
                (ashift:DI (reg:DI 2 cx [orig:280 D.25518 ] [280])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:383 512 {*ashldi3_1}
     (nil))
(insn 648 647 649 40 (set (reg/f:DI 1 dx [681])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 649 648 650 40 (parallel [
            (set (reg/f:DI 1 dx [orig:281 D.25520 ] [281])
                (plus:DI (reg/f:DI 1 dx [681])
                    (reg:DI 2 cx [orig:280 D.25518 ] [280])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:383 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:280 D.25518 ] [280]))
        (nil)))
(insn 650 649 651 40 (set (reg:DI 1 dx [orig:282 D.25521 ] [282])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:281 D.25520 ] [281])
                (const_int 16 [0x10])) [0 _326->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:383 89 {*movdi_internal}
     (nil))
(insn 651 650 652 40 (parallel [
            (set (reg:DI 1 dx [orig:283 D.25521 ] [283])
                (ashift:DI (reg:DI 1 dx [orig:282 D.25521 ] [282])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:383 512 {*ashldi3_1}
     (nil))
(insn 652 651 653 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:278 D.25521 ] [278])
            (reg:DI 1 dx [orig:283 D.25521 ] [283]))) ge2fitman_fmtext_o.cpp:383 8 {*cmpdi_1}
     (nil))
(jump_insn 653 652 654 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 665)
            (pc))) ge2fitman_fmtext_o.cpp:383 612 {*jcc_1}
     (nil)
 -> 665)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 284 682 683 684 685
(note 654 653 655 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 655 654 656 41 (set (reg:SI 0 ax [683])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:384 90 {*movsi_internal}
     (nil))
(insn 656 655 1282 41 (set (reg:DI 0 ax [682])
        (sign_extend:DI (reg:SI 0 ax [683]))) ge2fitman_fmtext_o.cpp:384 142 {*extendsidi2_rex64}
     (nil))
(insn 1282 656 657 41 (set (reg:DI 0 ax [684])
        (reg:DI 0 ax [682])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(insn 657 1282 1283 41 (parallel [
            (set (reg:DI 0 ax [684])
                (ashift:DI (reg:DI 0 ax [684])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:384 512 {*ashldi3_1}
     (nil))
(insn 1283 657 658 41 (set (reg:DI 1 dx [684])
        (reg:DI 0 ax [684])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(insn 658 1283 659 41 (set (reg/f:DI 0 ax [685])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(insn 659 658 660 41 (parallel [
            (set (reg/f:DI 0 ax [orig:284 D.25534 ] [284])
                (plus:DI (reg/f:DI 0 ax [685])
                    (reg:DI 1 dx [684])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:384 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -104 [0xffffffffffffff98])) [0 file+0 S8 A64])
            (reg:DI 1 dx [684]))
        (nil)))
(insn 660 659 661 41 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:284 D.25534 ] [284])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(insn 661 660 662 41 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:384 89 {*movdi_internal}
     (nil))
(call_insn 662 661 1225 41 (call (mem:QI (symbol_ref:DI ("_Z7exit_06PP8_IO_FILEPc") [flags 0x41]  <function_decl 0x7f7c375505e8 exit_06>) [0 exit_06 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:384 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(jump_insn 1225 662 1226 41 (set (pc)
        (label_ref 708)) 654 {jump}
     (nil)
 -> 708)
;;  succ:       47 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1226 1225 665)
;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       40
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 665 1226 666 42 24 "" [1 uses])
(note 666 665 667 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 667 666 705 42 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:388 90 {*movsi_internal}
     (nil))
;;  succ:       43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;;              46 [100.0%] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 285 286 287 288 289 290 686 687 688
(code_label 705 667 668 43 27 "" [1 uses])
(note 668 705 669 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 669 668 670 43 (set (reg:SI 0 ax [686])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:388 90 {*movsi_internal}
     (nil))
(insn 670 669 671 43 (set (reg:DI 0 ax [orig:285 D.25521 ] [285])
        (sign_extend:DI (reg:SI 0 ax [686]))) ge2fitman_fmtext_o.cpp:388 142 {*extendsidi2_rex64}
     (nil))
(insn 671 670 672 43 (set (reg:SI 1 dx [687])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:388 90 {*movsi_internal}
     (nil))
(insn 672 671 1284 43 (set (reg:DI 1 dx [orig:286 D.25518 ] [286])
        (sign_extend:DI (reg:SI 1 dx [687]))) ge2fitman_fmtext_o.cpp:388 142 {*extendsidi2_rex64}
     (nil))
(insn 1284 672 673 43 (set (reg:DI 2 cx [orig:287 D.25518 ] [287])
        (reg:DI 1 dx [orig:286 D.25518 ] [286])) ge2fitman_fmtext_o.cpp:388 89 {*movdi_internal}
     (nil))
(insn 673 1284 674 43 (parallel [
            (set (reg:DI 2 cx [orig:287 D.25518 ] [287])
                (ashift:DI (reg:DI 2 cx [orig:287 D.25518 ] [287])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:388 512 {*ashldi3_1}
     (nil))
(insn 674 673 675 43 (set (reg/f:DI 1 dx [688])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:388 89 {*movdi_internal}
     (nil))
(insn 675 674 676 43 (parallel [
            (set (reg/f:DI 1 dx [orig:288 D.25520 ] [288])
                (plus:DI (reg/f:DI 1 dx [688])
                    (reg:DI 2 cx [orig:287 D.25518 ] [287])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:388 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:287 D.25518 ] [287]))
        (nil)))
(insn 676 675 677 43 (set (reg:DI 1 dx [orig:289 D.25521 ] [289])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:288 D.25520 ] [288])
                (const_int 16 [0x10])) [0 _335->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:388 89 {*movdi_internal}
     (nil))
(insn 677 676 678 43 (parallel [
            (set (reg:DI 1 dx [orig:290 D.25521 ] [290])
                (ashift:DI (reg:DI 1 dx [orig:289 D.25521 ] [289])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:388 512 {*ashldi3_1}
     (nil))
(insn 678 677 679 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:285 D.25521 ] [285])
            (reg:DI 1 dx [orig:290 D.25521 ] [290]))) ge2fitman_fmtext_o.cpp:388 8 {*cmpdi_1}
     (nil))
(jump_insn 679 678 680 43 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 708)
            (pc))) ge2fitman_fmtext_o.cpp:388 612 {*jcc_1}
     (nil)
 -> 708)
;;  succ:       47
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 680 679 681 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 681 680 682 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:390 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 682 681 683 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 702)
            (pc))) ge2fitman_fmtext_o.cpp:390 612 {*jcc_1}
     (nil)
 -> 702)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 291 292 293 294 295 296 297 298 299 300 301 302 689 690 691 692 693
(note 683 682 684 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 684 683 685 45 (set (reg:SI 0 ax [689])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 685 684 686 45 (set (reg:DI 0 ax [orig:291 D.25518 ] [291])
        (sign_extend:DI (reg:SI 0 ax [689]))) ge2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 686 685 687 45 (parallel [
            (set (reg:DI 1 dx [orig:292 D.25518 ] [292])
                (ashift:DI (reg:DI 0 ax [orig:291 D.25518 ] [291])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 512 {*ashldi3_1}
     (nil))
(insn 687 686 688 45 (set (reg/f:DI 0 ax [690])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 688 687 689 45 (parallel [
            (set (reg/f:DI 0 ax [orig:293 D.25524 ] [293])
                (plus:DI (reg/f:DI 0 ax [690])
                    (reg:DI 1 dx [orig:292 D.25518 ] [292])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:292 D.25518 ] [292]))
        (nil)))
(insn 689 688 690 45 (set (reg/f:DI 0 ax [orig:294 D.25535 ] [294])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:293 D.25524 ] [293]) [0 _340->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 690 689 691 45 (set (reg:SI 1 dx [691])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 691 690 692 45 (set (reg:DI 1 dx [orig:295 D.25518 ] [295])
        (sign_extend:DI (reg:SI 1 dx [691]))) ge2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 692 691 693 45 (parallel [
            (set (reg:DI 1 dx [orig:296 D.25518 ] [296])
                (ashift:DI (reg:DI 1 dx [orig:295 D.25518 ] [295])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 512 {*ashldi3_1}
     (nil))
(insn 693 692 694 45 (parallel [
            (set (reg/f:DI 1 dx [orig:297 D.25535 ] [297])
                (plus:DI (reg:DI 1 dx [orig:296 D.25518 ] [296])
                    (reg/f:DI 0 ax [orig:294 D.25535 ] [294])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 218 {*adddi_1}
     (nil))
(insn 694 693 695 45 (set (reg:SI 0 ax [692])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 695 694 696 45 (set (reg:DI 0 ax [orig:298 D.25518 ] [298])
        (sign_extend:DI (reg:SI 0 ax [692]))) ge2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 696 695 697 45 (parallel [
            (set (reg:DI 2 cx [orig:299 D.25518 ] [299])
                (ashift:DI (reg:DI 0 ax [orig:298 D.25518 ] [298])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 512 {*ashldi3_1}
     (nil))
(insn 697 696 698 45 (set (reg/f:DI 0 ax [693])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
(insn 698 697 699 45 (parallel [
            (set (reg/f:DI 0 ax [orig:300 D.25536 ] [300])
                (plus:DI (reg/f:DI 0 ax [693])
                    (reg:DI 2 cx [orig:299 D.25518 ] [299])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:393 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 2 cx [orig:299 D.25518 ] [299]))
        (nil)))
(insn 699 698 700 45 (set (reg:SI 0 ax [orig:301 D.25517 ] [301])
        (mem:SI (reg/f:DI 0 ax [orig:300 D.25536 ] [300]) [0 *_347+0 S4 A32])) ge2fitman_fmtext_o.cpp:393 90 {*movsi_internal}
     (nil))
(insn 700 699 701 45 (set (reg:DI 0 ax [orig:302 D.25521 ] [302])
        (sign_extend:DI (reg:SI 0 ax [orig:301 D.25517 ] [301]))) ge2fitman_fmtext_o.cpp:393 142 {*extendsidi2_rex64}
     (nil))
(insn 701 700 702 45 (set (mem:DI (reg/f:DI 1 dx [orig:297 D.25535 ] [297]) [0 *_344+0 S8 A64])
        (reg:DI 0 ax [orig:302 D.25521 ] [302])) ge2fitman_fmtext_o.cpp:393 89 {*movdi_internal}
     (nil))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 702 701 703 46 26 "" [1 uses])
(note 703 702 704 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 704 703 1227 46 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:388 217 {*addsi_1}
     (nil))
(jump_insn 1227 704 1228 46 (set (pc)
        (label_ref 705)) ge2fitman_fmtext_o.cpp:388 654 {jump}
     (nil)
 -> 705)
;;  succ:       43 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1228 1227 708)
;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       43
;;              41 [100.0%] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 708 1228 709 47 25 "" [2 uses])
(note 709 708 710 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 710 709 711 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 56 [0x38])) [0 swap_bytes+0 S4 A64])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:406 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 711 710 712 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 860)
            (pc))) ge2fitman_fmtext_o.cpp:406 612 {*jcc_1}
     (nil)
 -> 860)
;;  succ:       48 (FALLTHRU)
;;              58
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 712 711 713 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 713 712 857 48 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:407 90 {*movsi_internal}
     (nil))
;;  succ:       49 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;;              57 [100.0%] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 303 304 305 306 307 308 694 695 696
(code_label 857 713 714 49 33 "" [1 uses])
(note 714 857 715 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 715 714 716 49 (set (reg:SI 0 ax [694])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:407 90 {*movsi_internal}
     (nil))
(insn 716 715 717 49 (set (reg:DI 0 ax [orig:303 D.25521 ] [303])
        (sign_extend:DI (reg:SI 0 ax [694]))) ge2fitman_fmtext_o.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 717 716 718 49 (set (reg:SI 1 dx [695])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:407 90 {*movsi_internal}
     (nil))
(insn 718 717 1286 49 (set (reg:DI 1 dx [orig:304 D.25518 ] [304])
        (sign_extend:DI (reg:SI 1 dx [695]))) ge2fitman_fmtext_o.cpp:407 142 {*extendsidi2_rex64}
     (nil))
(insn 1286 718 719 49 (set (reg:DI 2 cx [orig:305 D.25518 ] [305])
        (reg:DI 1 dx [orig:304 D.25518 ] [304])) ge2fitman_fmtext_o.cpp:407 89 {*movdi_internal}
     (nil))
(insn 719 1286 720 49 (parallel [
            (set (reg:DI 2 cx [orig:305 D.25518 ] [305])
                (ashift:DI (reg:DI 2 cx [orig:305 D.25518 ] [305])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:407 512 {*ashldi3_1}
     (nil))
(insn 720 719 721 49 (set (reg/f:DI 1 dx [696])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:407 89 {*movdi_internal}
     (nil))
(insn 721 720 722 49 (parallel [
            (set (reg/f:DI 1 dx [orig:306 D.25520 ] [306])
                (plus:DI (reg/f:DI 1 dx [696])
                    (reg:DI 2 cx [orig:305 D.25518 ] [305])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:407 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:305 D.25518 ] [305]))
        (nil)))
(insn 722 721 723 49 (set (reg:DI 1 dx [orig:307 D.25521 ] [307])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:306 D.25520 ] [306])
                (const_int 16 [0x10])) [0 _356->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:407 89 {*movdi_internal}
     (nil))
(insn 723 722 724 49 (parallel [
            (set (reg:DI 1 dx [orig:308 D.25521 ] [308])
                (ashift:DI (reg:DI 1 dx [orig:307 D.25521 ] [307])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:407 512 {*ashldi3_1}
     (nil))
(insn 724 723 725 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:303 D.25521 ] [303])
            (reg:DI 1 dx [orig:308 D.25521 ] [308]))) ge2fitman_fmtext_o.cpp:407 8 {*cmpdi_1}
     (nil))
(jump_insn 725 724 726 49 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 860)
            (pc))) ge2fitman_fmtext_o.cpp:407 612 {*jcc_1}
     (nil)
 -> 860)
;;  succ:       58
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 309 310 311 312 313 314 697 698
(note 726 725 727 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 727 726 728 50 (set (reg:SI 0 ax [697])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:408 90 {*movsi_internal}
     (nil))
(insn 728 727 1288 50 (set (reg:DI 0 ax [orig:309 D.25518 ] [309])
        (sign_extend:DI (reg:SI 0 ax [697]))) ge2fitman_fmtext_o.cpp:408 142 {*extendsidi2_rex64}
     (nil))
(insn 1288 728 729 50 (set (reg:DI 0 ax [orig:310 D.25518 ] [310])
        (reg:DI 0 ax [orig:309 D.25518 ] [309])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 729 1288 1289 50 (parallel [
            (set (reg:DI 0 ax [orig:310 D.25518 ] [310])
                (ashift:DI (reg:DI 0 ax [orig:310 D.25518 ] [310])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:408 512 {*ashldi3_1}
     (nil))
(insn 1289 729 730 50 (set (reg:DI 1 dx [orig:310 D.25518 ] [310])
        (reg:DI 0 ax [orig:310 D.25518 ] [310])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 730 1289 731 50 (set (reg/f:DI 0 ax [698])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 731 730 732 50 (parallel [
            (set (reg/f:DI 0 ax [orig:311 D.25520 ] [311])
                (plus:DI (reg/f:DI 0 ax [698])
                    (reg:DI 1 dx [orig:310 D.25518 ] [310])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:408 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:310 D.25518 ] [310]))
        (nil)))
(insn 732 731 733 50 (set (reg:DI 0 ax [orig:312 D.25521 ] [312])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:311 D.25520 ] [311])
                (const_int 24 [0x18])) [0 _361->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 733 732 734 50 (set (reg:DI 0 ax [orig:313 D.25537 ] [313])
        (reg:DI 0 ax [orig:312 D.25521 ] [312])) ge2fitman_fmtext_o.cpp:408 89 {*movdi_internal}
     (nil))
(insn 734 733 735 50 (parallel [
            (set (reg:DI 0 ax [orig:314 D.25537 ] [314])
                (plus:DI (reg:DI 0 ax [orig:313 D.25537 ] [313])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:408 218 {*adddi_1}
     (nil))
(insn 735 734 736 50 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:314 D.25537 ] [314])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:408 8 {*cmpdi_1}
     (nil))
(jump_insn 736 735 737 50 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 754)
            (pc))) ge2fitman_fmtext_o.cpp:408 612 {*jcc_1}
     (nil)
 -> 754)
;;  succ:       51 (FALLTHRU)
;;              52
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 315 316 317 318 319 320 321 322 699 700 701
(note 737 736 738 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 738 737 739 51 (set (reg:SI 2 cx [orig:315 D.25517 ] [315])
        (const_int 2 [0x2])) ge2fitman_fmtext_o.cpp:409 90 {*movsi_internal}
     (nil))
(insn 739 738 740 51 (set (reg:SI 0 ax [699])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:409 90 {*movsi_internal}
     (nil))
(insn 740 739 741 51 (set (reg:DI 0 ax [orig:316 D.25518 ] [316])
        (sign_extend:DI (reg:SI 0 ax [699]))) ge2fitman_fmtext_o.cpp:409 142 {*extendsidi2_rex64}
     (nil))
(insn 741 740 742 51 (parallel [
            (set (reg:DI 1 dx [orig:317 D.25518 ] [317])
                (ashift:DI (reg:DI 0 ax [orig:316 D.25518 ] [316])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:409 512 {*ashldi3_1}
     (nil))
(insn 742 741 743 51 (set (reg/f:DI 0 ax [700])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 743 742 744 51 (parallel [
            (set (reg/f:DI 0 ax [orig:318 D.25524 ] [318])
                (plus:DI (reg/f:DI 0 ax [700])
                    (reg:DI 1 dx [orig:317 D.25518 ] [317])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:409 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:317 D.25518 ] [317]))
        (nil)))
(insn 744 743 745 51 (set (reg/f:DI 0 ax [orig:319 D.25538 ] [319])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:318 D.25524 ] [318]) [0 _368->sh+0 S8 A64])) ge2fitman_fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(insn 745 744 746 51 (set (reg:SI 1 dx [701])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:409 90 {*movsi_internal}
     (nil))
(insn 746 745 747 51 (set (reg:DI 1 dx [orig:320 D.25518 ] [320])
        (sign_extend:DI (reg:SI 1 dx [701]))) ge2fitman_fmtext_o.cpp:409 142 {*extendsidi2_rex64}
     (nil))
(insn 747 746 748 51 (parallel [
            (set (reg:DI 1 dx [orig:321 D.25518 ] [321])
                (ashift:DI (reg:DI 1 dx [orig:320 D.25518 ] [320])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:409 512 {*ashldi3_1}
     (nil))
(insn 748 747 749 51 (parallel [
            (set (reg/f:DI 0 ax [orig:322 D.25539 ] [322])
                (plus:DI (reg/f:DI 0 ax [orig:319 D.25538 ] [319])
                    (reg:DI 1 dx [orig:321 D.25518 ] [321])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:409 218 {*adddi_1}
     (nil))
(insn 749 748 750 51 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:315 D.25517 ] [315])) ge2fitman_fmtext_o.cpp:409 90 {*movsi_internal}
     (nil))
(insn 750 749 751 51 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:322 D.25539 ] [322])) ge2fitman_fmtext_o.cpp:409 89 {*movdi_internal}
     (nil))
(call_insn 751 750 1229 51 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7f7c3754b6c0 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:409 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 1229 751 1230 51 (set (pc)
        (label_ref 854)) 654 {jump}
     (nil)
 -> 854)
;;  succ:       57 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1230 1229 754)
;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 323 324 325 326 327 328 702 703
(code_label 754 1230 755 52 29 "" [1 uses])
(note 755 754 756 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 756 755 757 52 (set (reg:SI 0 ax [702])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:411 90 {*movsi_internal}
     (nil))
(insn 757 756 1290 52 (set (reg:DI 0 ax [orig:323 D.25518 ] [323])
        (sign_extend:DI (reg:SI 0 ax [702]))) ge2fitman_fmtext_o.cpp:411 142 {*extendsidi2_rex64}
     (nil))
(insn 1290 757 758 52 (set (reg:DI 0 ax [orig:324 D.25518 ] [324])
        (reg:DI 0 ax [orig:323 D.25518 ] [323])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 758 1290 1291 52 (parallel [
            (set (reg:DI 0 ax [orig:324 D.25518 ] [324])
                (ashift:DI (reg:DI 0 ax [orig:324 D.25518 ] [324])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:411 512 {*ashldi3_1}
     (nil))
(insn 1291 758 759 52 (set (reg:DI 1 dx [orig:324 D.25518 ] [324])
        (reg:DI 0 ax [orig:324 D.25518 ] [324])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 759 1291 760 52 (set (reg/f:DI 0 ax [703])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 760 759 761 52 (parallel [
            (set (reg/f:DI 0 ax [orig:325 D.25520 ] [325])
                (plus:DI (reg/f:DI 0 ax [703])
                    (reg:DI 1 dx [orig:324 D.25518 ] [324])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:411 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:324 D.25518 ] [324]))
        (nil)))
(insn 761 760 762 52 (set (reg:DI 0 ax [orig:326 D.25521 ] [326])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:325 D.25520 ] [325])
                (const_int 24 [0x18])) [0 _376->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 762 761 763 52 (set (reg:DI 0 ax [orig:327 D.25537 ] [327])
        (reg:DI 0 ax [orig:326 D.25521 ] [326])) ge2fitman_fmtext_o.cpp:411 89 {*movdi_internal}
     (nil))
(insn 763 762 764 52 (parallel [
            (set (reg:DI 0 ax [orig:328 D.25537 ] [328])
                (plus:DI (reg:DI 0 ax [orig:327 D.25537 ] [327])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:411 218 {*adddi_1}
     (nil))
(insn 764 763 765 52 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:328 D.25537 ] [328])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:411 8 {*cmpdi_1}
     (nil))
(jump_insn 765 764 766 52 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 796)
            (pc))) ge2fitman_fmtext_o.cpp:411 612 {*jcc_1}
     (nil)
 -> 796)
;;  succ:       53 (FALLTHRU)
;;              54
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 704 705 706 707 708 709 710
(note 766 765 767 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 767 766 768 53 (set (reg:SI 2 cx [orig:329 D.25517 ] [329])
        (const_int 4 [0x4])) ge2fitman_fmtext_o.cpp:412 90 {*movsi_internal}
     (nil))
(insn 768 767 769 53 (set (reg:SI 0 ax [704])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:412 90 {*movsi_internal}
     (nil))
(insn 769 768 770 53 (set (reg:DI 0 ax [orig:330 D.25518 ] [330])
        (sign_extend:DI (reg:SI 0 ax [704]))) ge2fitman_fmtext_o.cpp:412 142 {*extendsidi2_rex64}
     (nil))
(insn 770 769 771 53 (parallel [
            (set (reg:DI 1 dx [orig:331 D.25518 ] [331])
                (ashift:DI (reg:DI 0 ax [orig:330 D.25518 ] [330])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:412 512 {*ashldi3_1}
     (nil))
(insn 771 770 772 53 (set (reg/f:DI 0 ax [705])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(insn 772 771 773 53 (parallel [
            (set (reg/f:DI 0 ax [orig:332 D.25539 ] [332])
                (plus:DI (reg/f:DI 0 ax [705])
                    (reg:DI 1 dx [orig:331 D.25518 ] [331])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:412 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 1 dx [orig:331 D.25518 ] [331]))
        (nil)))
(insn 773 772 774 53 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:329 D.25517 ] [329])) ge2fitman_fmtext_o.cpp:412 90 {*movsi_internal}
     (nil))
(insn 774 773 775 53 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:332 D.25539 ] [332])) ge2fitman_fmtext_o.cpp:412 89 {*movdi_internal}
     (nil))
(call_insn 775 774 776 53 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7f7c3754b6c0 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:412 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 776 775 777 53 (set (reg:SI 0 ax [706])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:413 90 {*movsi_internal}
     (nil))
(insn 777 776 778 53 (set (reg:DI 0 ax [orig:333 D.25518 ] [333])
        (sign_extend:DI (reg:SI 0 ax [706]))) ge2fitman_fmtext_o.cpp:413 142 {*extendsidi2_rex64}
     (nil))
(insn 778 777 779 53 (parallel [
            (set (reg:DI 1 dx [orig:334 D.25518 ] [334])
                (ashift:DI (reg:DI 0 ax [orig:333 D.25518 ] [333])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 512 {*ashldi3_1}
     (nil))
(insn 779 778 780 53 (set (reg/f:DI 0 ax [707])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:413 89 {*movdi_internal}
     (nil))
(insn 780 779 781 53 (parallel [
            (set (reg/f:DI 0 ax [orig:335 D.25524 ] [335])
                (plus:DI (reg/f:DI 0 ax [707])
                    (reg:DI 1 dx [orig:334 D.25518 ] [334])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:334 D.25518 ] [334]))
        (nil)))
(insn 781 780 782 53 (set (reg/f:DI 0 ax [orig:336 D.25535 ] [336])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:335 D.25524 ] [335]) [0 _387->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:413 89 {*movdi_internal}
     (nil))
(insn 782 781 783 53 (set (reg:SI 1 dx [708])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:413 90 {*movsi_internal}
     (nil))
(insn 783 782 784 53 (set (reg:DI 1 dx [orig:337 D.25518 ] [337])
        (sign_extend:DI (reg:SI 1 dx [708]))) ge2fitman_fmtext_o.cpp:413 142 {*extendsidi2_rex64}
     (nil))
(insn 784 783 785 53 (parallel [
            (set (reg:DI 1 dx [orig:338 D.25518 ] [338])
                (ashift:DI (reg:DI 1 dx [orig:337 D.25518 ] [337])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 512 {*ashldi3_1}
     (nil))
(insn 785 784 786 53 (parallel [
            (set (reg/f:DI 1 dx [orig:339 D.25535 ] [339])
                (plus:DI (reg:DI 1 dx [orig:338 D.25518 ] [338])
                    (reg/f:DI 0 ax [orig:336 D.25535 ] [336])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 218 {*adddi_1}
     (nil))
(insn 786 785 787 53 (set (reg:SI 0 ax [709])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:413 90 {*movsi_internal}
     (nil))
(insn 787 786 788 53 (set (reg:DI 0 ax [orig:340 D.25518 ] [340])
        (sign_extend:DI (reg:SI 0 ax [709]))) ge2fitman_fmtext_o.cpp:413 142 {*extendsidi2_rex64}
     (nil))
(insn 788 787 789 53 (parallel [
            (set (reg:DI 2 cx [orig:341 D.25518 ] [341])
                (ashift:DI (reg:DI 0 ax [orig:340 D.25518 ] [340])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 512 {*ashldi3_1}
     (nil))
(insn 789 788 790 53 (set (reg/f:DI 0 ax [710])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:413 89 {*movdi_internal}
     (nil))
(insn 790 789 791 53 (parallel [
            (set (reg/f:DI 0 ax [orig:342 D.25536 ] [342])
                (plus:DI (reg/f:DI 0 ax [710])
                    (reg:DI 2 cx [orig:341 D.25518 ] [341])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:413 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 2 cx [orig:341 D.25518 ] [341]))
        (nil)))
(insn 791 790 792 53 (set (reg:SI 0 ax [orig:343 D.25517 ] [343])
        (mem:SI (reg/f:DI 0 ax [orig:342 D.25536 ] [342]) [0 *_394+0 S4 A32])) ge2fitman_fmtext_o.cpp:413 90 {*movsi_internal}
     (nil))
(insn 792 791 793 53 (set (reg:DI 0 ax [orig:344 D.25521 ] [344])
        (sign_extend:DI (reg:SI 0 ax [orig:343 D.25517 ] [343]))) ge2fitman_fmtext_o.cpp:413 142 {*extendsidi2_rex64}
     (nil))
(insn 793 792 1231 53 (set (mem:DI (reg/f:DI 1 dx [orig:339 D.25535 ] [339]) [0 *_391+0 S8 A64])
        (reg:DI 0 ax [orig:344 D.25521 ] [344])) ge2fitman_fmtext_o.cpp:413 89 {*movdi_internal}
     (nil))
(jump_insn 1231 793 1232 53 (set (pc)
        (label_ref 854)) 654 {jump}
     (nil)
 -> 854)
;;  succ:       57 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1232 1231 796)
;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       52
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 345 346 347 348 349 350 711 712
(code_label 796 1232 797 54 31 "" [1 uses])
(note 797 796 798 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 798 797 799 54 (set (reg:SI 0 ax [711])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:414 90 {*movsi_internal}
     (nil))
(insn 799 798 1292 54 (set (reg:DI 0 ax [orig:345 D.25518 ] [345])
        (sign_extend:DI (reg:SI 0 ax [711]))) ge2fitman_fmtext_o.cpp:414 142 {*extendsidi2_rex64}
     (nil))
(insn 1292 799 800 54 (set (reg:DI 0 ax [orig:346 D.25518 ] [346])
        (reg:DI 0 ax [orig:345 D.25518 ] [345])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 800 1292 1293 54 (parallel [
            (set (reg:DI 0 ax [orig:346 D.25518 ] [346])
                (ashift:DI (reg:DI 0 ax [orig:346 D.25518 ] [346])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:414 512 {*ashldi3_1}
     (nil))
(insn 1293 800 801 54 (set (reg:DI 1 dx [orig:346 D.25518 ] [346])
        (reg:DI 0 ax [orig:346 D.25518 ] [346])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 801 1293 802 54 (set (reg/f:DI 0 ax [712])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 802 801 803 54 (parallel [
            (set (reg/f:DI 0 ax [orig:347 D.25520 ] [347])
                (plus:DI (reg/f:DI 0 ax [712])
                    (reg:DI 1 dx [orig:346 D.25518 ] [346])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:414 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:346 D.25518 ] [346]))
        (nil)))
(insn 803 802 804 54 (set (reg:DI 0 ax [orig:348 D.25521 ] [348])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:347 D.25520 ] [347])
                (const_int 24 [0x18])) [0 _400->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 804 803 805 54 (set (reg:DI 0 ax [orig:349 D.25537 ] [349])
        (reg:DI 0 ax [orig:348 D.25521 ] [348])) ge2fitman_fmtext_o.cpp:414 89 {*movdi_internal}
     (nil))
(insn 805 804 806 54 (parallel [
            (set (reg:DI 0 ax [orig:350 D.25537 ] [350])
                (plus:DI (reg:DI 0 ax [orig:349 D.25537 ] [349])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:414 218 {*adddi_1}
     (nil))
(insn 806 805 807 54 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:350 D.25537 ] [350])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:414 8 {*cmpdi_1}
     (nil))
(jump_insn 807 806 808 54 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 838)
            (pc))) ge2fitman_fmtext_o.cpp:414 612 {*jcc_1}
     (nil)
 -> 838)
;;  succ:       55 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 713 714 715 716 717 718 719
(note 808 807 809 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 809 808 810 55 (set (reg:SI 2 cx [orig:351 D.25517 ] [351])
        (const_int 4 [0x4])) ge2fitman_fmtext_o.cpp:415 90 {*movsi_internal}
     (nil))
(insn 810 809 811 55 (set (reg:SI 0 ax [713])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:415 90 {*movsi_internal}
     (nil))
(insn 811 810 812 55 (set (reg:DI 0 ax [orig:352 D.25518 ] [352])
        (sign_extend:DI (reg:SI 0 ax [713]))) ge2fitman_fmtext_o.cpp:415 142 {*extendsidi2_rex64}
     (nil))
(insn 812 811 813 55 (parallel [
            (set (reg:DI 1 dx [orig:353 D.25518 ] [353])
                (ashift:DI (reg:DI 0 ax [orig:352 D.25518 ] [352])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:415 512 {*ashldi3_1}
     (nil))
(insn 813 812 814 55 (set (reg/f:DI 0 ax [714])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(insn 814 813 815 55 (parallel [
            (set (reg/f:DI 0 ax [orig:354 D.25539 ] [354])
                (plus:DI (reg/f:DI 0 ax [714])
                    (reg:DI 1 dx [orig:353 D.25518 ] [353])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:415 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 1 dx [orig:353 D.25518 ] [353]))
        (nil)))
(insn 815 814 816 55 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:351 D.25517 ] [351])) ge2fitman_fmtext_o.cpp:415 90 {*movsi_internal}
     (nil))
(insn 816 815 817 55 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:354 D.25539 ] [354])) ge2fitman_fmtext_o.cpp:415 89 {*movdi_internal}
     (nil))
(call_insn 817 816 818 55 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7f7c3754b6c0 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:415 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 818 817 819 55 (set (reg:SI 0 ax [715])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:416 90 {*movsi_internal}
     (nil))
(insn 819 818 820 55 (set (reg:DI 0 ax [orig:355 D.25518 ] [355])
        (sign_extend:DI (reg:SI 0 ax [715]))) ge2fitman_fmtext_o.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 820 819 821 55 (parallel [
            (set (reg:DI 1 dx [orig:356 D.25518 ] [356])
                (ashift:DI (reg:DI 0 ax [orig:355 D.25518 ] [355])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 512 {*ashldi3_1}
     (nil))
(insn 821 820 822 55 (set (reg/f:DI 0 ax [716])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:416 89 {*movdi_internal}
     (nil))
(insn 822 821 823 55 (parallel [
            (set (reg/f:DI 0 ax [orig:357 D.25524 ] [357])
                (plus:DI (reg/f:DI 0 ax [716])
                    (reg:DI 1 dx [orig:356 D.25518 ] [356])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:356 D.25518 ] [356]))
        (nil)))
(insn 823 822 824 55 (set (reg/f:DI 0 ax [orig:358 D.25535 ] [358])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:357 D.25524 ] [357]) [0 _411->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:416 89 {*movdi_internal}
     (nil))
(insn 824 823 825 55 (set (reg:SI 1 dx [717])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:416 90 {*movsi_internal}
     (nil))
(insn 825 824 826 55 (set (reg:DI 1 dx [orig:359 D.25518 ] [359])
        (sign_extend:DI (reg:SI 1 dx [717]))) ge2fitman_fmtext_o.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 826 825 827 55 (parallel [
            (set (reg:DI 1 dx [orig:360 D.25518 ] [360])
                (ashift:DI (reg:DI 1 dx [orig:359 D.25518 ] [359])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 512 {*ashldi3_1}
     (nil))
(insn 827 826 828 55 (parallel [
            (set (reg/f:DI 1 dx [orig:361 D.25535 ] [361])
                (plus:DI (reg:DI 1 dx [orig:360 D.25518 ] [360])
                    (reg/f:DI 0 ax [orig:358 D.25535 ] [358])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 218 {*adddi_1}
     (nil))
(insn 828 827 829 55 (set (reg:SI 0 ax [718])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:416 90 {*movsi_internal}
     (nil))
(insn 829 828 830 55 (set (reg:DI 0 ax [orig:362 D.25518 ] [362])
        (sign_extend:DI (reg:SI 0 ax [718]))) ge2fitman_fmtext_o.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 830 829 831 55 (parallel [
            (set (reg:DI 2 cx [orig:363 D.25518 ] [363])
                (ashift:DI (reg:DI 0 ax [orig:362 D.25518 ] [362])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 512 {*ashldi3_1}
     (nil))
(insn 831 830 832 55 (set (reg/f:DI 0 ax [719])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:416 89 {*movdi_internal}
     (nil))
(insn 832 831 833 55 (parallel [
            (set (reg/f:DI 0 ax [orig:364 D.25536 ] [364])
                (plus:DI (reg/f:DI 0 ax [719])
                    (reg:DI 2 cx [orig:363 D.25518 ] [363])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:416 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 2 cx [orig:363 D.25518 ] [363]))
        (nil)))
(insn 833 832 834 55 (set (reg:SI 0 ax [orig:365 D.25517 ] [365])
        (mem:SI (reg/f:DI 0 ax [orig:364 D.25536 ] [364]) [0 *_418+0 S4 A32])) ge2fitman_fmtext_o.cpp:416 90 {*movsi_internal}
     (nil))
(insn 834 833 835 55 (set (reg:DI 0 ax [orig:366 D.25521 ] [366])
        (sign_extend:DI (reg:SI 0 ax [orig:365 D.25517 ] [365]))) ge2fitman_fmtext_o.cpp:416 142 {*extendsidi2_rex64}
     (nil))
(insn 835 834 1233 55 (set (mem:DI (reg/f:DI 1 dx [orig:361 D.25535 ] [361]) [0 *_415+0 S8 A64])
        (reg:DI 0 ax [orig:366 D.25521 ] [366])) ge2fitman_fmtext_o.cpp:416 89 {*movdi_internal}
     (nil))
(jump_insn 1233 835 1234 55 (set (pc)
        (label_ref 854)) 654 {jump}
     (nil)
 -> 854)
;;  succ:       57 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1234 1233 838)
;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 367 368 369 370 371 372 373 374 720 721 722
(code_label 838 1234 839 56 32 "" [1 uses])
(note 839 838 840 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 840 839 841 56 (set (reg:SI 2 cx [orig:367 D.25517 ] [367])
        (const_int 8 [0x8])) ge2fitman_fmtext_o.cpp:418 90 {*movsi_internal}
     (nil))
(insn 841 840 842 56 (set (reg:SI 0 ax [720])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:418 90 {*movsi_internal}
     (nil))
(insn 842 841 843 56 (set (reg:DI 0 ax [orig:368 D.25518 ] [368])
        (sign_extend:DI (reg:SI 0 ax [720]))) ge2fitman_fmtext_o.cpp:418 142 {*extendsidi2_rex64}
     (nil))
(insn 843 842 844 56 (parallel [
            (set (reg:DI 1 dx [orig:369 D.25518 ] [369])
                (ashift:DI (reg:DI 0 ax [orig:368 D.25518 ] [368])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:418 512 {*ashldi3_1}
     (nil))
(insn 844 843 845 56 (set (reg/f:DI 0 ax [721])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 845 844 846 56 (parallel [
            (set (reg/f:DI 0 ax [orig:370 D.25524 ] [370])
                (plus:DI (reg/f:DI 0 ax [721])
                    (reg:DI 1 dx [orig:369 D.25518 ] [369])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:418 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:369 D.25518 ] [369]))
        (nil)))
(insn 846 845 847 56 (set (reg/f:DI 0 ax [orig:371 D.25535 ] [371])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:370 D.25524 ] [370]) [0 _425->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(insn 847 846 848 56 (set (reg:SI 1 dx [722])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:418 90 {*movsi_internal}
     (nil))
(insn 848 847 849 56 (set (reg:DI 1 dx [orig:372 D.25518 ] [372])
        (sign_extend:DI (reg:SI 1 dx [722]))) ge2fitman_fmtext_o.cpp:418 142 {*extendsidi2_rex64}
     (nil))
(insn 849 848 850 56 (parallel [
            (set (reg:DI 1 dx [orig:373 D.25518 ] [373])
                (ashift:DI (reg:DI 1 dx [orig:372 D.25518 ] [372])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:418 512 {*ashldi3_1}
     (nil))
(insn 850 849 851 56 (parallel [
            (set (reg/f:DI 0 ax [orig:374 D.25539 ] [374])
                (plus:DI (reg/f:DI 0 ax [orig:371 D.25535 ] [371])
                    (reg:DI 1 dx [orig:373 D.25518 ] [373])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:418 218 {*adddi_1}
     (nil))
(insn 851 850 852 56 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:367 D.25517 ] [367])) ge2fitman_fmtext_o.cpp:418 90 {*movsi_internal}
     (nil))
(insn 852 851 853 56 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:374 D.25539 ] [374])) ge2fitman_fmtext_o.cpp:418 89 {*movdi_internal}
     (nil))
(call_insn 853 852 854 56 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7f7c3754b6c0 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:418 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       57 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;;              51 [100.0%] 
;;              53 [100.0%] 
;;              55 [100.0%] 
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 854 853 855 57 30 "" [3 uses])
(note 855 854 856 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 856 855 1235 57 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:407 217 {*addsi_1}
     (nil))
(jump_insn 1235 856 1236 57 (set (pc)
        (label_ref 857)) ge2fitman_fmtext_o.cpp:407 654 {jump}
     (nil)
 -> 857)
;;  succ:       49 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1236 1235 860)
;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       47
;;              49
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 375 376 377 378 379 380 381 382 383 384 385 723 724 725 726 727 728 729
(code_label 860 1236 861 58 28 "" [2 uses])
(note 861 860 862 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 862 861 863 58 (set (reg:SI 0 ax [723])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:429 90 {*movsi_internal}
     (nil))
(insn 863 862 1294 58 (set (reg:DI 0 ax [orig:375 D.25518 ] [375])
        (sign_extend:DI (reg:SI 0 ax [723]))) ge2fitman_fmtext_o.cpp:429 142 {*extendsidi2_rex64}
     (nil))
(insn 1294 863 864 58 (set (reg:DI 0 ax [orig:376 D.25518 ] [376])
        (reg:DI 0 ax [orig:375 D.25518 ] [375])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 864 1294 1295 58 (parallel [
            (set (reg:DI 0 ax [orig:376 D.25518 ] [376])
                (ashift:DI (reg:DI 0 ax [orig:376 D.25518 ] [376])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 512 {*ashldi3_1}
     (nil))
(insn 1295 864 865 58 (set (reg:DI 1 dx [orig:376 D.25518 ] [376])
        (reg:DI 0 ax [orig:376 D.25518 ] [376])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 865 1295 866 58 (set (reg/f:DI 0 ax [724])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 866 865 867 58 (parallel [
            (set (reg/f:DI 0 ax [orig:377 D.25520 ] [377])
                (plus:DI (reg/f:DI 0 ax [724])
                    (reg:DI 1 dx [orig:376 D.25518 ] [376])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:376 D.25518 ] [376]))
        (nil)))
(insn 867 866 1296 58 (set (reg:DI 0 ax [orig:378 D.25521 ] [378])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:377 D.25520 ] [377])
                (const_int 24 [0x18])) [0 _434->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 1296 867 868 58 (set (reg:DI 1 dx [725])
        (reg:DI 0 ax [orig:378 D.25521 ] [378])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 868 1296 869 58 (parallel [
            (set (reg:DI 1 dx [725])
                (lshiftrt:DI (reg:DI 1 dx [725])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 546 {*lshrdi3_1}
     (nil))
(insn 869 868 870 58 (parallel [
            (set (reg:DI 0 ax [726])
                (plus:DI (reg:DI 0 ax [orig:378 D.25521 ] [378])
                    (reg:DI 1 dx [725])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 218 {*adddi_1}
     (nil))
(insn 870 869 871 58 (parallel [
            (set (reg:DI 0 ax [727])
                (ashiftrt:DI (reg:DI 0 ax [726])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:429 547 {*ashrdi3_1}
     (nil))
(insn 871 870 872 58 (set (reg:DI 0 ax [orig:379 D.25521 ] [379])
        (reg:DI 0 ax [727])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 872 871 873 58 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:379 D.25521 ] [379])) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 873 872 874 58 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f7c3720eea0 *.LC13>)) ge2fitman_fmtext_o.cpp:429 89 {*movdi_internal}
     (nil))
(insn 874 873 875 58 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:429 93 {*movqi_internal}
     (nil))
(call_insn 875 874 876 58 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f7c3899a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:429 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 876 875 877 58 (set (reg:SI 0 ax [728])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:433 90 {*movsi_internal}
     (nil))
(insn 877 876 1298 58 (set (reg:DI 0 ax [orig:380 D.25518 ] [380])
        (sign_extend:DI (reg:SI 0 ax [728]))) ge2fitman_fmtext_o.cpp:433 142 {*extendsidi2_rex64}
     (nil))
(insn 1298 877 878 58 (set (reg:DI 0 ax [orig:381 D.25518 ] [381])
        (reg:DI 0 ax [orig:380 D.25518 ] [380])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 878 1298 1299 58 (parallel [
            (set (reg:DI 0 ax [orig:381 D.25518 ] [381])
                (ashift:DI (reg:DI 0 ax [orig:381 D.25518 ] [381])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:433 512 {*ashldi3_1}
     (nil))
(insn 1299 878 879 58 (set (reg:DI 1 dx [orig:381 D.25518 ] [381])
        (reg:DI 0 ax [orig:381 D.25518 ] [381])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 879 1299 880 58 (set (reg/f:DI 0 ax [729])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 880 879 881 58 (parallel [
            (set (reg/f:DI 0 ax [orig:382 D.25520 ] [382])
                (plus:DI (reg/f:DI 0 ax [729])
                    (reg:DI 1 dx [orig:381 D.25518 ] [381])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:433 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:381 D.25518 ] [381]))
        (nil)))
(insn 881 880 882 58 (set (reg:DI 0 ax [orig:383 D.25521 ] [383])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:382 D.25520 ] [382])
                (const_int 24 [0x18])) [0 _440->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 882 881 883 58 (set (reg:DI 0 ax [orig:384 D.25537 ] [384])
        (reg:DI 0 ax [orig:383 D.25521 ] [383])) ge2fitman_fmtext_o.cpp:433 89 {*movdi_internal}
     (nil))
(insn 883 882 884 58 (parallel [
            (set (reg:DI 0 ax [orig:385 D.25537 ] [385])
                (plus:DI (reg:DI 0 ax [orig:384 D.25537 ] [384])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:433 218 {*adddi_1}
     (nil))
(insn 884 883 885 58 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:385 D.25537 ] [385])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:433 8 {*cmpdi_1}
     (nil))
(jump_insn 885 884 886 58 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 929)
            (pc))) ge2fitman_fmtext_o.cpp:433 612 {*jcc_1}
     (nil)
 -> 929)
;;  succ:       59 (FALLTHRU)
;;              62
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 386 387 388 389 390 391 392 730 731
(note 886 885 887 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 887 886 888 59 (set (reg:SI 0 ax [730])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:434 90 {*movsi_internal}
     (nil))
(insn 888 887 1300 59 (set (reg:DI 0 ax [orig:386 D.25518 ] [386])
        (sign_extend:DI (reg:SI 0 ax [730]))) ge2fitman_fmtext_o.cpp:434 142 {*extendsidi2_rex64}
     (nil))
(insn 1300 888 889 59 (set (reg:DI 0 ax [orig:387 D.25518 ] [387])
        (reg:DI 0 ax [orig:386 D.25518 ] [386])) ge2fitman_fmtext_o.cpp:434 89 {*movdi_internal}
     (nil))
(insn 889 1300 1301 59 (parallel [
            (set (reg:DI 0 ax [orig:387 D.25518 ] [387])
                (ashift:DI (reg:DI 0 ax [orig:387 D.25518 ] [387])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 512 {*ashldi3_1}
     (nil))
(insn 1301 889 890 59 (set (reg:DI 1 dx [orig:387 D.25518 ] [387])
        (reg:DI 0 ax [orig:387 D.25518 ] [387])) ge2fitman_fmtext_o.cpp:434 89 {*movdi_internal}
     (nil))
(insn 890 1301 891 59 (set (reg/f:DI 0 ax [731])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:434 89 {*movdi_internal}
     (nil))
(insn 891 890 892 59 (parallel [
            (set (reg/f:DI 0 ax [orig:388 D.25520 ] [388])
                (plus:DI (reg/f:DI 0 ax [731])
                    (reg:DI 1 dx [orig:387 D.25518 ] [387])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:387 D.25518 ] [387]))
        (nil)))
(insn 892 891 893 59 (set (reg:DI 0 ax [orig:389 D.25521 ] [389])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:388 D.25520 ] [388])
                (const_int 16 [0x10])) [0 _446->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:434 89 {*movdi_internal}
     (nil))
(insn 893 892 894 59 (set (reg:SI 0 ax [orig:390 D.25530 ] [390])
        (reg:SI 0 ax [orig:389 D.25521 ] [389])) ge2fitman_fmtext_o.cpp:434 90 {*movsi_internal}
     (nil))
(insn 894 893 895 59 (parallel [
            (set (reg:SI 0 ax [orig:391 D.25530 ] [391])
                (ashift:SI (reg:SI 0 ax [orig:390 D.25530 ] [390])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 511 {*ashlsi3_1}
     (nil))
(insn 895 894 896 59 (parallel [
            (set (reg:SI 0 ax [orig:392 D.25530 ] [392])
                (plus:SI (reg:SI 0 ax [orig:391 D.25530 ] [391])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 217 {*addsi_1}
     (nil))
(insn 896 895 926 59 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (reg:SI 0 ax [orig:392 D.25530 ] [392])) ge2fitman_fmtext_o.cpp:434 90 {*movsi_internal}
     (nil))
;;  succ:       60 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       59 (FALLTHRU)
;;              61 [100.0%] 
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 926 896 897 60 36 "" [1 uses])
(note 897 926 898 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 898 897 899 60 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:434 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 899 898 900 60 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 1036)
            (pc))) ge2fitman_fmtext_o.cpp:434 612 {*jcc_1}
     (nil)
 -> 1036)
;;  succ:       70
;;              61 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 732 733 734 735 736 737 738
(note 900 899 901 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 901 900 902 61 (set (reg:SI 0 ax [732])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:435 90 {*movsi_internal}
     (nil))
(insn 902 901 903 61 (set (reg:DI 0 ax [orig:393 D.25518 ] [393])
        (sign_extend:DI (reg:SI 0 ax [732]))) ge2fitman_fmtext_o.cpp:435 142 {*extendsidi2_rex64}
     (nil))
(insn 903 902 904 61 (parallel [
            (set (reg:DI 1 dx [orig:394 D.25518 ] [394])
                (ashift:DI (reg:DI 0 ax [orig:393 D.25518 ] [393])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 512 {*ashldi3_1}
     (nil))
(insn 904 903 905 61 (set (reg/f:DI 0 ax [733])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:435 89 {*movdi_internal}
     (nil))
(insn 905 904 906 61 (parallel [
            (set (reg/f:DI 0 ax [orig:395 D.25524 ] [395])
                (plus:DI (reg/f:DI 0 ax [733])
                    (reg:DI 1 dx [orig:394 D.25518 ] [394])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:394 D.25518 ] [394]))
        (nil)))
(insn 906 905 907 61 (set (reg/f:DI 0 ax [orig:396 D.25526 ] [396])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:395 D.25524 ] [395]) [0 _454->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:435 89 {*movdi_internal}
     (nil))
(insn 907 906 908 61 (set (reg:SI 1 dx [734])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:435 90 {*movsi_internal}
     (nil))
(insn 908 907 909 61 (set (reg:DI 1 dx [orig:397 D.25518 ] [397])
        (sign_extend:DI (reg:SI 1 dx [734]))) ge2fitman_fmtext_o.cpp:435 142 {*extendsidi2_rex64}
     (nil))
(insn 909 908 910 61 (parallel [
            (set (reg:DI 1 dx [orig:398 D.25518 ] [398])
                (ashift:DI (reg:DI 1 dx [orig:397 D.25518 ] [397])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 512 {*ashldi3_1}
     (nil))
(insn 910 909 911 61 (parallel [
            (set (reg/f:DI 0 ax [orig:399 D.25526 ] [399])
                (plus:DI (reg/f:DI 0 ax [orig:396 D.25526 ] [396])
                    (reg:DI 1 dx [orig:398 D.25518 ] [398])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 218 {*adddi_1}
     (nil))
(insn 911 910 912 61 (set (reg:SI 1 dx [735])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:435 90 {*movsi_internal}
     (nil))
(insn 912 911 913 61 (set (reg:DI 1 dx [orig:400 D.25518 ] [400])
        (sign_extend:DI (reg:SI 1 dx [735]))) ge2fitman_fmtext_o.cpp:435 142 {*extendsidi2_rex64}
     (nil))
(insn 913 912 914 61 (parallel [
            (set (reg:DI 2 cx [orig:401 D.25518 ] [401])
                (ashift:DI (reg:DI 1 dx [orig:400 D.25518 ] [400])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 512 {*ashldi3_1}
     (nil))
(insn 914 913 915 61 (set (reg/f:DI 1 dx [736])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:435 89 {*movdi_internal}
     (nil))
(insn 915 914 916 61 (parallel [
            (set (reg/f:DI 1 dx [orig:402 D.25524 ] [402])
                (plus:DI (reg/f:DI 1 dx [736])
                    (reg:DI 2 cx [orig:401 D.25518 ] [401])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:401 D.25518 ] [401]))
        (nil)))
(insn 916 915 917 61 (set (reg/f:DI 1 dx [orig:403 D.25538 ] [403])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:402 D.25524 ] [402]) [0 _461->sh+0 S8 A64])) ge2fitman_fmtext_o.cpp:435 89 {*movdi_internal}
     (nil))
(insn 917 916 918 61 (set (reg:SI 2 cx [737])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:435 90 {*movsi_internal}
     (nil))
(insn 918 917 919 61 (set (reg:DI 2 cx [orig:404 D.25518 ] [404])
        (sign_extend:DI (reg:SI 2 cx [737]))) ge2fitman_fmtext_o.cpp:435 142 {*extendsidi2_rex64}
     (nil))
(insn 919 918 920 61 (parallel [
            (set (reg:DI 2 cx [orig:405 D.25518 ] [405])
                (ashift:DI (reg:DI 2 cx [orig:404 D.25518 ] [404])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 512 {*ashldi3_1}
     (nil))
(insn 920 919 921 61 (parallel [
            (set (reg/f:DI 1 dx [orig:406 D.25538 ] [406])
                (plus:DI (reg/f:DI 1 dx [orig:403 D.25538 ] [403])
                    (reg:DI 2 cx [orig:405 D.25518 ] [405])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:435 218 {*adddi_1}
     (nil))
(insn 921 920 922 61 (set (reg:HI 1 dx [orig:407 D.25540 ] [407])
        (mem:HI (reg/f:DI 1 dx [orig:406 D.25538 ] [406]) [0 *_465+0 S2 A16])) ge2fitman_fmtext_o.cpp:435 92 {*movhi_internal}
     (nil))
(insn 922 921 923 61 (set (reg:SI 1 dx [738])
        (sign_extend:SI (reg:HI 1 dx [orig:407 D.25540 ] [407]))) ge2fitman_fmtext_o.cpp:435 146 {extendhisi2}
     (nil))
(insn 923 922 924 61 (set (reg:SF 21 xmm0 [orig:408 D.25541 ] [408])
        (float:SF (reg:SI 1 dx [738]))) ge2fitman_fmtext_o.cpp:435 199 {*floatsisf2_sse}
     (nil))
(insn 924 923 925 61 (set (mem:SF (reg/f:DI 0 ax [orig:399 D.25526 ] [399]) [0 *_458+0 S4 A32])
        (reg:SF 21 xmm0 [orig:408 D.25541 ] [408])) ge2fitman_fmtext_o.cpp:435 129 {*movsf_internal}
     (nil))
(insn 925 924 1237 61 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:434 217 {*addsi_1}
     (nil))
(jump_insn 1237 925 1238 61 (set (pc)
        (label_ref 926)) ge2fitman_fmtext_o.cpp:434 654 {jump}
     (nil)
 -> 926)
;;  succ:       60 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1238 1237 929)
;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       58
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 409 410 411 412 413 414 739 740
(code_label 929 1238 930 62 34 "" [1 uses])
(note 930 929 931 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 931 930 932 62 (set (reg:SI 0 ax [739])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:437 90 {*movsi_internal}
     (nil))
(insn 932 931 1302 62 (set (reg:DI 0 ax [orig:409 D.25518 ] [409])
        (sign_extend:DI (reg:SI 0 ax [739]))) ge2fitman_fmtext_o.cpp:437 142 {*extendsidi2_rex64}
     (nil))
(insn 1302 932 933 62 (set (reg:DI 0 ax [orig:410 D.25518 ] [410])
        (reg:DI 0 ax [orig:409 D.25518 ] [409])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 933 1302 1303 62 (parallel [
            (set (reg:DI 0 ax [orig:410 D.25518 ] [410])
                (ashift:DI (reg:DI 0 ax [orig:410 D.25518 ] [410])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:437 512 {*ashldi3_1}
     (nil))
(insn 1303 933 934 62 (set (reg:DI 1 dx [orig:410 D.25518 ] [410])
        (reg:DI 0 ax [orig:410 D.25518 ] [410])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 934 1303 935 62 (set (reg/f:DI 0 ax [740])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 935 934 936 62 (parallel [
            (set (reg/f:DI 0 ax [orig:411 D.25520 ] [411])
                (plus:DI (reg/f:DI 0 ax [740])
                    (reg:DI 1 dx [orig:410 D.25518 ] [410])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:437 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:410 D.25518 ] [410]))
        (nil)))
(insn 936 935 937 62 (set (reg:DI 0 ax [orig:412 D.25521 ] [412])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:411 D.25520 ] [411])
                (const_int 24 [0x18])) [0 _472->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 937 936 938 62 (set (reg:DI 0 ax [orig:413 D.25537 ] [413])
        (reg:DI 0 ax [orig:412 D.25521 ] [412])) ge2fitman_fmtext_o.cpp:437 89 {*movdi_internal}
     (nil))
(insn 938 937 939 62 (parallel [
            (set (reg:DI 0 ax [orig:414 D.25537 ] [414])
                (plus:DI (reg:DI 0 ax [orig:413 D.25537 ] [413])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:437 218 {*adddi_1}
     (nil))
(insn 939 938 940 62 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:414 D.25537 ] [414])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:437 8 {*cmpdi_1}
     (nil))
(jump_insn 940 939 941 62 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 985)
            (pc))) ge2fitman_fmtext_o.cpp:437 612 {*jcc_1}
     (nil)
 -> 985)
;;  succ:       63 (FALLTHRU)
;;              66
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62 (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 941 940 942 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 942 941 982 63 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
;;  succ:       64 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;;              65 [100.0%] 
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 415 416 417 418 419 420 741 742 743
(code_label 982 942 943 64 38 "" [1 uses])
(note 943 982 944 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 944 943 945 64 (set (reg:SI 0 ax [741])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
(insn 945 944 946 64 (set (reg:DI 0 ax [orig:415 D.25521 ] [415])
        (sign_extend:DI (reg:SI 0 ax [741]))) ge2fitman_fmtext_o.cpp:438 142 {*extendsidi2_rex64}
     (nil))
(insn 946 945 947 64 (set (reg:SI 1 dx [742])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:438 90 {*movsi_internal}
     (nil))
(insn 947 946 1304 64 (set (reg:DI 1 dx [orig:416 D.25518 ] [416])
        (sign_extend:DI (reg:SI 1 dx [742]))) ge2fitman_fmtext_o.cpp:438 142 {*extendsidi2_rex64}
     (nil))
(insn 1304 947 948 64 (set (reg:DI 2 cx [orig:417 D.25518 ] [417])
        (reg:DI 1 dx [orig:416 D.25518 ] [416])) ge2fitman_fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 948 1304 949 64 (parallel [
            (set (reg:DI 2 cx [orig:417 D.25518 ] [417])
                (ashift:DI (reg:DI 2 cx [orig:417 D.25518 ] [417])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:438 512 {*ashldi3_1}
     (nil))
(insn 949 948 950 64 (set (reg/f:DI 1 dx [743])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 950 949 951 64 (parallel [
            (set (reg/f:DI 1 dx [orig:418 D.25520 ] [418])
                (plus:DI (reg/f:DI 1 dx [743])
                    (reg:DI 2 cx [orig:417 D.25518 ] [417])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:438 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:417 D.25518 ] [417]))
        (nil)))
(insn 951 950 952 64 (set (reg:DI 1 dx [orig:419 D.25521 ] [419])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:418 D.25520 ] [418])
                (const_int 16 [0x10])) [0 _480->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:438 89 {*movdi_internal}
     (nil))
(insn 952 951 953 64 (parallel [
            (set (reg:DI 1 dx [orig:420 D.25521 ] [420])
                (ashift:DI (reg:DI 1 dx [orig:419 D.25521 ] [419])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:438 512 {*ashldi3_1}
     (nil))
(insn 953 952 954 64 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:415 D.25521 ] [415])
            (reg:DI 1 dx [orig:420 D.25521 ] [420]))) ge2fitman_fmtext_o.cpp:438 8 {*cmpdi_1}
     (nil))
(jump_insn 954 953 955 64 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1036)
            (pc))) ge2fitman_fmtext_o.cpp:438 612 {*jcc_1}
     (nil)
 -> 1036)
;;  succ:       70
;;              65 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 744 745 746 747 748 749 750 751
(note 955 954 956 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 956 955 957 65 (set (reg:SI 0 ax [744])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 957 956 958 65 (set (reg:DI 0 ax [orig:421 D.25518 ] [421])
        (sign_extend:DI (reg:SI 0 ax [744]))) ge2fitman_fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 958 957 959 65 (parallel [
            (set (reg:DI 1 dx [orig:422 D.25518 ] [422])
                (ashift:DI (reg:DI 0 ax [orig:421 D.25518 ] [421])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:439 512 {*ashldi3_1}
     (nil))
(insn 959 958 960 65 (set (reg/f:DI 0 ax [745])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 960 959 961 65 (parallel [
            (set (reg/f:DI 0 ax [orig:423 D.25524 ] [423])
                (plus:DI (reg/f:DI 0 ax [745])
                    (reg:DI 1 dx [orig:422 D.25518 ] [422])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:439 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:422 D.25518 ] [422]))
        (nil)))
(insn 961 960 962 65 (set (reg/f:DI 0 ax [orig:424 D.25535 ] [424])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:423 D.25524 ] [423]) [0 _485->lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 962 961 963 65 (set (reg:SI 1 dx [746])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:439 90 {*movsi_internal}
     (nil))
(insn 963 962 964 65 (set (reg:DI 1 dx [orig:425 D.25518 ] [425])
        (sign_extend:DI (reg:SI 1 dx [746]))) ge2fitman_fmtext_o.cpp:439 142 {*extendsidi2_rex64}
     (nil))
(insn 964 963 965 65 (parallel [
            (set (reg:DI 1 dx [orig:426 D.25518 ] [426])
                (ashift:DI (reg:DI 1 dx [orig:425 D.25518 ] [425])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:439 512 {*ashldi3_1}
     (nil))
(insn 965 964 966 65 (parallel [
            (set (reg/f:DI 0 ax [orig:427 D.25535 ] [427])
                (plus:DI (reg/f:DI 0 ax [orig:424 D.25535 ] [424])
                    (reg:DI 1 dx [orig:426 D.25518 ] [426])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:439 218 {*adddi_1}
     (nil))
(insn 966 965 967 65 (set (reg:DI 0 ax [orig:428 D.25521 ] [428])
        (mem:DI (reg/f:DI 0 ax [orig:427 D.25535 ] [427]) [0 *_489+0 S8 A64])) ge2fitman_fmtext_o.cpp:439 89 {*movdi_internal}
     (nil))
(insn 967 966 968 65 (set (reg:SF 21 xmm0 [747])
        (float:SF (reg:DI 0 ax [orig:428 D.25521 ] [428]))) ge2fitman_fmtext_o.cpp:439 200 {*floatdisf2_sse}
     (nil))
(insn 968 967 969 65 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])
        (reg:SF 21 xmm0 [747])) ge2fitman_fmtext_o.cpp:439 129 {*movsf_internal}
     (nil))
(insn 969 968 970 65 (set (reg:SI 0 ax [748])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:440 90 {*movsi_internal}
     (nil))
(insn 970 969 971 65 (set (reg:DI 0 ax [orig:429 D.25518 ] [429])
        (sign_extend:DI (reg:SI 0 ax [748]))) ge2fitman_fmtext_o.cpp:440 142 {*extendsidi2_rex64}
     (nil))
(insn 971 970 972 65 (parallel [
            (set (reg:DI 1 dx [orig:430 D.25518 ] [430])
                (ashift:DI (reg:DI 0 ax [orig:429 D.25518 ] [429])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:440 512 {*ashldi3_1}
     (nil))
(insn 972 971 973 65 (set (reg/f:DI 0 ax [749])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:440 89 {*movdi_internal}
     (nil))
(insn 973 972 974 65 (parallel [
            (set (reg/f:DI 0 ax [orig:431 D.25524 ] [431])
                (plus:DI (reg/f:DI 0 ax [749])
                    (reg:DI 1 dx [orig:430 D.25518 ] [430])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:440 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:430 D.25518 ] [430]))
        (nil)))
(insn 974 973 975 65 (set (reg/f:DI 0 ax [orig:432 D.25526 ] [432])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:431 D.25524 ] [431]) [0 _494->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:440 89 {*movdi_internal}
     (nil))
(insn 975 974 976 65 (set (reg:SI 1 dx [750])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:440 90 {*movsi_internal}
     (nil))
(insn 976 975 977 65 (set (reg:DI 1 dx [orig:433 D.25518 ] [433])
        (sign_extend:DI (reg:SI 1 dx [750]))) ge2fitman_fmtext_o.cpp:440 142 {*extendsidi2_rex64}
     (nil))
(insn 977 976 978 65 (parallel [
            (set (reg:DI 1 dx [orig:434 D.25518 ] [434])
                (ashift:DI (reg:DI 1 dx [orig:433 D.25518 ] [433])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:440 512 {*ashldi3_1}
     (nil))
(insn 978 977 979 65 (parallel [
            (set (reg/f:DI 0 ax [orig:435 D.25526 ] [435])
                (plus:DI (reg/f:DI 0 ax [orig:432 D.25526 ] [432])
                    (reg:DI 1 dx [orig:434 D.25518 ] [434])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:440 218 {*adddi_1}
     (nil))
(insn 979 978 980 65 (set (reg:SF 21 xmm0 [751])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])) ge2fitman_fmtext_o.cpp:440 129 {*movsf_internal}
     (nil))
(insn 980 979 981 65 (set (mem:SF (reg/f:DI 0 ax [orig:435 D.25526 ] [435]) [0 *_498+0 S4 A32])
        (reg:SF 21 xmm0 [751])) ge2fitman_fmtext_o.cpp:440 129 {*movsf_internal}
     (nil))
(insn 981 980 1239 65 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:438 217 {*addsi_1}
     (nil))
(jump_insn 1239 981 1240 65 (set (pc)
        (label_ref 982)) ge2fitman_fmtext_o.cpp:438 654 {jump}
     (nil)
 -> 982)
;;  succ:       64 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1240 1239 985)
;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 436 437 438 439 440 441 752 753
(code_label 985 1240 986 66 37 "" [1 uses])
(note 986 985 987 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 987 986 988 66 (set (reg:SI 0 ax [752])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:444 90 {*movsi_internal}
     (nil))
(insn 988 987 1306 66 (set (reg:DI 0 ax [orig:436 D.25518 ] [436])
        (sign_extend:DI (reg:SI 0 ax [752]))) ge2fitman_fmtext_o.cpp:444 142 {*extendsidi2_rex64}
     (nil))
(insn 1306 988 989 66 (set (reg:DI 0 ax [orig:437 D.25518 ] [437])
        (reg:DI 0 ax [orig:436 D.25518 ] [436])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 989 1306 1307 66 (parallel [
            (set (reg:DI 0 ax [orig:437 D.25518 ] [437])
                (ashift:DI (reg:DI 0 ax [orig:437 D.25518 ] [437])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:444 512 {*ashldi3_1}
     (nil))
(insn 1307 989 990 66 (set (reg:DI 1 dx [orig:437 D.25518 ] [437])
        (reg:DI 0 ax [orig:437 D.25518 ] [437])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 990 1307 991 66 (set (reg/f:DI 0 ax [753])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 991 990 992 66 (parallel [
            (set (reg/f:DI 0 ax [orig:438 D.25520 ] [438])
                (plus:DI (reg/f:DI 0 ax [753])
                    (reg:DI 1 dx [orig:437 D.25518 ] [437])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:444 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:437 D.25518 ] [437]))
        (nil)))
(insn 992 991 993 66 (set (reg:DI 0 ax [orig:439 D.25521 ] [439])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:438 D.25520 ] [438])
                (const_int 24 [0x18])) [0 _503->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 993 992 994 66 (set (reg:DI 0 ax [orig:440 D.25537 ] [440])
        (reg:DI 0 ax [orig:439 D.25521 ] [439])) ge2fitman_fmtext_o.cpp:444 89 {*movdi_internal}
     (nil))
(insn 994 993 995 66 (parallel [
            (set (reg:DI 0 ax [orig:441 D.25537 ] [441])
                (plus:DI (reg:DI 0 ax [orig:440 D.25537 ] [440])
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:444 218 {*adddi_1}
     (nil))
(insn 995 994 996 66 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:441 D.25537 ] [441])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:444 8 {*cmpdi_1}
     (nil))
(jump_insn 996 995 997 66 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 1036)
            (pc))) ge2fitman_fmtext_o.cpp:444 612 {*jcc_1}
     (nil)
 -> 1036)
;;  succ:       67 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66 (FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 997 996 998 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 998 997 1033 67 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:445 90 {*movsi_internal}
     (nil))
;;  succ:       68 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       67 (FALLTHRU)
;;              69 [100.0%] 
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 442 443 444 445 446 447 754 755 756
(code_label 1033 998 999 68 39 "" [1 uses])
(note 999 1033 1000 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 1000 999 1001 68 (set (reg:SI 0 ax [754])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:445 90 {*movsi_internal}
     (nil))
(insn 1001 1000 1002 68 (set (reg:DI 0 ax [orig:442 D.25521 ] [442])
        (sign_extend:DI (reg:SI 0 ax [754]))) ge2fitman_fmtext_o.cpp:445 142 {*extendsidi2_rex64}
     (nil))
(insn 1002 1001 1003 68 (set (reg:SI 1 dx [755])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:445 90 {*movsi_internal}
     (nil))
(insn 1003 1002 1308 68 (set (reg:DI 1 dx [orig:443 D.25518 ] [443])
        (sign_extend:DI (reg:SI 1 dx [755]))) ge2fitman_fmtext_o.cpp:445 142 {*extendsidi2_rex64}
     (nil))
(insn 1308 1003 1004 68 (set (reg:DI 2 cx [orig:444 D.25518 ] [444])
        (reg:DI 1 dx [orig:443 D.25518 ] [443])) ge2fitman_fmtext_o.cpp:445 89 {*movdi_internal}
     (nil))
(insn 1004 1308 1005 68 (parallel [
            (set (reg:DI 2 cx [orig:444 D.25518 ] [444])
                (ashift:DI (reg:DI 2 cx [orig:444 D.25518 ] [444])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:445 512 {*ashldi3_1}
     (nil))
(insn 1005 1004 1006 68 (set (reg/f:DI 1 dx [756])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:445 89 {*movdi_internal}
     (nil))
(insn 1006 1005 1007 68 (parallel [
            (set (reg/f:DI 1 dx [orig:445 D.25520 ] [445])
                (plus:DI (reg/f:DI 1 dx [756])
                    (reg:DI 2 cx [orig:444 D.25518 ] [444])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:445 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:444 D.25518 ] [444]))
        (nil)))
(insn 1007 1006 1008 68 (set (reg:DI 1 dx [orig:446 D.25521 ] [446])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:445 D.25520 ] [445])
                (const_int 16 [0x10])) [0 _511->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:445 89 {*movdi_internal}
     (nil))
(insn 1008 1007 1009 68 (parallel [
            (set (reg:DI 1 dx [orig:447 D.25521 ] [447])
                (ashift:DI (reg:DI 1 dx [orig:446 D.25521 ] [446])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:445 512 {*ashldi3_1}
     (nil))
(insn 1009 1008 1010 68 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:442 D.25521 ] [442])
            (reg:DI 1 dx [orig:447 D.25521 ] [447]))) ge2fitman_fmtext_o.cpp:445 8 {*cmpdi_1}
     (nil))
(jump_insn 1010 1009 1011 68 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1036)
            (pc))) ge2fitman_fmtext_o.cpp:445 612 {*jcc_1}
     (nil)
 -> 1036)
;;  succ:       70
;;              69 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 448 449 450 451 452 453 454 455 456 457 458 757 758 759 760 761 762 763
(note 1011 1010 1012 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 1012 1011 1013 69 (set (reg:SI 0 ax [757])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:447 90 {*movsi_internal}
     (nil))
(insn 1013 1012 1014 69 (set (reg:DI 0 ax [orig:448 D.25518 ] [448])
        (sign_extend:DI (reg:SI 0 ax [757]))) ge2fitman_fmtext_o.cpp:447 142 {*extendsidi2_rex64}
     (nil))
(insn 1014 1013 1015 69 (parallel [
            (set (reg:DI 1 dx [orig:449 D.25518 ] [449])
                (ashift:DI (reg:DI 0 ax [orig:448 D.25518 ] [448])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:447 512 {*ashldi3_1}
     (nil))
(insn 1015 1014 1016 69 (set (reg/f:DI 0 ax [758])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:447 89 {*movdi_internal}
     (nil))
(insn 1016 1015 1017 69 (parallel [
            (set (reg/f:DI 0 ax [orig:450 D.25536 ] [450])
                (plus:DI (reg/f:DI 0 ax [758])
                    (reg:DI 1 dx [orig:449 D.25518 ] [449])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:447 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 temp_long+0 S8 A64])
            (reg:DI 1 dx [orig:449 D.25518 ] [449]))
        (nil)))
(insn 1017 1016 1018 69 (set (reg:SI 0 ax [orig:451 D.25517 ] [451])
        (mem:SI (reg/f:DI 0 ax [orig:450 D.25536 ] [450]) [0 *_516+0 S4 A32])) ge2fitman_fmtext_o.cpp:447 90 {*movsi_internal}
     (nil))
(insn 1018 1017 1019 69 (set (reg:SF 21 xmm0 [759])
        (float:SF (reg:SI 0 ax [orig:451 D.25517 ] [451]))) ge2fitman_fmtext_o.cpp:447 199 {*floatsisf2_sse}
     (nil))
(insn 1019 1018 1020 69 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])
        (reg:SF 21 xmm0 [759])) ge2fitman_fmtext_o.cpp:447 129 {*movsf_internal}
     (nil))
(insn 1020 1019 1021 69 (set (reg:SI 0 ax [760])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:449 90 {*movsi_internal}
     (nil))
(insn 1021 1020 1022 69 (set (reg:DI 0 ax [orig:452 D.25518 ] [452])
        (sign_extend:DI (reg:SI 0 ax [760]))) ge2fitman_fmtext_o.cpp:449 142 {*extendsidi2_rex64}
     (nil))
(insn 1022 1021 1023 69 (parallel [
            (set (reg:DI 1 dx [orig:453 D.25518 ] [453])
                (ashift:DI (reg:DI 0 ax [orig:452 D.25518 ] [452])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:449 512 {*ashldi3_1}
     (nil))
(insn 1023 1022 1024 69 (set (reg/f:DI 0 ax [761])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:449 89 {*movdi_internal}
     (nil))
(insn 1024 1023 1025 69 (parallel [
            (set (reg/f:DI 0 ax [orig:454 D.25524 ] [454])
                (plus:DI (reg/f:DI 0 ax [761])
                    (reg:DI 1 dx [orig:453 D.25518 ] [453])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:449 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:453 D.25518 ] [453]))
        (nil)))
(insn 1025 1024 1026 69 (set (reg/f:DI 0 ax [orig:455 D.25526 ] [455])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:454 D.25524 ] [454]) [0 _521->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:449 89 {*movdi_internal}
     (nil))
(insn 1026 1025 1027 69 (set (reg:SI 1 dx [762])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:449 90 {*movsi_internal}
     (nil))
(insn 1027 1026 1028 69 (set (reg:DI 1 dx [orig:456 D.25518 ] [456])
        (sign_extend:DI (reg:SI 1 dx [762]))) ge2fitman_fmtext_o.cpp:449 142 {*extendsidi2_rex64}
     (nil))
(insn 1028 1027 1029 69 (parallel [
            (set (reg:DI 1 dx [orig:457 D.25518 ] [457])
                (ashift:DI (reg:DI 1 dx [orig:456 D.25518 ] [456])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:449 512 {*ashldi3_1}
     (nil))
(insn 1029 1028 1030 69 (parallel [
            (set (reg/f:DI 0 ax [orig:458 D.25526 ] [458])
                (plus:DI (reg/f:DI 0 ax [orig:455 D.25526 ] [455])
                    (reg:DI 1 dx [orig:457 D.25518 ] [457])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:449 218 {*adddi_1}
     (nil))
(insn 1030 1029 1031 69 (set (reg:SF 21 xmm0 [763])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 temp_float+0 S4 A32])) ge2fitman_fmtext_o.cpp:449 129 {*movsf_internal}
     (nil))
(insn 1031 1030 1032 69 (set (mem:SF (reg/f:DI 0 ax [orig:458 D.25526 ] [458]) [0 *_525+0 S4 A32])
        (reg:SF 21 xmm0 [763])) ge2fitman_fmtext_o.cpp:449 129 {*movsf_internal}
     (nil))
(insn 1032 1031 1241 69 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:445 217 {*addsi_1}
     (nil))
(jump_insn 1241 1032 1242 69 (set (pc)
        (label_ref 1033)) ge2fitman_fmtext_o.cpp:445 654 {jump}
     (nil)
 -> 1033)
;;  succ:       68 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1242 1241 1036)
;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60
;;              64
;;              66
;;              68
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1036 1242 1037 70 35 "" [4 uses])
(note 1037 1036 1038 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 1038 1037 1039 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -93 [0xffffffffffffffa3])) [0 phaseIt+0 S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:457 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 1039 1038 1040 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 1075)
            (pc))) ge2fitman_fmtext_o.cpp:457 612 {*jcc_1}
     (nil)
 -> 1075)
;;  succ:       71 (FALLTHRU)
;;              72
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 459 460 461 462 463 464 465 466 467 468 469 470 471 472 764 765 766 767 768 769 770 771 772
(note 1040 1039 1041 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 1041 1040 1042 71 (set (reg:SI 0 ax [764])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 1042 1041 1043 71 (parallel [
            (set (reg:SI 1 dx [orig:459 D.25517 ] [459])
                (plus:SI (reg:SI 0 ax [764])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:464 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -68 [0xffffffffffffffbc])) [0 countChannel+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1043 1042 1044 71 (set (reg:SI 0 ax [765])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 1044 1043 1046 71 (parallel [
            (set (reg:SI 0 ax [orig:460 D.25517 ] [460])
                (plus:SI (reg:SI 0 ax [765])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:464 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 countFID+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1046 1044 1047 71 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:460 D.25517 ] [460])) ge2fitman_fmtext_o.cpp:464 90 {*movsi_internal}
     (nil))
(insn 1047 1046 1048 71 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f7c3720ef30 *.LC14>)) ge2fitman_fmtext_o.cpp:464 89 {*movdi_internal}
     (nil))
(insn 1048 1047 1049 71 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:464 93 {*movqi_internal}
     (nil))
(call_insn 1049 1048 1050 71 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f7c3899a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:464 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 1050 1049 1051 71 (set (reg:SI 0 ax [766])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1051 1050 1052 71 (parallel [
            (set (reg:SI 2 cx [orig:461 D.25517 ] [461])
                (plus:SI (reg:SI 0 ax [766])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 countFID+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1052 1051 1053 71 (set (reg:SI 0 ax [767])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1053 1052 1310 71 (set (reg:DI 0 ax [orig:462 D.25518 ] [462])
        (sign_extend:DI (reg:SI 0 ax [767]))) ge2fitman_fmtext_o.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 1310 1053 1054 71 (set (reg:DI 0 ax [orig:463 D.25518 ] [463])
        (reg:DI 0 ax [orig:462 D.25518 ] [462])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1054 1310 1311 71 (parallel [
            (set (reg:DI 0 ax [orig:463 D.25518 ] [463])
                (ashift:DI (reg:DI 0 ax [orig:463 D.25518 ] [463])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 512 {*ashldi3_1}
     (nil))
(insn 1311 1054 1055 71 (set (reg:DI 1 dx [orig:463 D.25518 ] [463])
        (reg:DI 0 ax [orig:463 D.25518 ] [463])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1055 1311 1056 71 (set (reg/f:DI 0 ax [768])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1056 1055 1057 71 (parallel [
            (set (reg/f:DI 0 ax [orig:464 D.25520 ] [464])
                (plus:DI (reg/f:DI 0 ax [768])
                    (reg:DI 1 dx [orig:463 D.25518 ] [463])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:463 D.25518 ] [463]))
        (nil)))
(insn 1057 1056 1058 71 (set (reg:DI 0 ax [orig:465 D.25521 ] [465])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:464 D.25520 ] [464])
                (const_int 16 [0x10])) [0 _534->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1058 1057 1059 71 (set (reg:SI 0 ax [orig:466 D.25530 ] [466])
        (reg:SI 0 ax [orig:465 D.25521 ] [465])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1059 1058 1060 71 (parallel [
            (set (reg:SI 0 ax [orig:467 D.25530 ] [467])
                (ashift:SI (reg:SI 0 ax [orig:466 D.25530 ] [466])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 511 {*ashlsi3_1}
     (nil))
(insn 1060 1059 1061 71 (set (reg:SI 5 di [orig:468 D.25517 ] [468])
        (reg:SI 0 ax [orig:467 D.25530 ] [467])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1061 1060 1062 71 (set (reg:SI 0 ax [769])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1062 1061 1063 71 (set (reg:DI 0 ax [orig:469 D.25518 ] [469])
        (sign_extend:DI (reg:SI 0 ax [769]))) ge2fitman_fmtext_o.cpp:477 142 {*extendsidi2_rex64}
     (nil))
(insn 1063 1062 1064 71 (parallel [
            (set (reg:DI 1 dx [orig:470 D.25518 ] [470])
                (ashift:DI (reg:DI 0 ax [orig:469 D.25518 ] [469])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 512 {*ashldi3_1}
     (nil))
(insn 1064 1063 1065 71 (set (reg/f:DI 0 ax [770])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1065 1064 1066 71 (parallel [
            (set (reg/f:DI 0 ax [orig:471 D.25526 ] [471])
                (plus:DI (reg/f:DI 0 ax [770])
                    (reg:DI 1 dx [orig:470 D.25518 ] [470])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:477 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:470 D.25518 ] [470]))
        (nil)))
(insn 1066 1065 1067 71 (set (reg:SF 0 ax [orig:472 D.25541 ] [472])
        (mem:SF (reg/f:DI 0 ax [orig:471 D.25526 ] [471]) [0 *_541+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 129 {*movsf_internal}
     (nil))
(insn 1067 1066 1068 71 (set (reg:SI 1 dx [771])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:477 90 {*movsi_internal}
     (nil))
(insn 1068 1067 1073 71 (set (reg:DI 4 si [772])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:477 89 {*movdi_internal}
     (nil))
(insn 1073 1068 1312 71 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 %sfp+-136 S4 A32])
        (reg:SF 0 ax [orig:472 D.25541 ] [472])) ge2fitman_fmtext_o.cpp:477 129 {*movsf_internal}
     (nil))
(insn 1312 1073 1074 71 (set (reg:SF 21 xmm0)
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 %sfp+-136 S4 A32])) ge2fitman_fmtext_o.cpp:477 129 {*movsf_internal}
     (nil))
(call_insn 1074 1312 1075 71 (call (mem:QI (symbol_ref:DI ("_Z9fix_phasefiP10Precision1ii") [flags 0x3]  <function_decl 0x7f7c37522a20 fix_phase>) [0 fix_phase S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:477 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 21 xmm0))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
;;  succ:       72 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;;              71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 473 773
(code_label 1075 1074 1076 72 40 "" [1 uses])
(note 1076 1075 1077 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 1077 1076 1078 72 (set (reg:SI 0 ax [773])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:480 90 {*movsi_internal}
     (nil))
(insn 1078 1077 1079 72 (parallel [
            (set (reg:SI 0 ax [orig:473 D.25517 ] [473])
                (plus:SI (reg:SI 0 ax [773])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:480 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -72 [0xffffffffffffffb8])) [0 countFID+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 1079 1078 1080 72 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:473 D.25517 ] [473])) ge2fitman_fmtext_o.cpp:480 90 {*movsi_internal}
     (nil))
(insn 1080 1079 1081 72 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f7c3723f000 *.LC15>)) ge2fitman_fmtext_o.cpp:480 89 {*movdi_internal}
     (nil))
(insn 1081 1080 1082 72 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:480 93 {*movqi_internal}
     (nil))
(call_insn 1082 1081 1083 72 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f7c3899a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:480 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 1083 1082 1169 72 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:516 90 {*movsi_internal}
     (nil))
;;  succ:       73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       72 (FALLTHRU)
;;              74 [100.0%] 
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 474 475 476 477 478 479 774 775 776
(code_label 1169 1083 1084 73 42 "" [1 uses])
(note 1084 1169 1085 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 1085 1084 1086 73 (set (reg:SI 0 ax [774])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:516 90 {*movsi_internal}
     (nil))
(insn 1086 1085 1087 73 (set (reg:DI 0 ax [orig:474 D.25521 ] [474])
        (sign_extend:DI (reg:SI 0 ax [774]))) ge2fitman_fmtext_o.cpp:516 142 {*extendsidi2_rex64}
     (nil))
(insn 1087 1086 1088 73 (set (reg:SI 1 dx [775])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:516 90 {*movsi_internal}
     (nil))
(insn 1088 1087 1313 73 (set (reg:DI 1 dx [orig:475 D.25518 ] [475])
        (sign_extend:DI (reg:SI 1 dx [775]))) ge2fitman_fmtext_o.cpp:516 142 {*extendsidi2_rex64}
     (nil))
(insn 1313 1088 1089 73 (set (reg:DI 2 cx [orig:476 D.25518 ] [476])
        (reg:DI 1 dx [orig:475 D.25518 ] [475])) ge2fitman_fmtext_o.cpp:516 89 {*movdi_internal}
     (nil))
(insn 1089 1313 1090 73 (parallel [
            (set (reg:DI 2 cx [orig:476 D.25518 ] [476])
                (ashift:DI (reg:DI 2 cx [orig:476 D.25518 ] [476])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:516 512 {*ashldi3_1}
     (nil))
(insn 1090 1089 1091 73 (set (reg/f:DI 1 dx [776])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:516 89 {*movdi_internal}
     (nil))
(insn 1091 1090 1092 73 (parallel [
            (set (reg/f:DI 1 dx [orig:477 D.25520 ] [477])
                (plus:DI (reg/f:DI 1 dx [776])
                    (reg:DI 2 cx [orig:476 D.25518 ] [476])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:516 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -112 [0xffffffffffffff90])) [0 main_header+0 S8 A64])
            (reg:DI 2 cx [orig:476 D.25518 ] [476]))
        (nil)))
(insn 1092 1091 1093 73 (set (reg:DI 1 dx [orig:478 D.25521 ] [478])
        (mem/j:DI (plus:DI (reg/f:DI 1 dx [orig:477 D.25520 ] [477])
                (const_int 16 [0x10])) [0 _550->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:516 89 {*movdi_internal}
     (nil))
(insn 1093 1092 1094 73 (parallel [
            (set (reg:DI 1 dx [orig:479 D.25521 ] [479])
                (ashift:DI (reg:DI 1 dx [orig:478 D.25521 ] [478])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:516 512 {*ashldi3_1}
     (nil))
(insn 1094 1093 1095 73 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:474 D.25521 ] [474])
            (reg:DI 1 dx [orig:479 D.25521 ] [479]))) ge2fitman_fmtext_o.cpp:516 8 {*cmpdi_1}
     (nil))
(jump_insn 1095 1094 1096 73 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 1172)
            (pc))) ge2fitman_fmtext_o.cpp:516 612 {*jcc_1}
     (nil)
 -> 1172)
;;  succ:       75
;;              74 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794
(note 1096 1095 1097 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 1097 1096 1098 74 (set (reg:SI 0 ax [777])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1098 1097 1099 74 (set (reg:DI 0 ax [orig:480 D.25518 ] [480])
        (sign_extend:DI (reg:SI 0 ax [777]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1099 1098 1100 74 (parallel [
            (set (reg:DI 1 dx [orig:481 D.25518 ] [481])
                (ashift:DI (reg:DI 0 ax [orig:480 D.25518 ] [480])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 512 {*ashldi3_1}
     (nil))
(insn 1100 1099 1101 74 (set (reg/f:DI 0 ax [778])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1101 1100 1102 74 (parallel [
            (set (reg/f:DI 0 ax [orig:482 D.25525 ] [482])
                (plus:DI (reg/f:DI 0 ax [778])
                    (reg:DI 1 dx [orig:481 D.25518 ] [481])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:481 D.25518 ] [481]))
        (nil)))
(insn 1102 1101 1103 74 (set (reg/f:DI 0 ax [orig:483 D.25526 ] [483])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:482 D.25525 ] [482]) [0 _555->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1103 1102 1104 74 (set (reg:SI 1 dx [779])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1104 1103 1105 74 (set (reg:DI 1 dx [orig:484 D.25518 ] [484])
        (sign_extend:DI (reg:SI 1 dx [779]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1105 1104 1106 74 (parallel [
            (set (reg:DI 1 dx [orig:485 D.25518 ] [485])
                (ashift:DI (reg:DI 1 dx [orig:484 D.25518 ] [484])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 512 {*ashldi3_1}
     (nil))
(insn 1106 1105 1107 74 (parallel [
            (set (reg/f:DI 0 ax [orig:486 D.25526 ] [486])
                (plus:DI (reg/f:DI 0 ax [orig:483 D.25526 ] [483])
                    (reg:DI 1 dx [orig:485 D.25518 ] [485])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 218 {*adddi_1}
     (nil))
(insn 1107 1106 1108 74 (set (reg:SI 1 dx [780])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1108 1107 1109 74 (set (reg:DI 1 dx [orig:487 D.25518 ] [487])
        (sign_extend:DI (reg:SI 1 dx [780]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1109 1108 1110 74 (parallel [
            (set (reg:DI 2 cx [orig:488 D.25518 ] [488])
                (ashift:DI (reg:DI 1 dx [orig:487 D.25518 ] [487])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 512 {*ashldi3_1}
     (nil))
(insn 1110 1109 1111 74 (set (reg/f:DI 1 dx [781])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1111 1110 1112 74 (parallel [
            (set (reg/f:DI 1 dx [orig:489 D.25525 ] [489])
                (plus:DI (reg/f:DI 1 dx [781])
                    (reg:DI 2 cx [orig:488 D.25518 ] [488])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 2 cx [orig:488 D.25518 ] [488]))
        (nil)))
(insn 1112 1111 1113 74 (set (reg/f:DI 1 dx [orig:490 D.25526 ] [490])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:489 D.25525 ] [489]) [0 _562->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1113 1112 1114 74 (set (reg:SI 2 cx [782])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1114 1113 1115 74 (set (reg:DI 2 cx [orig:491 D.25518 ] [491])
        (sign_extend:DI (reg:SI 2 cx [782]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1115 1114 1116 74 (parallel [
            (set (reg:DI 2 cx [orig:492 D.25518 ] [492])
                (ashift:DI (reg:DI 2 cx [orig:491 D.25518 ] [491])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 512 {*ashldi3_1}
     (nil))
(insn 1116 1115 1117 74 (parallel [
            (set (reg/f:DI 1 dx [orig:493 D.25526 ] [493])
                (plus:DI (reg/f:DI 1 dx [orig:490 D.25526 ] [490])
                    (reg:DI 2 cx [orig:492 D.25518 ] [492])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 218 {*adddi_1}
     (nil))
(insn 1117 1116 1118 74 (set (reg:SF 22 xmm1 [orig:494 D.25541 ] [494])
        (mem:SF (reg/f:DI 1 dx [orig:493 D.25526 ] [493]) [0 *_566+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 129 {*movsf_internal}
     (nil))
(insn 1118 1117 1119 74 (set (reg:SI 1 dx [783])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1119 1118 1120 74 (set (reg:DI 1 dx [orig:495 D.25518 ] [495])
        (sign_extend:DI (reg:SI 1 dx [783]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1120 1119 1121 74 (parallel [
            (set (reg:DI 2 cx [orig:496 D.25518 ] [496])
                (ashift:DI (reg:DI 1 dx [orig:495 D.25518 ] [495])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 512 {*ashldi3_1}
     (nil))
(insn 1121 1120 1122 74 (set (reg/f:DI 1 dx [784])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1122 1121 1123 74 (parallel [
            (set (reg/f:DI 1 dx [orig:497 D.25524 ] [497])
                (plus:DI (reg/f:DI 1 dx [784])
                    (reg:DI 2 cx [orig:496 D.25518 ] [496])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:496 D.25518 ] [496]))
        (nil)))
(insn 1123 1122 1124 74 (set (reg/f:DI 1 dx [orig:498 D.25526 ] [498])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:497 D.25524 ] [497]) [0 _570->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:521 89 {*movdi_internal}
     (nil))
(insn 1124 1123 1125 74 (set (reg:SI 2 cx [785])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 90 {*movsi_internal}
     (nil))
(insn 1125 1124 1126 74 (set (reg:DI 2 cx [orig:499 D.25518 ] [499])
        (sign_extend:DI (reg:SI 2 cx [785]))) ge2fitman_fmtext_o.cpp:521 142 {*extendsidi2_rex64}
     (nil))
(insn 1126 1125 1127 74 (parallel [
            (set (reg:DI 2 cx [orig:500 D.25518 ] [500])
                (ashift:DI (reg:DI 2 cx [orig:499 D.25518 ] [499])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 512 {*ashldi3_1}
     (nil))
(insn 1127 1126 1128 74 (parallel [
            (set (reg/f:DI 1 dx [orig:501 D.25526 ] [501])
                (plus:DI (reg/f:DI 1 dx [orig:498 D.25526 ] [498])
                    (reg:DI 2 cx [orig:500 D.25518 ] [500])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:521 218 {*adddi_1}
     (nil))
(insn 1128 1127 1129 74 (set (reg:SF 21 xmm0 [orig:502 D.25541 ] [502])
        (mem:SF (reg/f:DI 1 dx [orig:501 D.25526 ] [501]) [0 *_574+0 S4 A32])) ge2fitman_fmtext_o.cpp:521 129 {*movsf_internal}
     (nil))
(insn 1129 1128 1130 74 (set (reg:SF 21 xmm0 [orig:503 D.25541 ] [503])
        (plus:SF (reg:SF 21 xmm0 [orig:502 D.25541 ] [502])
            (reg:SF 22 xmm1 [orig:494 D.25541 ] [494]))) ge2fitman_fmtext_o.cpp:521 797 {*fop_sf_comm_sse}
     (nil))
(insn 1130 1129 1131 74 (set (mem:SF (reg/f:DI 0 ax [orig:486 D.25526 ] [486]) [0 *_559+0 S4 A32])
        (reg:SF 21 xmm0 [orig:503 D.25541 ] [503])) ge2fitman_fmtext_o.cpp:521 129 {*movsf_internal}
     (nil))
(insn 1131 1130 1132 74 (set (reg:SI 0 ax [786])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1132 1131 1133 74 (set (reg:DI 0 ax [orig:504 D.25518 ] [504])
        (sign_extend:DI (reg:SI 0 ax [786]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1133 1132 1134 74 (parallel [
            (set (reg:DI 1 dx [orig:505 D.25518 ] [505])
                (ashift:DI (reg:DI 0 ax [orig:504 D.25518 ] [504])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 512 {*ashldi3_1}
     (nil))
(insn 1134 1133 1135 74 (set (reg/f:DI 0 ax [787])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1135 1134 1136 74 (parallel [
            (set (reg/f:DI 0 ax [orig:506 D.25525 ] [506])
                (plus:DI (reg/f:DI 0 ax [787])
                    (reg:DI 1 dx [orig:505 D.25518 ] [505])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 1 dx [orig:505 D.25518 ] [505]))
        (nil)))
(insn 1136 1135 1137 74 (set (reg/f:DI 0 ax [orig:507 D.25526 ] [507])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:506 D.25525 ] [506]) [0 _580->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1137 1136 1138 74 (set (reg:SI 1 dx [788])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1138 1137 1139 74 (set (reg:DI 1 dx [orig:508 D.25527 ] [508])
        (sign_extend:DI (reg:SI 1 dx [788]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1139 1138 1140 74 (parallel [
            (set (reg:DI 1 dx [orig:509 D.25527 ] [509])
                (plus:DI (reg:DI 1 dx [orig:508 D.25527 ] [508])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (nil))
(insn 1140 1139 1141 74 (parallel [
            (set (reg:DI 1 dx [orig:510 D.25527 ] [510])
                (ashift:DI (reg:DI 1 dx [orig:509 D.25527 ] [509])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 512 {*ashldi3_1}
     (nil))
(insn 1141 1140 1142 74 (parallel [
            (set (reg/f:DI 0 ax [orig:511 D.25526 ] [511])
                (plus:DI (reg/f:DI 0 ax [orig:507 D.25526 ] [507])
                    (reg:DI 1 dx [orig:510 D.25527 ] [510])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (nil))
(insn 1142 1141 1143 74 (set (reg:SI 1 dx [789])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1143 1142 1144 74 (set (reg:DI 1 dx [orig:512 D.25518 ] [512])
        (sign_extend:DI (reg:SI 1 dx [789]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1144 1143 1145 74 (parallel [
            (set (reg:DI 2 cx [orig:513 D.25518 ] [513])
                (ashift:DI (reg:DI 1 dx [orig:512 D.25518 ] [512])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 512 {*ashldi3_1}
     (nil))
(insn 1145 1144 1146 74 (set (reg/f:DI 1 dx [790])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 switch_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1146 1145 1147 74 (parallel [
            (set (reg/f:DI 1 dx [orig:514 D.25525 ] [514])
                (plus:DI (reg/f:DI 1 dx [790])
                    (reg:DI 2 cx [orig:513 D.25518 ] [513])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -128 [0xffffffffffffff80])) [0 switch_data+0 S8 A64])
            (reg:DI 2 cx [orig:513 D.25518 ] [513]))
        (nil)))
(insn 1147 1146 1148 74 (set (reg/f:DI 1 dx [orig:515 D.25526 ] [515])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:514 D.25525 ] [514]) [0 _588->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1148 1147 1149 74 (set (reg:SI 2 cx [791])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1149 1148 1150 74 (set (reg:DI 2 cx [orig:516 D.25527 ] [516])
        (sign_extend:DI (reg:SI 2 cx [791]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1150 1149 1151 74 (parallel [
            (set (reg:DI 2 cx [orig:517 D.25527 ] [517])
                (plus:DI (reg:DI 2 cx [orig:516 D.25527 ] [516])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (nil))
(insn 1151 1150 1152 74 (parallel [
            (set (reg:DI 2 cx [orig:518 D.25527 ] [518])
                (ashift:DI (reg:DI 2 cx [orig:517 D.25527 ] [517])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 512 {*ashldi3_1}
     (nil))
(insn 1152 1151 1153 74 (parallel [
            (set (reg/f:DI 1 dx [orig:519 D.25526 ] [519])
                (plus:DI (reg/f:DI 1 dx [orig:515 D.25526 ] [515])
                    (reg:DI 2 cx [orig:518 D.25527 ] [518])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (nil))
(insn 1153 1152 1154 74 (set (reg:SF 22 xmm1 [orig:520 D.25541 ] [520])
        (mem:SF (reg/f:DI 1 dx [orig:519 D.25526 ] [519]) [0 *_593+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 129 {*movsf_internal}
     (nil))
(insn 1154 1153 1155 74 (set (reg:SI 1 dx [792])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1155 1154 1156 74 (set (reg:DI 1 dx [orig:521 D.25518 ] [521])
        (sign_extend:DI (reg:SI 1 dx [792]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1156 1155 1157 74 (parallel [
            (set (reg:DI 2 cx [orig:522 D.25518 ] [522])
                (ashift:DI (reg:DI 1 dx [orig:521 D.25518 ] [521])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 512 {*ashldi3_1}
     (nil))
(insn 1157 1156 1158 74 (set (reg/f:DI 1 dx [793])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1158 1157 1159 74 (parallel [
            (set (reg/f:DI 1 dx [orig:523 D.25524 ] [523])
                (plus:DI (reg/f:DI 1 dx [793])
                    (reg:DI 2 cx [orig:522 D.25518 ] [522])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                    (const_int 16 [0x10])) [0 in_data+0 S8 A64])
            (reg:DI 2 cx [orig:522 D.25518 ] [522]))
        (nil)))
(insn 1159 1158 1160 74 (set (reg/f:DI 1 dx [orig:524 D.25526 ] [524])
        (mem/f/j:DI (reg/f:DI 1 dx [orig:523 D.25524 ] [523]) [0 _597->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:522 89 {*movdi_internal}
     (nil))
(insn 1160 1159 1161 74 (set (reg:SI 2 cx [794])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 90 {*movsi_internal}
     (nil))
(insn 1161 1160 1162 74 (set (reg:DI 2 cx [orig:525 D.25527 ] [525])
        (sign_extend:DI (reg:SI 2 cx [794]))) ge2fitman_fmtext_o.cpp:522 142 {*extendsidi2_rex64}
     (nil))
(insn 1162 1161 1163 74 (parallel [
            (set (reg:DI 2 cx [orig:526 D.25527 ] [526])
                (plus:DI (reg:DI 2 cx [orig:525 D.25527 ] [525])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (nil))
(insn 1163 1162 1164 74 (parallel [
            (set (reg:DI 2 cx [orig:527 D.25527 ] [527])
                (ashift:DI (reg:DI 2 cx [orig:526 D.25527 ] [526])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 512 {*ashldi3_1}
     (nil))
(insn 1164 1163 1165 74 (parallel [
            (set (reg/f:DI 1 dx [orig:528 D.25526 ] [528])
                (plus:DI (reg/f:DI 1 dx [orig:524 D.25526 ] [524])
                    (reg:DI 2 cx [orig:527 D.25527 ] [527])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:522 218 {*adddi_1}
     (nil))
(insn 1165 1164 1166 74 (set (reg:SF 21 xmm0 [orig:529 D.25541 ] [529])
        (mem:SF (reg/f:DI 1 dx [orig:528 D.25526 ] [528]) [0 *_602+0 S4 A32])) ge2fitman_fmtext_o.cpp:522 129 {*movsf_internal}
     (nil))
(insn 1166 1165 1167 74 (set (reg:SF 21 xmm0 [orig:530 D.25541 ] [530])
        (plus:SF (reg:SF 21 xmm0 [orig:529 D.25541 ] [529])
            (reg:SF 22 xmm1 [orig:520 D.25541 ] [520]))) ge2fitman_fmtext_o.cpp:522 797 {*fop_sf_comm_sse}
     (nil))
(insn 1167 1166 1168 74 (set (mem:SF (reg/f:DI 0 ax [orig:511 D.25526 ] [511]) [0 *_585+0 S4 A32])
        (reg:SF 21 xmm0 [orig:530 D.25541 ] [530])) ge2fitman_fmtext_o.cpp:522 129 {*movsf_internal}
     (nil))
(insn 1168 1167 1243 74 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -80 [0xffffffffffffffb0])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:516 217 {*addsi_1}
     (nil))
(jump_insn 1243 1168 1244 74 (set (pc)
        (label_ref 1169)) ge2fitman_fmtext_o.cpp:516 654 {jump}
     (nil)
 -> 1169)
;;  succ:       73 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1244 1243 1172)
;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1172 1244 1173 75 41 "" [1 uses])
(note 1173 1172 1174 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 1174 1173 1245 75 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -88 [0xffffffffffffffa8])) [0 countFID+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:364 217 {*addsi_1}
     (nil))
(jump_insn 1245 1174 1246 75 (set (pc)
        (label_ref 1175)) ge2fitman_fmtext_o.cpp:364 654 {jump}
     (nil)
 -> 1175)
;;  succ:       37 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1246 1245 1178)
;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1178 1246 1179 76 22 "" [1 uses])
(note 1179 1178 1180 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 1180 1179 1247 76 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -84 [0xffffffffffffffac])) [0 countChannel+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:301 217 {*addsi_1}
     (nil))
(jump_insn 1247 1180 1248 76 (set (pc)
        (label_ref 1181)) ge2fitman_fmtext_o.cpp:301 654 {jump}
     (nil)
 -> 1181)
;;  succ:       32 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1248 1247 1186)
;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              32
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 1186 1248 1187 77 3 "" [2 uses])
(note 1187 1186 1188 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 1188 1187 1249 77 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -92 [0xffffffffffffffa4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:63 217 {*addsi_1}
     (nil))
(jump_insn 1249 1188 1250 77 (set (pc)
        (label_ref 1189)) ge2fitman_fmtext_o.cpp:63 654 {jump}
     (nil)
 -> 1189)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 1250 1249 1192)
;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 531 532 795
(code_label 1192 1250 1193 78 2 "" [1 uses])
(note 1193 1192 1194 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 1194 1193 1195 78 (set (reg:DI 0 ax [795])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 temp_long+0 S8 A64])) ge2fitman_fmtext_o.cpp:578 89 {*movdi_internal}
     (nil))
(insn 1195 1194 1196 78 (set (reg:DI 5 di)
        (reg:DI 0 ax [795])) ge2fitman_fmtext_o.cpp:578 89 {*movdi_internal}
     (nil))
(call_insn 1196 1195 1197 78 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f7c389bb1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:578 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 1197 1196 1200 78 (set (reg:SI 0 ax [orig:531 D.25517 ] [531])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 1200 1197 1204 78 (set (reg:SI 0 ax [orig:532 <retval> ] [532])
        (reg:SI 0 ax [orig:531 D.25517 ] [531])) ge2fitman_fmtext_o.cpp:580 90 {*movsi_internal}
     (nil))
(insn 1204 1200 1205 78 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:532 <retval> ] [532])) ge2fitman_fmtext_o.cpp:581 90 {*movsi_internal}
     (nil))
(insn 1205 1204 1251 78 (use (reg/i:SI 0 ax)) ge2fitman_fmtext_o.cpp:581 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 1251 1205 0 NOTE_INSN_DELETED)

;; Function void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*) (_Z10fwrite_ascPcPfP16Data_file_headerP17Data_block_headeriP12Procpar_infoP10Preprocess, funcdef_no=1022, decl_uid=24389, cgraph_uid=227, symbol_order=228)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) l  (2) M {*ashlsi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 42:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 46:  (0) v  (1) m {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) x  (1) r {*floatsisf2_sse}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 50:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=215 from oldreg=94, assigning class SSE_REGS to r215
   50: r215:SF=r215:SF/r93:SF
      REG_DEAD r93:SF
      REG_DEAD r91:SF
    Inserting insn reload before:
  275: r215:SF=r91:SF
    Inserting insn reload after:
  276: r94:SF=r215:SF

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 59:  (0) v  (1) m {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 61:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 63:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 80:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 82:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 86:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=216 from oldreg=172, assigning class CREG to r216
      Creating newreg=217 from oldreg=174, assigning class DIREG to r217
   86: {r216:DI=unspec[[r217:DI],r176:QI,0x1,r216:DI] 24;clobber r217:DI;clobber flags:CC;}
      REG_DEAD r176:QI
      REG_DEAD r175:DI
      REG_DEAD r174:DI
      REG_UNUSED r174:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  277: r216:DI=r175:DI
  279: r217:DI=r174:DI
    Inserting insn reload after:
  278: r172:DI=r216:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 92:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 100:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 105:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 107:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 110:  (0) q  (1) qn {*movqi_internal}
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            0 Early clobber: reject++
            1 Small class reload: reject+=3
            1 Non input pseudo reload: reject++
            4 Matching earlyclobber alt: reject--
            4 Dying matched operand reload: reject++
            4 Small class reload: reject+=3
            5 Small class reload: reject+=3
          alt=0,overall=33,losers=3,rld_nregs=4
	 Choosing alt 0 in insn 111:  (0) =&c  (1) =D  (2) a  (3) i  (4) 0  (5) 1 {*strlenqi_1}
      Creating newreg=218 from oldreg=181, assigning class CREG to r218
      Creating newreg=219 from oldreg=183, assigning class DIREG to r219
  111: {r218:DI=unspec[[r219:DI],r185:QI,0x1,r218:DI] 24;clobber r219:DI;clobber flags:CC;}
      REG_DEAD r185:QI
      REG_DEAD r184:DI
      REG_DEAD r183:DI
      REG_UNUSED r183:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  280: r218:DI=r184:DI
  282: r219:DI=r183:DI
    Inserting insn reload after:
  281: r181:DI=r218:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =rm  (1) 0 {*one_cmpldi2_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 113:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 117:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 130:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 133:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 136:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 139:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 142:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 145:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) rm {extendhisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 154:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 159:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 161:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 162:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 165:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 168:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 171:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 179:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 184:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 187:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 190:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 196:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 202:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 203:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 204:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 206:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 208:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 209:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 210:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 212:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 215:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 224:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 226
	 Choosing alt 0 in insn 226:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 227:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 231:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 238:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 240
	 Choosing alt 0 in insn 240:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 241:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 243:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 245:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 249:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 255:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 258:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 10
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
  BB 10
   Insn 273: point = 0
  BB 8
   Insn 260: point = 0
   Insn 259: point = 0
   Insn 258: point = 1
  BB 3
   Insn 265: point = 2
   Insn 25: point = 2
   Insn 24: point = 2
   Insn 23: point = 3
  BB 7
   Insn 256: point = 4
   Insn 255: point = 4
  BB 5
   Insn 220: point = 4
   Insn 219: point = 4
   Insn 218: point = 5
   Insn 217: point = 7
   Insn 216: point = 9
   Insn 215: point = 10
   Insn 214: point = 12
  BB 6
   Insn 267: point = 13
   Insn 249: point = 13
   Insn 248: point = 13
   Insn 247: point = 13
   Insn 246: point = 13
   Insn 245: point = 14
   Insn 244: point = 14
   Insn 243: point = 15
   Insn 242: point = 16
   Insn 241: point = 18
   Insn 240: point = 20
   Insn 239: point = 22
   Insn 238: point = 23
   Insn 237: point = 25
   Insn 236: point = 27
   Insn 235: point = 29
   Insn 234: point = 30
   Insn 233: point = 30
   Insn 232: point = 30
   Insn 231: point = 31
   Insn 230: point = 31
   Insn 229: point = 32
   Insn 228: point = 33
   Insn 227: point = 35
   Insn 226: point = 37
   Insn 225: point = 39
   Insn 224: point = 40
   Insn 223: point = 42
   Insn 222: point = 44
  BB 4
   Insn 212: point = 45
   Insn 211: point = 45
   Insn 210: point = 45
   Insn 209: point = 45
   Insn 208: point = 45
   Insn 207: point = 45
   Insn 206: point = 46
   Insn 205: point = 47
   Insn 204: point = 47
   Insn 203: point = 47
   Insn 202: point = 47
   Insn 201: point = 47
   Insn 200: point = 48
   Insn 199: point = 49
   Insn 198: point = 49
   Insn 197: point = 49
   Insn 196: point = 50
   Insn 195: point = 50
   Insn 194: point = 51
   Insn 193: point = 52
   Insn 192: point = 53
   Insn 191: point = 54
   Insn 190: point = 56
   Insn 189: point = 58
   Insn 188: point = 59
   Insn 187: point = 61
   Insn 186: point = 63
   Insn 185: point = 64
   Insn 184: point = 66
   Insn 183: point = 68
   Insn 182: point = 69
   Insn 181: point = 69
   Insn 180: point = 69
   Insn 179: point = 70
   Insn 178: point = 70
   Insn 177: point = 71
   Insn 176: point = 72
   Insn 175: point = 73
   Insn 174: point = 74
   Insn 173: point = 75
   Insn 172: point = 76
   Insn 171: point = 78
   Insn 170: point = 80
   Insn 169: point = 81
   Insn 168: point = 83
   Insn 167: point = 85
   Insn 166: point = 86
   Insn 165: point = 88
   Insn 164: point = 90
   Insn 163: point = 91
   Insn 162: point = 93
   Insn 161: point = 95
   Insn 160: point = 96
   Insn 159: point = 98
   Insn 158: point = 100
   Insn 157: point = 101
   Insn 156: point = 101
   Insn 155: point = 101
   Insn 154: point = 102
   Insn 153: point = 102
   Insn 152: point = 103
   Insn 151: point = 104
   Insn 150: point = 105
   Insn 149: point = 106
   Insn 148: point = 107
   Insn 147: point = 108
   Insn 146: point = 109
   Insn 145: point = 111
   Insn 144: point = 113
   Insn 143: point = 114
   Insn 142: point = 116
   Insn 141: point = 118
   Insn 140: point = 119
   Insn 139: point = 121
   Insn 138: point = 123
   Insn 137: point = 124
   Insn 136: point = 126
   Insn 135: point = 128
   Insn 134: point = 129
   Insn 133: point = 131
   Insn 132: point = 133
   Insn 131: point = 134
   Insn 130: point = 136
   Insn 129: point = 138
   Insn 128: point = 139
   Insn 127: point = 139
   Insn 126: point = 139
   Insn 125: point = 140
   Insn 124: point = 140
   Insn 123: point = 141
   Insn 122: point = 142
   Insn 121: point = 143
   Insn 120: point = 143
   Insn 119: point = 144
   Insn 118: point = 145
   Insn 117: point = 147
   Insn 116: point = 148
   Insn 115: point = 148
   Insn 113: point = 150
   Insn 112: point = 152
   Insn 281: point = 154
	Hard reg 0 is preferable by r218 with profit 1
   Insn 111: point = 156
   Insn 282: point = 158
	Hard reg 4 is preferable by r219 with profit 1
   Insn 280: point = 160
	Hard reg 0 is preferable by r218 with profit 1
	Hard reg 2 is preferable by r218 with profit 1
   Insn 110: point = 162
   Insn 109: point = 163
   Insn 108: point = 165
   Insn 114: point = 166
   Insn 107: point = 167
   Insn 106: point = 169
   Insn 105: point = 170
   Insn 104: point = 172
   Insn 103: point = 173
   Insn 102: point = 173
   Insn 101: point = 173
   Insn 100: point = 174
   Insn 99: point = 174
   Insn 98: point = 175
   Insn 97: point = 176
   Insn 96: point = 177
   Insn 95: point = 177
   Insn 94: point = 178
   Insn 93: point = 179
   Insn 92: point = 181
   Insn 91: point = 182
   Insn 90: point = 182
   Insn 88: point = 184
   Insn 87: point = 186
   Insn 278: point = 188
	Hard reg 0 is preferable by r216 with profit 1
   Insn 86: point = 190
   Insn 279: point = 192
	Hard reg 4 is preferable by r217 with profit 1
   Insn 277: point = 194
	Hard reg 0 is preferable by r216 with profit 1
	Hard reg 2 is preferable by r216 with profit 1
   Insn 85: point = 196
   Insn 84: point = 197
   Insn 83: point = 199
   Insn 89: point = 200
   Insn 82: point = 201
   Insn 81: point = 203
   Insn 80: point = 204
   Insn 79: point = 206
   Insn 78: point = 207
   Insn 77: point = 207
   Insn 76: point = 207
   Insn 75: point = 208
   Insn 74: point = 208
   Insn 73: point = 209
   Insn 72: point = 210
   Insn 71: point = 212
   Insn 70: point = 213
   Insn 69: point = 213
   Insn 68: point = 213
   Insn 67: point = 214
   Insn 66: point = 214
   Insn 65: point = 215
   Insn 64: point = 216
   Insn 63: point = 218
   Insn 62: point = 219
   Insn 61: point = 221
   Insn 60: point = 223
   Insn 59: point = 224
   Insn 58: point = 226
   Insn 57: point = 227
   Insn 56: point = 227
   Insn 55: point = 227
   Insn 54: point = 228
   Insn 53: point = 228
   Insn 52: point = 229
   Insn 51: point = 230
   Insn 276: point = 232
	Hard reg 21 is preferable by r215 with profit 1
   Insn 50: point = 234
   Insn 275: point = 235
	Hard reg 21 is preferable by r215 with profit 1
	Hard reg 22 is preferable by r215 with profit 1
   Insn 49: point = 237
   Insn 48: point = 239
   Insn 47: point = 241
   Insn 46: point = 242
   Insn 45: point = 244
   Insn 44: point = 245
   Insn 43: point = 245
   Insn 42: point = 245
   Insn 41: point = 245
   Insn 40: point = 245
   Insn 39: point = 246
   Insn 38: point = 247
   Insn 37: point = 247
   Insn 36: point = 247
   Insn 35: point = 248
   Insn 34: point = 248
   Insn 33: point = 249
   Insn 32: point = 250
   Insn 31: point = 252
   Insn 30: point = 254
  BB 2
   Insn 21: point = 255
   Insn 20: point = 255
   Insn 19: point = 256
   Insn 18: point = 257
   Insn 17: point = 257
   Insn 16: point = 258
   Insn 15: point = 259
   Insn 14: point = 259
   Insn 13: point = 260
   Insn 12: point = 260
   Insn 11: point = 261
   Insn 7: point = 261
   Insn 6: point = 261
   Insn 5: point = 261
   Insn 4: point = 261
   Insn 3: point = 261
   Insn 2: point = 261
 r87: [257..258]
 r88: [255..256]
 r89: [251..252]
 r90: [248..250]
 r91: [236..242]
 r92: [238..239]
 r93: [234..237]
 r94: [231..232]
 r95: [228..230]
 r96: [220..224]
 r97: [220..221]
 r98: [217..219]
 r99: [214..216]
 r100: [208..210]
 r101: [178..204]
 r102: [180..201]
 r103: [183..184]
 r104: [181..182]
 r105: [177..179]
 r106: [174..176]
 r107: [144..170]
 r108: [146..167]
 r109: [149..150]
 r110: [147..148]
 r111: [143..145]
 r112: [140..142]
 r113: [135..136]
 r114: [107..134]
 r115: [130..131]
 r116: [106..129]
 r117: [125..126]
 r118: [105..124]
 r119: [120..121]
 r120: [104..119]
 r121: [115..116]
 r122: [103..114]
 r123: [110..111]
 r124: [102..109]
 r125: [97..98]
 r126: [74..96]
 r127: [92..93]
 r128: [73..91]
 r129: [87..88]
 r130: [72..86]
 r131: [82..83]
 r132: [71..81]
 r133: [77..78]
 r134: [70..76]
 r135: [65..66]
 r136: [52..64]
 r137: [60..61]
 r138: [51..59]
 r139: [55..56]
 r140: [50..54]
 r141: [4..10]
 r142: [6..7]
 r143: [4..5]
 r144: [41..42]
 r145: [38..40]
 r146: [36..37]
 r147: [34..35]
 r148: [31..33]
 r149: [26..27]
 r150: [24..25]
 r151: [21..23]
 r152: [19..20]
 r153: [17..18]
 r154: [14..16]
 r155: [259..260]
 r156: [2..3]
 r157: [253..254]
 r158: [247..249]
 r159: [245..246]
 r160: [243..244]
 r161: [240..241]
 r162: [227..229]
 r163: [225..226]
 r164: [222..223]
 r165: [217..218]
 r166: [213..215]
 r167: [211..212]
 r168: [207..209]
 r169: [205..206]
 r170: [202..203]
 r171: [198..200]
 r172: [187..188]
 r173: [185..186]
 r174: [193..197]
 r175: [195..199]
 r176: [191..196]
 r177: [173..175]
 r178: [171..172]
 r179: [168..169]
 r180: [164..166]
 r181: [153..154]
 r182: [151..152]
 r183: [159..163]
 r184: [161..165]
 r185: [157..162]
 r186: [139..141]
 r187: [137..138]
 r188: [132..133]
 r189: [127..128]
 r190: [122..123]
 r191: [117..118]
 r192: [112..113]
 r193: [101..108]
 r194: [99..100]
 r195: [94..95]
 r196: [89..90]
 r197: [84..85]
 r198: [79..80]
 r199: [69..75]
 r200: [67..68]
 r201: [62..63]
 r202: [57..58]
 r203: [49..53]
 r204: [47..48]
 r205: [45..46]
 r206: [11..12]
 r207: [8..9]
 r208: [43..44]
 r209: [38..39]
 r210: [30..32]
 r211: [28..29]
 r212: [21..22]
 r213: [13..15]
 r214: [0..1]
 r215: [233..235]
 r216: [189..194]
 r217: [190..192]
 r218: [155..160]
 r219: [156..158]
Compressing live ranges: from 261 to 194 - 74%
Ranges after the compression:
 r87: [190..191]
 r88: [188..189]
 r89: [184..185]
 r90: [182..183]
 r91: [172..177]
 r92: [174..175]
 r93: [170..173]
 r94: [168..169]
 r95: [166..167]
 r96: [160..163]
 r97: [160..161]
 r98: [158..159]
 r99: [156..157]
 r100: [152..153]
 r101: [130..149]
 r102: [132..147]
 r103: [134..135]
 r104: [132..133]
 r105: [130..131]
 r106: [128..129]
 r107: [106..125]
 r108: [108..123]
 r109: [110..111]
 r110: [108..109]
 r111: [106..107]
 r112: [104..105]
 r113: [100..101]
 r114: [78..99]
 r115: [96..97]
 r116: [78..95]
 r117: [92..93]
 r118: [78..91]
 r119: [88..89]
 r120: [78..87]
 r121: [84..85]
 r122: [78..83]
 r123: [80..81]
 r124: [78..79]
 r125: [74..75]
 r126: [56..73]
 r127: [70..71]
 r128: [56..69]
 r129: [66..67]
 r130: [56..65]
 r131: [62..63]
 r132: [56..61]
 r133: [58..59]
 r134: [56..57]
 r135: [52..53]
 r136: [42..51]
 r137: [48..49]
 r138: [42..47]
 r139: [44..45]
 r140: [42..43]
 r141: [4..9]
 r142: [6..7]
 r143: [4..5]
 r144: [34..35]
 r145: [32..33]
 r146: [30..31]
 r147: [28..29]
 r148: [26..27]
 r149: [22..23]
 r150: [20..21]
 r151: [18..19]
 r152: [16..17]
 r153: [14..15]
 r154: [12..13]
 r155: [192..193]
 r156: [2..3]
 r157: [186..187]
 r158: [182..183]
 r159: [180..181]
 r160: [178..179]
 r161: [176..177]
 r162: [166..167]
 r163: [164..165]
 r164: [162..163]
 r165: [158..159]
 r166: [156..157]
 r167: [154..155]
 r168: [152..153]
 r169: [150..151]
 r170: [148..149]
 r171: [146..147]
 r172: [138..139]
 r173: [136..137]
 r174: [142..145]
 r175: [144..147]
 r176: [140..145]
 r177: [128..129]
 r178: [126..127]
 r179: [124..125]
 r180: [122..123]
 r181: [114..115]
 r182: [112..113]
 r183: [118..121]
 r184: [120..123]
 r185: [116..121]
 r186: [104..105]
 r187: [102..103]
 r188: [98..99]
 r189: [94..95]
 r190: [90..91]
 r191: [86..87]
 r192: [82..83]
 r193: [78..79]
 r194: [76..77]
 r195: [72..73]
 r196: [68..69]
 r197: [64..65]
 r198: [60..61]
 r199: [56..57]
 r200: [54..55]
 r201: [50..51]
 r202: [46..47]
 r203: [42..43]
 r204: [40..41]
 r205: [38..39]
 r206: [10..11]
 r207: [8..9]
 r208: [36..37]
 r209: [32..33]
 r210: [26..27]
 r211: [24..25]
 r212: [18..19]
 r213: [12..13]
 r214: [0..1]
 r215: [170..171]
 r216: [140..143]
 r217: [140..141]
 r218: [116..119]
 r219: [116..117]

********** Assignment #1: **********

	 Assigning to 216 (cl=CREG, orig=172, freq=3, tfirst=216, tfreq=3)...
	   Assign 2 to reload r216 (freq=3)
	 Assigning to 218 (cl=CREG, orig=181, freq=3, tfirst=218, tfreq=3)...
	   Assign 2 to reload r218 (freq=3)
	 Assigning to 217 (cl=DIREG, orig=174, freq=2, tfirst=217, tfreq=2)...
	   Assign 5 to reload r217 (freq=2)
	 Assigning to 219 (cl=DIREG, orig=183, freq=2, tfirst=219, tfreq=2)...
	   Assign 5 to reload r219 (freq=2)
	 Assigning to 215 (cl=SSE_REGS, orig=94, freq=3, tfirst=215, tfreq=3)...
	   Assign 22 to reload r215 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 34
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 53
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 64
changing reg in insn 66
changing reg in insn 72
changing reg in insn 74
changing reg in insn 80
changing reg in insn 94
changing reg in insn 82
changing reg in insn 93
changing reg in insn 89
changing reg in insn 88
changing reg in insn 90
changing reg in insn 92
changing reg in insn 91
changing reg in insn 93
changing reg in insn 95
changing reg in insn 97
changing reg in insn 99
changing reg in insn 105
changing reg in insn 119
changing reg in insn 107
changing reg in insn 118
changing reg in insn 114
changing reg in insn 113
changing reg in insn 115
changing reg in insn 117
changing reg in insn 116
changing reg in insn 118
changing reg in insn 120
changing reg in insn 122
changing reg in insn 124
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 148
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 149
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 150
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 151
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 152
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 153
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 174
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 175
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 176
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 177
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 178
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 193
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 194
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 195
changing reg in insn 215
changing reg in insn 219
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 226
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 242
changing reg in insn 242
changing reg in insn 244
changing reg in insn 12
changing reg in insn 14
changing reg in insn 23
changing reg in insn 24
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 89
changing reg in insn 84
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 84
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 98
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 114
changing reg in insn 109
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 109
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 123
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
changing reg in insn 147
changing reg in insn 155
changing reg in insn 158
changing reg in insn 159
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 180
changing reg in insn 183
changing reg in insn 184
changing reg in insn 186
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 192
changing reg in insn 197
changing reg in insn 200
changing reg in insn 201
changing reg in insn 206
changing reg in insn 207
changing reg in insn 214
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 222
changing reg in insn 223
changing reg in insn 225
changing reg in insn 229
changing reg in insn 232
changing reg in insn 235
changing reg in insn 236
changing reg in insn 239
changing reg in insn 243
changing reg in insn 246
changing reg in insn 258
changing reg in insn 259
deleting insn with uid = 16.
deleting insn with uid = 34.
deleting insn with uid = 275.
deleting insn with uid = 53.
deleting insn with uid = 66.
deleting insn with uid = 74.
deleting insn with uid = 277.
deleting insn with uid = 99.
deleting insn with uid = 280.
deleting insn with uid = 124.
deleting insn with uid = 148.
deleting insn with uid = 149.
deleting insn with uid = 150.
deleting insn with uid = 151.
deleting insn with uid = 152.
deleting insn with uid = 153.
deleting insn with uid = 174.
deleting insn with uid = 175.
deleting insn with uid = 176.
deleting insn with uid = 177.
deleting insn with uid = 178.
deleting insn with uid = 193.
deleting insn with uid = 194.
deleting insn with uid = 195.
deleting insn with uid = 230.
deleting insn with uid = 244.
starting the processing of deferred insns
ending the processing of deferred insns


void fwrite_asc(char*, float*, Data_file_header*, Data_block_header*, int, Procpar_info*, Preprocess*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 37[r8] 38[r9]
;;  ref usage 	r0={103d,88u} r1={33d,18u,2e} r2={27d,8u} r4={39d,20u} r5={43d,22u} r6={1d,70u} r7={1d,29u} r8={19d} r9={19d} r10={19d} r11={19d} r12={19d} r13={19d} r14={19d} r15={19d} r17={41d,4u} r18={19d} r19={19d} r20={1d,1u,6e} r21={46d,26u} r22={27d,7u} r23={23d,3u} r24={22d,2u} r25={22d,2u} r26={20d} r27={20d} r28={20d} r29={19d} r30={19d} r31={19d} r32={19d} r33={19d} r34={19d} r35={19d} r36={19d} r37={22d,3u} r38={20d,1u} r39={19d} r40={19d} r45={19d} r46={19d} r47={19d} r48={19d} r49={19d} r50={19d} r51={19d} r52={19d} r53={19d} r54={19d} r55={19d} r56={19d} r57={19d} r58={19d} r59={19d} r60={19d} r61={19d} r62={19d} r63={19d} r64={19d} r65={19d} r66={19d} r67={19d} r68={19d} r69={19d} r70={19d} r71={19d} r72={19d} r73={19d} r74={19d} r75={19d} r76={19d} r77={19d} r78={19d} r79={19d} r80={19d} 
;;    total ref usage 1907{1595d,304u,8e} in 228{209 regular + 19 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 155
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])
        (reg:DI 5 di [ outfile_name ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
        (reg:DI 4 si [ data ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 block_header+0 S8 A64])
        (reg:DI 2 cx [ block_header ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 index1+0 S4 A32])
        (reg:SI 37 r8 [ index1 ])) ge2fitman_fmtext_o.cpp:589 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
        (reg:DI 38 r9 [ procpar_info ])) ge2fitman_fmtext_o.cpp:589 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:597 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])) ge2fitman_fmtext_o.cpp:599 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f7c3725fd80 *.LC16>)) ge2fitman_fmtext_o.cpp:599 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [155])) ge2fitman_fmtext_o.cpp:599 89 {*movdi_internal}
     (nil))
(call_insn 15 14 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f7c387cb6c0 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:599 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 15 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 D.25558 ] [87])) ge2fitman_fmtext_o.cpp:599 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:599 4 {*cmpdi_ccno_1}
     (nil))
(insn 19 18 20 2 (set (reg:QI 0 ax [orig:88 D.25559 ] [88])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:599 607 {*setcc_qi}
     (nil))
(insn 20 19 21 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.25559 ] [88])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:599 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) ge2fitman_fmtext_o.cpp:599 612 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 156
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 outfile_name+0 S8 A64])) ge2fitman_fmtext_o.cpp:600 89 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [156])) ge2fitman_fmtext_o.cpp:600 89 {*movdi_internal}
     (nil))
(call_insn 25 24 265 3 (call (mem:QI (symbol_ref:DI ("_Z7exit_08Pc") [flags 0x41]  <function_decl 0x7f7c37550798 exit_08>) [0 exit_08 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:600 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 265 25 266 3 (set (pc)
        (label_ref:DI 272)) ge2fitman_fmtext_o.cpp:645 654 {jump}
     (nil)
 -> 272)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 266 265 28)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205
(code_label 28 266 29 4 48 "" [1 uses])
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:603 89 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 0 ax [orig:89 D.25560 ] [89])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [157])
                (const_int 324 [0x144])) [0 procpar_info_12(D)->num_points+0 S4 A32])) ge2fitman_fmtext_o.cpp:603 90 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 1 dx [orig:90 D.25560 ] [90])
                (ashift:SI (reg:SI 0 ax [orig:89 D.25560 ] [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:603 511 {*ashlsi3_1}
     (nil))
(insn 33 32 35 4 (set (reg:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:603 89 {*movdi_internal}
     (nil))
(insn 35 33 36 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f7c3725fe10 *.LC17>)) ge2fitman_fmtext_o.cpp:603 89 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [158])) ge2fitman_fmtext_o.cpp:603 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:603 93 {*movqi_internal}
     (nil))
(call_insn 38 37 39 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:603 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 39 38 40 4 (set (reg:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [159])) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 1 dx)
        (const_int 2 [0x2])) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f7c3725fea0 *.LC18>)) ge2fitman_fmtext_o.cpp:605 89 {*movdi_internal}
     (nil))
(call_insn 44 43 45 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f7c3899a000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:605 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SF 22 xmm1 [orig:91 D.25561 ] [91])
        (mem/j:SF (reg/f:DI 0 ax [160]) [0 procpar_info_12(D)->acquision_time+0 S4 A64])) ge2fitman_fmtext_o.cpp:607 129 {*movsf_internal}
     (nil))
(insn 47 46 48 4 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SI 0 ax [orig:92 D.25560 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 324 [0x144])) [0 procpar_info_12(D)->num_points+0 S4 A32])) ge2fitman_fmtext_o.cpp:607 90 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:SF 21 xmm0 [orig:93 D.25561 ] [93])
        (float:SF (reg:SI 0 ax [orig:92 D.25560 ] [92]))) ge2fitman_fmtext_o.cpp:607 199 {*floatsisf2_sse}
     (nil))
(insn 50 49 276 4 (set (reg:SF 22 xmm1 [orig:94 D.25561 ] [94])
        (div:SF (reg:SF 22 xmm1 [orig:94 D.25561 ] [94])
            (reg:SF 21 xmm0 [orig:93 D.25561 ] [93]))) ge2fitman_fmtext_o.cpp:607 804 {*fop_sf_1_sse}
     (nil))
(insn 276 50 51 4 (set (reg:SF 21 xmm0 [orig:94 D.25561 ] [94])
        (reg:SF 22 xmm1 [orig:94 D.25561 ] [94])) ge2fitman_fmtext_o.cpp:607 129 {*movsf_internal}
     (nil))
(insn 51 276 52 4 (set (reg:DF 21 xmm0 [orig:95 D.25562 ] [95])
        (float_extend:DF (reg:SF 21 xmm0 [orig:94 D.25561 ] [94]))) ge2fitman_fmtext_o.cpp:607 152 {*extendsfdf2_sse}
     (nil))
(insn 52 51 54 4 (set (reg:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 54 52 55 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f7c3725ff30 *.LC19>)) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [162])) ge2fitman_fmtext_o.cpp:607 89 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:607 93 {*movqi_internal}
     (nil))
(call_insn 57 56 58 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:607 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:609 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:DF 22 xmm1 [orig:96 D.25562 ] [96])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [163])
                (const_int 328 [0x148])) [0 procpar_info_12(D)->main_frequency+0 S8 A64])) ge2fitman_fmtext_o.cpp:609 128 {*movdf_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DF 21 xmm0 [orig:97 D.25562 ] [97])
        (mem/j:DF (plus:DI (reg/f:DI 0 ax [164])
                (const_int 336 [0x150])) [0 procpar_info_12(D)->offset_frequency+0 S8 A64])) ge2fitman_fmtext_o.cpp:610 128 {*movdf_internal}
     (nil))
(insn 62 61 63 4 (set (reg:DF 21 xmm0 [orig:98 D.25562 ] [98])
        (plus:DF (reg:DF 21 xmm0 [orig:97 D.25562 ] [97])
            (reg:DF 22 xmm1 [orig:96 D.25562 ] [96]))) ge2fitman_fmtext_o.cpp:609 798 {*fop_df_comm_sse}
     (nil))
(insn 63 62 64 4 (set (reg:DF 22 xmm1 [165])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S8 A64])) ge2fitman_fmtext_o.cpp:609 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+7 [0x0.98968p+24])
        (nil)))
(insn 64 63 65 4 (set (reg:DF 21 xmm0 [orig:99 D.25562 ] [99])
        (div:DF (reg:DF 21 xmm0 [orig:98 D.25562 ] [98])
            (reg:DF 22 xmm1 [165]))) ge2fitman_fmtext_o.cpp:609 805 {*fop_df_1_sse}
     (nil))
(insn 65 64 67 4 (set (reg:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 67 65 68 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f7c3726d000 *.LC21>)) ge2fitman_fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [166])) ge2fitman_fmtext_o.cpp:610 89 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:610 93 {*movqi_internal}
     (nil))
(call_insn 70 69 71 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:610 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 71 70 72 4 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:612 89 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg:SI 1 dx [orig:100 D.25560 ] [100])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [167])
                (const_int 320 [0x140])) [0 procpar_info_12(D)->num_transients+0 S4 A64])) ge2fitman_fmtext_o.cpp:612 90 {*movsi_internal}
     (nil))
(insn 73 72 75 4 (set (reg:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:612 89 {*movdi_internal}
     (nil))
(insn 75 73 76 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f7c3725fe10 *.LC17>)) ge2fitman_fmtext_o.cpp:612 89 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [168])) ge2fitman_fmtext_o.cpp:612 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:612 93 {*movqi_internal}
     (nil))
(call_insn 78 77 79 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:612 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 79 78 80 4 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 80 79 81 4 (parallel [
            (set (reg/f:DI 37 r8 [orig:101 D.25563 ] [101])
                (plus:DI (reg/f:DI 0 ax [169])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:614 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 440 [0x1b8]))
        (nil)))
(insn 81 80 82 4 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 82 81 89 4 (parallel [
            (set (reg/f:DI 1 dx [orig:102 D.25564 ] [102])
                (plus:DI (reg/f:DI 0 ax [170])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:614 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 404 [0x194]))
        (nil)))
(insn 89 82 83 4 (set (reg:DI 0 ax [171])
        (reg/f:DI 1 dx [orig:102 D.25564 ] [102])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 83 89 84 4 (set (reg:DI 2 cx [175])
        (const_int -1 [0xffffffffffffffff])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 84 83 85 4 (set (reg:DI 4 si [174])
        (reg:DI 0 ax [171])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 85 84 279 4 (set (reg:QI 0 ax [176])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:614 93 {*movqi_internal}
     (nil))
(insn 279 85 86 4 (set (reg:DI 5 di [174])
        (reg:DI 4 si [174])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 86 279 278 4 (parallel [
            (set (reg:DI 2 cx [172])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [174]) [0  A8])
                        (reg:QI 0 ax [176])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [172])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [174]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:614 945 {*strlenqi_1}
     (nil))
(insn 278 86 87 4 (set (reg:DI 0 ax [172])
        (reg:DI 2 cx [172])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 87 278 88 4 (set (reg:DI 0 ax [173])
        (not:DI (reg:DI 0 ax [172]))) ge2fitman_fmtext_o.cpp:614 494 {*one_cmpldi2_1}
     (nil))
(insn 88 87 90 4 (parallel [
            (set (reg:DI 0 ax [orig:103 D.25565 ] [103])
                (plus:DI (reg:DI 0 ax [173])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:614 218 {*adddi_1}
     (nil))
(insn 90 88 91 4 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.25564 ] [104])
                (plus:DI (reg:DI 0 ax [orig:103 D.25565 ] [103])
                    (reg/f:DI 1 dx [orig:102 D.25564 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:614 218 {*adddi_1}
     (nil))
(insn 91 90 92 4 (set (mem:HI (reg/f:DI 0 ax [orig:104 D.25564 ] [104]) [0 MEM[(void *)_33]+0 S2 A8])
        (const_int 8236 [0x202c])) ge2fitman_fmtext_o.cpp:614 92 {*movhi_internal}
     (nil))
(insn 92 91 93 4 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:104 D.25564 ] [104])
                (const_int 2 [0x2])) [0 MEM[(void *)_33]+2 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:614 93 {*movqi_internal}
     (nil))
(insn 93 92 94 4 (set (reg/f:DI 0 ax [orig:105 D.25566 ] [105])
        (reg/f:DI 1 dx [orig:102 D.25564 ] [102])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 94 93 95 4 (set (reg:DI 4 si)
        (reg/f:DI 37 r8 [orig:101 D.25563 ] [101])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 95 94 96 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 D.25566 ] [105])) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(call_insn 96 95 97 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7f7c3898bd80 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:614 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 97 96 98 4 (set (reg/f:DI 1 dx [orig:106 D.25566 ] [106])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:614 89 {*movdi_internal}
     (nil))
(insn 98 97 100 4 (set (reg:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 100 98 101 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f7c3726d090 *.LC22>)) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 101 100 102 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [177])) ge2fitman_fmtext_o.cpp:615 89 {*movdi_internal}
     (nil))
(insn 102 101 103 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:615 93 {*movqi_internal}
     (nil))
(call_insn 103 102 104 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:615 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 104 103 105 4 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 105 104 106 4 (parallel [
            (set (reg/f:DI 37 r8 [orig:107 D.25567 ] [107])
                (plus:DI (reg/f:DI 0 ax [178])
                    (const_int 468 [0x1d4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:617 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 468 [0x1d4]))
        (nil)))
(insn 106 105 107 4 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 107 106 114 4 (parallel [
            (set (reg/f:DI 1 dx [orig:108 D.25568 ] [108])
                (plus:DI (reg/f:DI 0 ax [179])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:617 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])
            (const_int 4 [0x4]))
        (nil)))
(insn 114 107 108 4 (set (reg:DI 0 ax [180])
        (reg/f:DI 1 dx [orig:108 D.25568 ] [108])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 108 114 109 4 (set (reg:DI 2 cx [184])
        (const_int -1 [0xffffffffffffffff])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 109 108 110 4 (set (reg:DI 4 si [183])
        (reg:DI 0 ax [180])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 110 109 282 4 (set (reg:QI 0 ax [185])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:617 93 {*movqi_internal}
     (nil))
(insn 282 110 111 4 (set (reg:DI 5 di [183])
        (reg:DI 4 si [183])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 111 282 281 4 (parallel [
            (set (reg:DI 2 cx [181])
                (unspec:DI [
                        (mem:BLK (reg:DI 5 di [183]) [0  A8])
                        (reg:QI 0 ax [185])
                        (const_int 1 [0x1])
                        (reg:DI 2 cx [181])
                    ] UNSPEC_SCAS))
            (clobber (reg:DI 5 di [183]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:617 945 {*strlenqi_1}
     (nil))
(insn 281 111 112 4 (set (reg:DI 0 ax [181])
        (reg:DI 2 cx [181])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 112 281 113 4 (set (reg:DI 0 ax [182])
        (not:DI (reg:DI 0 ax [181]))) ge2fitman_fmtext_o.cpp:617 494 {*one_cmpldi2_1}
     (nil))
(insn 113 112 115 4 (parallel [
            (set (reg:DI 0 ax [orig:109 D.25565 ] [109])
                (plus:DI (reg:DI 0 ax [182])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:617 218 {*adddi_1}
     (nil))
(insn 115 113 116 4 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.25568 ] [110])
                (plus:DI (reg:DI 0 ax [orig:109 D.25565 ] [109])
                    (reg/f:DI 1 dx [orig:108 D.25568 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:617 218 {*adddi_1}
     (nil))
(insn 116 115 117 4 (set (mem:HI (reg/f:DI 0 ax [orig:110 D.25568 ] [110]) [0 MEM[(void *)_42]+0 S2 A8])
        (const_int 8236 [0x202c])) ge2fitman_fmtext_o.cpp:617 92 {*movhi_internal}
     (nil))
(insn 117 116 118 4 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:110 D.25568 ] [110])
                (const_int 2 [0x2])) [0 MEM[(void *)_42]+2 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:617 93 {*movqi_internal}
     (nil))
(insn 118 117 119 4 (set (reg/f:DI 0 ax [orig:111 D.25566 ] [111])
        (reg/f:DI 1 dx [orig:108 D.25568 ] [108])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 119 118 120 4 (set (reg:DI 4 si)
        (reg/f:DI 37 r8 [orig:107 D.25567 ] [107])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 120 119 121 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:111 D.25566 ] [111])) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(call_insn 121 120 122 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcat") [flags 0x41]  <function_decl 0x7f7c3898bd80 strcat>) [0 __builtin_strcat S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:617 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 122 121 123 4 (set (reg/f:DI 1 dx [orig:112 D.25566 ] [112])
        (reg:DI 0 ax)) ge2fitman_fmtext_o.cpp:617 89 {*movdi_internal}
     (nil))
(insn 123 122 125 4 (set (reg:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 125 123 126 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f7c3726d090 *.LC22>)) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 126 125 127 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [186])) ge2fitman_fmtext_o.cpp:618 89 {*movdi_internal}
     (nil))
(insn 127 126 128 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:618 93 {*movqi_internal}
     (nil))
(call_insn 128 127 129 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:618 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 129 128 130 4 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 130 129 131 4 (set (reg:SF 21 xmm0 [orig:113 D.25561 ] [113])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [187])
                (const_int 400 [0x190])) [0 procpar_info_12(D)->vtheta+0 S4 A64])) ge2fitman_fmtext_o.cpp:622 129 {*movsf_internal}
     (nil))
(insn 131 130 132 4 (set (reg:DF 25 xmm4 [orig:114 D.25562 ] [114])
        (float_extend:DF (reg:SF 21 xmm0 [orig:113 D.25561 ] [113]))) ge2fitman_fmtext_o.cpp:620 152 {*extendsfdf2_sse}
     (nil))
(insn 132 131 133 4 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 133 132 134 4 (set (reg:SF 21 xmm0 [orig:115 D.25561 ] [115])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [188])
                (const_int 384 [0x180])) [0 procpar_info_12(D)->vox3+0 S4 A64])) ge2fitman_fmtext_o.cpp:622 129 {*movsf_internal}
     (nil))
(insn 134 133 135 4 (set (reg:DF 24 xmm3 [orig:116 D.25562 ] [116])
        (float_extend:DF (reg:SF 21 xmm0 [orig:115 D.25561 ] [115]))) ge2fitman_fmtext_o.cpp:620 152 {*extendsfdf2_sse}
     (nil))
(insn 135 134 136 4 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 136 135 137 4 (set (reg:SF 21 xmm0 [orig:117 D.25561 ] [117])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [189])
                (const_int 380 [0x17c])) [0 procpar_info_12(D)->vox2+0 S4 A32])) ge2fitman_fmtext_o.cpp:622 129 {*movsf_internal}
     (nil))
(insn 137 136 138 4 (set (reg:DF 23 xmm2 [orig:118 D.25562 ] [118])
        (float_extend:DF (reg:SF 21 xmm0 [orig:117 D.25561 ] [117]))) ge2fitman_fmtext_o.cpp:620 152 {*extendsfdf2_sse}
     (nil))
(insn 138 137 139 4 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:621 89 {*movdi_internal}
     (nil))
(insn 139 138 140 4 (set (reg:SF 21 xmm0 [orig:119 D.25561 ] [119])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [190])
                (const_int 376 [0x178])) [0 procpar_info_12(D)->vox1+0 S4 A64])) ge2fitman_fmtext_o.cpp:621 129 {*movsf_internal}
     (nil))
(insn 140 139 141 4 (set (reg:DF 22 xmm1 [orig:120 D.25562 ] [120])
        (float_extend:DF (reg:SF 21 xmm0 [orig:119 D.25561 ] [119]))) ge2fitman_fmtext_o.cpp:620 152 {*extendsfdf2_sse}
     (nil))
(insn 141 140 142 4 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 16 [0x10])) [0 preprocess+0 S8 A64])) ge2fitman_fmtext_o.cpp:621 89 {*movdi_internal}
     (nil))
(insn 142 141 143 4 (set (reg:SF 21 xmm0 [orig:121 D.25561 ] [121])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [191])
                (const_int 4 [0x4])) [0 preprocess_56(D)->scale_factor+0 S4 A32])) ge2fitman_fmtext_o.cpp:621 129 {*movsf_internal}
     (nil))
(insn 143 142 144 4 (set (reg:DF 21 xmm0 [orig:122 D.25562 ] [122])
        (float_extend:DF (reg:SF 21 xmm0 [orig:121 D.25561 ] [121]))) ge2fitman_fmtext_o.cpp:620 152 {*extendsfdf2_sse}
     (nil))
(insn 144 143 145 4 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 block_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:621 89 {*movdi_internal}
     (nil))
(insn 145 144 146 4 (set (reg:HI 0 ax [orig:123 D.25569 ] [123])
        (mem/j:HI (reg/f:DI 0 ax [192]) [0 block_header_59(D)->scale.number+0 S2 A64])) ge2fitman_fmtext_o.cpp:621 92 {*movhi_internal}
     (nil))
(insn 146 145 147 4 (set (reg:SI 1 dx [orig:124 D.25560 ] [124])
        (sign_extend:SI (reg:HI 0 ax [orig:123 D.25569 ] [123]))) ge2fitman_fmtext_o.cpp:620 146 {extendhisi2}
     (nil))
(insn 147 146 154 4 (set (reg:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 154 147 155 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f7c3726d120 *.LC23>)) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 155 154 156 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [193])) ge2fitman_fmtext_o.cpp:622 89 {*movdi_internal}
     (nil))
(insn 156 155 157 4 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) ge2fitman_fmtext_o.cpp:622 93 {*movqi_internal}
     (nil))
(call_insn 157 156 158 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:622 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 21 xmm0))
                        (expr_list:DF (use (reg:DF 22 xmm1))
                            (expr_list:DF (use (reg:DF 23 xmm2))
                                (expr_list:DF (use (reg:DF 24 xmm3))
                                    (expr_list:DF (use (reg:DF 25 xmm4))
                                        (nil)))))))))))
(insn 158 157 159 4 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 159 158 160 4 (set (reg:SF 21 xmm0 [orig:125 D.25561 ] [125])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [194])
                (const_int 372 [0x174])) [0 procpar_info_12(D)->pos3+0 S4 A32])) ge2fitman_fmtext_o.cpp:626 129 {*movsf_internal}
     (nil))
(insn 160 159 161 4 (set (reg:DF 25 xmm4 [orig:126 D.25562 ] [126])
        (float_extend:DF (reg:SF 21 xmm0 [orig:125 D.25561 ] [125]))) ge2fitman_fmtext_o.cpp:624 152 {*extendsfdf2_sse}
     (nil))
(insn 161 160 162 4 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:625 89 {*movdi_internal}
     (nil))
(insn 162 161 163 4 (set (reg:SF 21 xmm0 [orig:127 D.25561 ] [127])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [195])
                (const_int 368 [0x170])) [0 procpar_info_12(D)->pos2+0 S4 A64])) ge2fitman_fmtext_o.cpp:625 129 {*movsf_internal}
     (nil))
(insn 163 162 164 4 (set (reg:DF 24 xmm3 [orig:128 D.25562 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.25561 ] [127]))) ge2fitman_fmtext_o.cpp:624 152 {*extendsfdf2_sse}
     (nil))
(insn 164 163 165 4 (set (reg/f:DI 0 ax [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:625 89 {*movdi_internal}
     (nil))
(insn 165 164 166 4 (set (reg:SF 21 xmm0 [orig:129 D.25561 ] [129])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [196])
                (const_int 364 [0x16c])) [0 procpar_info_12(D)->pos1+0 S4 A32])) ge2fitman_fmtext_o.cpp:625 129 {*movsf_internal}
     (nil))
(insn 166 165 167 4 (set (reg:DF 23 xmm2 [orig:130 D.25562 ] [130])
        (float_extend:DF (reg:SF 21 xmm0 [orig:129 D.25561 ] [129]))) ge2fitman_fmtext_o.cpp:624 152 {*extendsfdf2_sse}
     (nil))
(insn 167 166 168 4 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:625 89 {*movdi_internal}
     (nil))
(insn 168 167 169 4 (set (reg:SF 21 xmm0 [orig:131 D.25561 ] [131])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [197])
                (const_int 348 [0x15c])) [0 procpar_info_12(D)->tr+0 S4 A32])) ge2fitman_fmtext_o.cpp:625 129 {*movsf_internal}
     (nil))
(insn 169 168 170 4 (set (reg:DF 22 xmm1 [orig:132 D.25562 ] [132])
        (float_extend:DF (reg:SF 21 xmm0 [orig:131 D.25561 ] [131]))) ge2fitman_fmtext_o.cpp:624 152 {*extendsfdf2_sse}
     (nil))
(insn 170 169 171 4 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:625 89 {*movdi_internal}
     (nil))
(insn 171 170 172 4 (set (reg:SF 21 xmm0 [orig:133 D.25561 ] [133])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [198])
                (const_int 344 [0x158])) [0 procpar_info_12(D)->te+0 S4 A64])) ge2fitman_fmtext_o.cpp:625 129 {*movsf_internal}
     (nil))
(insn 172 171 173 4 (set (reg:DF 21 xmm0 [orig:134 D.25562 ] [134])
        (float_extend:DF (reg:SF 21 xmm0 [orig:133 D.25561 ] [133]))) ge2fitman_fmtext_o.cpp:624 152 {*extendsfdf2_sse}
     (nil))
(insn 173 172 179 4 (set (reg:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 179 173 180 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f7c3726d1b0 *.LC24>)) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 180 179 181 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [199])) ge2fitman_fmtext_o.cpp:626 89 {*movdi_internal}
     (nil))
(insn 181 180 182 4 (set (reg:QI 0 ax)
        (const_int 5 [0x5])) ge2fitman_fmtext_o.cpp:626 93 {*movqi_internal}
     (nil))
(call_insn 182 181 183 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:626 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (expr_list:DF (use (reg:DF 24 xmm3))
                                (expr_list:DF (use (reg:DF 25 xmm4))
                                    (nil))))))))))
(insn 183 182 184 4 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 184 183 185 4 (set (reg:SF 21 xmm0 [orig:135 D.25561 ] [135])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [200])
                (const_int 356 [0x164])) [0 procpar_info_12(D)->R2+0 S4 A32])) ge2fitman_fmtext_o.cpp:629 129 {*movsf_internal}
     (nil))
(insn 185 184 186 4 (set (reg:DF 23 xmm2 [orig:136 D.25562 ] [136])
        (float_extend:DF (reg:SF 21 xmm0 [orig:135 D.25561 ] [135]))) ge2fitman_fmtext_o.cpp:628 152 {*extendsfdf2_sse}
     (nil))
(insn 186 185 187 4 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 187 186 188 4 (set (reg:SF 21 xmm0 [orig:137 D.25561 ] [137])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [201])
                (const_int 352 [0x160])) [0 procpar_info_12(D)->R1+0 S4 A64])) ge2fitman_fmtext_o.cpp:629 129 {*movsf_internal}
     (nil))
(insn 188 187 189 4 (set (reg:DF 22 xmm1 [orig:138 D.25562 ] [138])
        (float_extend:DF (reg:SF 21 xmm0 [orig:137 D.25561 ] [137]))) ge2fitman_fmtext_o.cpp:628 152 {*extendsfdf2_sse}
     (nil))
(insn 189 188 190 4 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 190 189 191 4 (set (reg:SF 21 xmm0 [orig:139 D.25561 ] [139])
        (mem/j:SF (plus:DI (reg/f:DI 0 ax [202])
                (const_int 360 [0x168])) [0 procpar_info_12(D)->gain+0 S4 A64])) ge2fitman_fmtext_o.cpp:629 129 {*movsf_internal}
     (nil))
(insn 191 190 192 4 (set (reg:DF 21 xmm0 [orig:140 D.25562 ] [140])
        (float_extend:DF (reg:SF 21 xmm0 [orig:139 D.25561 ] [139]))) ge2fitman_fmtext_o.cpp:628 152 {*extendsfdf2_sse}
     (nil))
(insn 192 191 196 4 (set (reg:DI 0 ax [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 196 192 197 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f7c3726d240 *.LC25>)) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 197 196 198 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [203])) ge2fitman_fmtext_o.cpp:629 89 {*movdi_internal}
     (nil))
(insn 198 197 199 4 (set (reg:QI 0 ax)
        (const_int 3 [0x3])) ge2fitman_fmtext_o.cpp:629 93 {*movqi_internal}
     (nil))
(call_insn 199 198 200 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:629 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (expr_list:DF (use (reg:DF 22 xmm1))
                        (expr_list:DF (use (reg:DF 23 xmm2))
                            (nil))))))))
(insn 200 199 201 4 (set (reg:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(insn 201 200 202 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [204])) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(insn 202 201 203 4 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(insn 203 202 204 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(insn 204 203 205 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f7c3726d2d0 *.LC26>)) ge2fitman_fmtext_o.cpp:631 89 {*movdi_internal}
     (nil))
(call_insn 205 204 206 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f7c3899a000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:631 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 206 205 207 4 (set (reg:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(insn 207 206 208 4 (set (reg:DI 2 cx)
        (reg:DI 0 ax [205])) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(insn 208 207 209 4 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(insn 209 208 210 4 (set (reg:DI 4 si)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(insn 210 209 211 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f7c3726d360 *.LC27>)) ge2fitman_fmtext_o.cpp:633 89 {*movdi_internal}
     (nil))
(call_insn 211 210 212 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f7c3899a000 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:633 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 212 211 250 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:637 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 206 207
(code_label 250 212 213 5 51 "" [1 uses])
(note 213 250 214 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 5 (set (reg:SI 0 ax [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) ge2fitman_fmtext_o.cpp:637 90 {*movsi_internal}
     (nil))
(insn 215 214 216 5 (set (reg:DI 1 dx [orig:141 D.25570 ] [141])
        (sign_extend:DI (reg:SI 0 ax [206]))) ge2fitman_fmtext_o.cpp:637 142 {*extendsidi2_rex64}
     (nil))
(insn 216 215 217 5 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:637 89 {*movdi_internal}
     (nil))
(insn 217 216 218 5 (set (reg:DI 0 ax [orig:142 D.25570 ] [142])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [207])
                (const_int 16 [0x10])) [0 main_header_85(D)->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:637 89 {*movdi_internal}
     (nil))
(insn 218 217 219 5 (parallel [
            (set (reg:DI 0 ax [orig:143 D.25570 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.25570 ] [142])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:637 512 {*ashldi3_1}
     (nil))
(insn 219 218 220 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 1 dx [orig:141 D.25570 ] [141])
            (reg:DI 0 ax [orig:143 D.25570 ] [143]))) ge2fitman_fmtext_o.cpp:637 8 {*cmpdi_1}
     (nil))
(jump_insn 220 219 221 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 253)
            (pc))) ge2fitman_fmtext_o.cpp:637 612 {*jcc_1}
     (nil)
 -> 253)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144 145 146 147 148 149 150 151 152 153 154 208 209 210 211 212 213
(note 221 220 222 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 222 221 223 6 (set (reg:SI 0 ax [208])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) ge2fitman_fmtext_o.cpp:638 90 {*movsi_internal}
     (nil))
(insn 223 222 224 6 (set (reg:DI 0 ax [orig:144 D.25565 ] [144])
        (sign_extend:DI (reg:SI 0 ax [208]))) ge2fitman_fmtext_o.cpp:638 142 {*extendsidi2_rex64}
     (nil))
(insn 224 223 225 6 (parallel [
            (set (reg:DI 1 dx [orig:145 D.25565 ] [145])
                (ashift:DI (reg:DI 0 ax [orig:144 D.25565 ] [144])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:638 512 {*ashldi3_1}
     (nil))
(insn 225 224 226 6 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])) ge2fitman_fmtext_o.cpp:638 89 {*movdi_internal}
     (nil))
(insn 226 225 227 6 (parallel [
            (set (reg/f:DI 0 ax [orig:146 D.25571 ] [146])
                (plus:DI (reg/f:DI 0 ax [209])
                    (reg:DI 1 dx [orig:145 D.25565 ] [145])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:638 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:145 D.25565 ] [145]))
        (nil)))
(insn 227 226 228 6 (set (reg:SF 21 xmm0 [orig:147 D.25561 ] [147])
        (mem:SF (reg/f:DI 0 ax [orig:146 D.25571 ] [146]) [0 *_91+0 S4 A32])) ge2fitman_fmtext_o.cpp:638 129 {*movsf_internal}
     (nil))
(insn 228 227 229 6 (set (reg:DF 21 xmm0 [orig:148 D.25562 ] [148])
        (float_extend:DF (reg:SF 21 xmm0 [orig:147 D.25561 ] [147]))) ge2fitman_fmtext_o.cpp:638 152 {*extendsfdf2_sse}
     (nil))
(insn 229 228 231 6 (set (reg:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:638 89 {*movdi_internal}
     (nil))
(insn 231 229 232 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f7c3726d3f0 *.LC28>)) ge2fitman_fmtext_o.cpp:638 89 {*movdi_internal}
     (nil))
(insn 232 231 233 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [210])) ge2fitman_fmtext_o.cpp:638 89 {*movdi_internal}
     (nil))
(insn 233 232 234 6 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:638 93 {*movqi_internal}
     (nil))
(call_insn 234 233 235 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:638 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 235 234 236 6 (set (reg:SI 0 ax [211])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])) ge2fitman_fmtext_o.cpp:639 90 {*movsi_internal}
     (nil))
(insn 236 235 237 6 (set (reg:DI 0 ax [orig:149 D.25572 ] [149])
        (sign_extend:DI (reg:SI 0 ax [211]))) ge2fitman_fmtext_o.cpp:639 142 {*extendsidi2_rex64}
     (nil))
(insn 237 236 238 6 (parallel [
            (set (reg:DI 0 ax [orig:150 D.25572 ] [150])
                (plus:DI (reg:DI 0 ax [orig:149 D.25572 ] [149])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:639 218 {*adddi_1}
     (nil))
(insn 238 237 239 6 (parallel [
            (set (reg:DI 1 dx [orig:151 D.25572 ] [151])
                (ashift:DI (reg:DI 0 ax [orig:150 D.25572 ] [150])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:639 512 {*ashldi3_1}
     (nil))
(insn 239 238 240 6 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])) ge2fitman_fmtext_o.cpp:639 89 {*movdi_internal}
     (nil))
(insn 240 239 241 6 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.25571 ] [152])
                (plus:DI (reg/f:DI 0 ax [212])
                    (reg:DI 1 dx [orig:151 D.25572 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:639 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 data+0 S8 A64])
            (reg:DI 1 dx [orig:151 D.25572 ] [151]))
        (nil)))
(insn 241 240 242 6 (set (reg:SF 21 xmm0 [orig:153 D.25561 ] [153])
        (mem:SF (reg/f:DI 0 ax [orig:152 D.25571 ] [152]) [0 *_98+0 S4 A32])) ge2fitman_fmtext_o.cpp:639 129 {*movsf_internal}
     (nil))
(insn 242 241 243 6 (set (reg:DF 21 xmm0 [orig:154 D.25562 ] [154])
        (float_extend:DF (reg:SF 21 xmm0 [orig:153 D.25561 ] [153]))) ge2fitman_fmtext_o.cpp:639 152 {*extendsfdf2_sse}
     (nil))
(insn 243 242 245 6 (set (reg:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:639 89 {*movdi_internal}
     (nil))
(insn 245 243 246 6 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f7c3726d3f0 *.LC28>)) ge2fitman_fmtext_o.cpp:639 89 {*movdi_internal}
     (nil))
(insn 246 245 247 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [213])) ge2fitman_fmtext_o.cpp:639 89 {*movdi_internal}
     (nil))
(insn 247 246 248 6 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:639 93 {*movqi_internal}
     (nil))
(call_insn 248 247 249 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f7c38994870 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:639 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 249 248 267 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:637 217 {*addsi_1}
     (nil))
(jump_insn 267 249 268 6 (set (pc)
        (label_ref 250)) ge2fitman_fmtext_o.cpp:637 654 {jump}
     (nil)
 -> 250)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 268 267 253)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 253 268 254 7 50 "" [1 uses])
(note 254 253 255 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:641 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 256 255 257 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 272)
            (pc))) ge2fitman_fmtext_o.cpp:641 612 {*jcc_1}
     (nil)
 -> 272)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 214
(note 257 256 258 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 258 257 259 8 (set (reg:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 of+0 S8 A64])) ge2fitman_fmtext_o.cpp:642 89 {*movdi_internal}
     (nil))
(insn 259 258 260 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [214])) ge2fitman_fmtext_o.cpp:642 89 {*movdi_internal}
     (nil))
(call_insn 260 259 272 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f7c387cb360 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:642 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 9, flags: (NEW, RTL, MODIFIED)
;;  pred:       7
;;              3 [100.0%] 
;;              8 [100.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 272 260 271 10 52 "" [2 uses])
(note 271 272 273 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 273 271 263 10 (const_int 0 [0]) ge2fitman_fmtext_o.cpp:645 684 {nop}
     (nil))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 263 273 264 9 47 "" [0 uses])
(note 264 263 274 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 274 264 0 NOTE_INSN_DELETED)

;; Function void get_phase(float*, FILE**, Data_file_header*, InFile_struct*, long int, IOFiles*, int, Procpar_info*) (_Z9get_phasePfPP8_IO_FILEP16Data_file_headerP13InFile_structlP7IOFilesiP12Procpar_info, funcdef_no=1023, decl_uid=24398, cgraph_uid=228, symbol_order=229)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 17:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 18:  (0) m  (1) v {*movsf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 2 in insn 29:  (0) r  (1) 0  (2) mr {*muldi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 30:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 36
	 Choosing alt 2 in insn 36:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 49:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 62:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=242 from oldreg=201, assigning class GENERAL_REGS to r242
   62: {r242:SI=r242:SI-r102:SI;clobber flags:CC;}
      REG_DEAD r102:SI
      REG_DEAD r101:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  330: r242:SI=r101:SI
    Inserting insn reload after:
  331: r201:SI=r242:SI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 64:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 65:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 76:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=243 from oldreg=206, assigning class GENERAL_REGS to r243
   76: {r243:DI=r243:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  332: r243:DI=r104:DI
    Inserting insn reload after:
  333: r206:DI=r243:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 83:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 106:  (0) r  (1) 0  (2) mr {*muldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 2 in insn 109:  (0) r  (1) 0  (2) mr {*mulsi3_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 157:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 164:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 185:  (0) r  (1) rm {*movhi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) r  (1) rm {extendhisi2}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) x  (1) r {*floatsisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 188:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 189:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 202:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 207:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 209:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) x  (1) r {*floatdisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 214:  (0) m  (1) v {*movsf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 220:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 221:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 222:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 230:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 232:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 234:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =x  (1) xm {*extendsfdf2_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 238:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 245:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 249:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 250
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 251:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 252:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 253
	 Choosing alt 0 in insn 253:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 254:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 255:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 263:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 265
	 Choosing alt 0 in insn 265:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 266:  (0) x  (1) m {*floatsisf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 267:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 268:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
      Creating newreg=244 from oldreg=178, assigning class SSE_REGS to r244
  268: r244:SF=r244:SF/r177:SF
      REG_DEAD r235:SF
      REG_DEAD r177:SF
    Inserting insn reload before:
  334: r244:SF=r235:SF
    Inserting insn reload after:
  335: r178:SF=r244:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 269:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 270:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 276:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 278:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 288:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 290
	 Choosing alt 0 in insn 290:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 291:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 292:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 293
	 Choosing alt 0 in insn 293:  (0) =x  (1) %0  (2) xm {*fop_sf_comm_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 295:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =x  (1) 0  (2) xm {*fop_df_1_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 298:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 301:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 304:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 29
EBB 28

********** Pseudo live ranges #1: **********

  BB 28
  BB 29
   Insn 328: point = 0
  BB 26
   Insn 284: point = 0
   Insn 283: point = 0
   Insn 282: point = 1
  BB 27
   Insn 324: point = 2
   Insn 304: point = 2
   Insn 303: point = 2
   Insn 302: point = 2
   Insn 301: point = 2
   Insn 300: point = 2
   Insn 299: point = 3
   Insn 298: point = 4
   Insn 297: point = 6
   Insn 296: point = 7
   Insn 295: point = 9
   Insn 294: point = 10
   Insn 293: point = 12
   Insn 292: point = 14
   Insn 291: point = 15
   Insn 290: point = 17
   Insn 289: point = 19
   Insn 288: point = 20
   Insn 287: point = 22
   Insn 286: point = 24
  BB 25
   Insn 280: point = 25
   Insn 279: point = 25
   Insn 278: point = 25
   Insn 277: point = 25
   Insn 276: point = 25
  BB 3
   Insn 43: point = 25
   Insn 42: point = 25
   Insn 41: point = 26
   Insn 40: point = 28
  BB 24
   Insn 322: point = 29
   Insn 270: point = 29
   Insn 269: point = 29
   Insn 335: point = 30
	Hard reg 21 is preferable by r244 with profit 1
   Insn 268: point = 32
   Insn 334: point = 33
	Hard reg 21 is preferable by r244 with profit 1
	Hard reg 22 is preferable by r244 with profit 1
   Insn 267: point = 35
   Insn 266: point = 36
   Insn 265: point = 37
   Insn 264: point = 39
   Insn 263: point = 40
   Insn 262: point = 42
   Insn 261: point = 44
  BB 5
   Insn 70: point = 45
   Insn 69: point = 45
   Insn 68: point = 46
  BB 23
   Insn 320: point = 47
   Insn 255: point = 47
   Insn 254: point = 47
   Insn 253: point = 48
   Insn 252: point = 50
   Insn 251: point = 51
   Insn 250: point = 53
   Insn 249: point = 55
   Insn 248: point = 56
   Insn 247: point = 58
   Insn 246: point = 60
   Insn 245: point = 61
   Insn 244: point = 62
   Insn 243: point = 64
   Insn 242: point = 65
   Insn 241: point = 65
   Insn 240: point = 66
   Insn 239: point = 67
   Insn 238: point = 69
   Insn 237: point = 71
   Insn 236: point = 73
   Insn 235: point = 74
   Insn 234: point = 76
   Insn 233: point = 78
   Insn 232: point = 79
   Insn 231: point = 81
   Insn 230: point = 82
   Insn 229: point = 84
   Insn 228: point = 86
  BB 21
   Insn 205: point = 87
   Insn 204: point = 87
  BB 22
   Insn 318: point = 87
   Insn 222: point = 87
   Insn 221: point = 87
   Insn 220: point = 88
   Insn 219: point = 89
   Insn 218: point = 91
   Insn 217: point = 93
   Insn 216: point = 95
   Insn 215: point = 96
   Insn 214: point = 97
   Insn 213: point = 98
   Insn 212: point = 100
   Insn 211: point = 102
   Insn 210: point = 104
   Insn 209: point = 106
   Insn 208: point = 108
   Insn 207: point = 109
  BB 20
   Insn 202: point = 110
  BB 19
   Insn 200: point = 110
   Insn 199: point = 110
   Insn 198: point = 111
   Insn 197: point = 113
   Insn 196: point = 115
   Insn 195: point = 117
  BB 17
   Insn 173: point = 118
   Insn 172: point = 118
  BB 18
   Insn 316: point = 118
   Insn 189: point = 118
   Insn 188: point = 118
   Insn 187: point = 119
   Insn 186: point = 121
   Insn 185: point = 123
   Insn 184: point = 125
   Insn 183: point = 127
   Insn 182: point = 129
   Insn 181: point = 131
   Insn 180: point = 132
   Insn 179: point = 133
   Insn 178: point = 135
   Insn 177: point = 137
   Insn 176: point = 139
   Insn 175: point = 140
  BB 16
   Insn 170: point = 141
  BB 15
   Insn 168: point = 141
   Insn 167: point = 141
   Insn 166: point = 142
   Insn 165: point = 144
   Insn 164: point = 146
   Insn 163: point = 148
  BB 10
   Insn 124: point = 149
   Insn 123: point = 149
  BB 14
   Insn 314: point = 149
   Insn 157: point = 149
  BB 12
   Insn 312: point = 149
   Insn 141: point = 149
   Insn 140: point = 149
   Insn 139: point = 150
   Insn 138: point = 151
   Insn 137: point = 153
   Insn 136: point = 155
   Insn 135: point = 157
   Insn 134: point = 158
   Insn 133: point = 159
  BB 13
   Insn 154: point = 160
   Insn 153: point = 160
   Insn 152: point = 161
   Insn 151: point = 162
   Insn 150: point = 164
   Insn 149: point = 166
   Insn 148: point = 168
   Insn 147: point = 169
   Insn 146: point = 170
  BB 11
   Insn 131: point = 171
   Insn 130: point = 171
   Insn 129: point = 172
   Insn 128: point = 174
   Insn 127: point = 176
   Insn 126: point = 178
  BB 9
   Insn 121: point = 179
  BB 8
   Insn 119: point = 179
   Insn 118: point = 179
   Insn 117: point = 179
   Insn 116: point = 179
   Insn 115: point = 180
   Insn 114: point = 181
   Insn 113: point = 181
   Insn 112: point = 183
   Insn 111: point = 184
   Insn 110: point = 186
   Insn 109: point = 188
   Insn 108: point = 190
   Insn 107: point = 191
   Insn 106: point = 193
   Insn 105: point = 195
   Insn 104: point = 197
   Insn 103: point = 199
   Insn 102: point = 200
   Insn 101: point = 202
   Insn 100: point = 203
  BB 7
   Insn 97: point = 204
   Insn 96: point = 204
   Insn 95: point = 205
   Insn 94: point = 206
   Insn 93: point = 207
  BB 6
   Insn 91: point = 208
   Insn 90: point = 208
   Insn 89: point = 209
   Insn 88: point = 210
   Insn 87: point = 211
   Insn 86: point = 212
   Insn 85: point = 212
   Insn 84: point = 213
   Insn 83: point = 214
   Insn 82: point = 214
   Insn 81: point = 215
   Insn 80: point = 216
   Insn 79: point = 218
   Insn 78: point = 220
   Insn 77: point = 222
   Insn 333: point = 224
	Hard reg 2 is preferable by r243 with profit 1
   Insn 76: point = 226
   Insn 332: point = 226
   Insn 75: point = 227
   Insn 74: point = 229
   Insn 73: point = 230
   Insn 72: point = 232
  BB 4
   Insn 66: point = 233
   Insn 65: point = 233
   Insn 64: point = 234
   Insn 63: point = 235
   Insn 331: point = 236
	Hard reg 0 is preferable by r242 with profit 1
   Insn 62: point = 238
   Insn 330: point = 239
	Hard reg 0 is preferable by r242 with profit 1
	Hard reg 1 is preferable by r242 with profit 1
   Insn 61: point = 241
   Insn 60: point = 243
   Insn 59: point = 244
   Insn 58: point = 246
   Insn 57: point = 247
   Insn 56: point = 247
   Insn 55: point = 248
   Insn 54: point = 249
   Insn 53: point = 249
   Insn 52: point = 251
   Insn 51: point = 252
   Insn 50: point = 254
   Insn 49: point = 256
   Insn 48: point = 258
   Insn 47: point = 259
   Insn 46: point = 261
   Insn 45: point = 262
  BB 2
   Insn 38: point = 263
   Insn 37: point = 263
   Insn 36: point = 264
   Insn 35: point = 266
   Insn 34: point = 268
   Insn 33: point = 269
   Insn 32: point = 271
   Insn 31: point = 273
   Insn 30: point = 274
   Insn 29: point = 275
   Insn 28: point = 277
   Insn 27: point = 279
   Insn 26: point = 280
   Insn 25: point = 282
   Insn 24: point = 283
   Insn 23: point = 284
   Insn 22: point = 286
   Insn 21: point = 287
   Insn 20: point = 287
   Insn 19: point = 288
   Insn 18: point = 289
   Insn 17: point = 290
   Insn 16: point = 291
   Insn 15: point = 291
   Insn 14: point = 291
   Insn 13: point = 291
   Insn 12: point = 291
   Insn 11: point = 291
   Insn 7: point = 291
   Insn 6: point = 291
   Insn 5: point = 291
   Insn 4: point = 291
   Insn 3: point = 291
   Insn 2: point = 291
 r87: [287..288]
 r88: [283..284]
 r89: [276..280]
 r90: [276..277]
 r91: [270..271]
 r92: [265..269]
 r93: [265..266]
 r94: [263..264]
 r95: [25..26]
 r96: [253..259]
 r97: [255..256]
 r98: [253..254]
 r99: [248..252]
 r100: [247..249]
 r101: [240..244]
 r102: [238..241]
 r103: [214..230]
 r104: [223..227]
 r105: [217..218]
 r106: [213..216]
 r107: [212..215]
 r108: [210..211]
 r109: [208..209]
 r110: [205..207]
 r111: [192..200]
 r112: [196..197]
 r113: [194..195]
 r114: [192..193]
 r115: [185..191]
 r116: [187..188]
 r117: [185..186]
 r118: [180..184]
 r119: [179..181]
 r120: [175..176]
 r121: [173..174]
 r122: [171..172]
 r123: [150..159]
 r124: [152..158]
 r125: [154..155]
 r126: [152..153]
 r127: [149..151]
 r128: [161..170]
 r129: [163..169]
 r130: [165..166]
 r131: [163..164]
 r132: [160..162]
 r133: [145..146]
 r134: [143..144]
 r135: [141..142]
 r136: [134..140]
 r137: [136..137]
 r138: [134..135]
 r139: [118..133]
 r140: [126..132]
 r141: [128..129]
 r142: [126..127]
 r143: [124..125]
 r144: [122..123]
 r145: [118..119]
 r146: [114..115]
 r147: [112..113]
 r148: [110..111]
 r149: [103..109]
 r150: [105..106]
 r151: [103..104]
 r152: [101..102]
 r153: [99..100]
 r154: [90..96]
 r155: [92..93]
 r156: [90..91]
 r157: [87..89]
 r158: [83..84]
 r159: [80..82]
 r160: [61..79]
 r161: [77..78]
 r162: [75..76]
 r163: [66..74]
 r164: [72..73]
 r165: [70..71]
 r166: [68..69]
 r167: [65..67]
 r168: [63..64]
 r169: [61..62]
 r170: [57..58]
 r171: [54..56]
 r172: [52..53]
 r173: [49..51]
 r174: [41..42]
 r175: [38..40]
 r176: [29..37]
 r177: [32..36]
 r178: [29..30]
 r179: [21..22]
 r180: [18..20]
 r181: [16..17]
 r182: [13..15]
 r183: [11..12]
 r184: [8..10]
 r185: [3..7]
 r186: [2..4]
 r187: [289..290]
 r188: [285..286]
 r189: [281..282]
 r190: [278..279]
 r191: [274..275]
 r192: [272..273]
 r193: [267..268]
 r194: [27..28]
 r195: [260..262]
 r196: [260..261]
 r197: [257..258]
 r198: [250..251]
 r199: [245..246]
 r200: [242..243]
 r201: [235..236]
 r202: [233..234]
 r203: [45..46]
 r204: [231..232]
 r205: [228..229]
 r206: [223..224]
 r207: [221..222]
 r208: [219..220]
 r209: [204..206]
 r210: [201..203]
 r211: [201..202]
 r212: [198..199]
 r213: [189..190]
 r214: [182..183]
 r215: [177..178]
 r216: [156..157]
 r217: [167..168]
 r218: [147..148]
 r219: [138..139]
 r220: [130..131]
 r221: [120..121]
 r222: [116..117]
 r223: [107..108]
 r224: [97..98]
 r225: [94..95]
 r226: [87..88]
 r227: [85..86]
 r228: [80..81]
 r229: [59..60]
 r230: [54..55]
 r231: [47..48]
 r232: [49..50]
 r233: [43..44]
 r234: [38..39]
 r235: [34..35]
 r236: [0..1]
 r237: [23..24]
 r238: [18..19]
 r239: [13..14]
 r240: [8..9]
 r241: [5..6]
 r242: [237..239]
 r243: [225..226]
 r244: [31..33]
Compressing live ranges: from 291 to 244 - 83%
Ranges after the compression:
 r87: [240..241]
 r88: [236..237]
 r89: [230..233]
 r90: [230..231]
 r91: [224..225]
 r92: [220..223]
 r93: [220..221]
 r94: [218..219]
 r95: [20..21]
 r96: [210..215]
 r97: [212..213]
 r98: [210..211]
 r99: [206..209]
 r100: [206..207]
 r101: [200..203]
 r102: [198..201]
 r103: [178..191]
 r104: [186..189]
 r105: [180..181]
 r106: [178..179]
 r107: [178..179]
 r108: [176..177]
 r109: [174..175]
 r110: [172..173]
 r111: [162..169]
 r112: [166..167]
 r113: [164..165]
 r114: [162..163]
 r115: [156..161]
 r116: [158..159]
 r117: [156..157]
 r118: [152..155]
 r119: [152..153]
 r120: [148..149]
 r121: [146..147]
 r122: [144..145]
 r123: [128..135]
 r124: [130..135]
 r125: [132..133]
 r126: [130..131]
 r127: [128..129]
 r128: [136..143]
 r129: [138..143]
 r130: [140..141]
 r131: [138..139]
 r132: [136..137]
 r133: [124..125]
 r134: [122..123]
 r135: [120..121]
 r136: [114..119]
 r137: [116..117]
 r138: [114..115]
 r139: [100..113]
 r140: [108..113]
 r141: [110..111]
 r142: [108..109]
 r143: [106..107]
 r144: [104..105]
 r145: [100..101]
 r146: [96..97]
 r147: [94..95]
 r148: [92..93]
 r149: [86..91]
 r150: [88..89]
 r151: [86..87]
 r152: [84..85]
 r153: [82..83]
 r154: [74..79]
 r155: [76..77]
 r156: [74..75]
 r157: [72..73]
 r158: [68..69]
 r159: [66..67]
 r160: [50..65]
 r161: [64..65]
 r162: [62..63]
 r163: [54..61]
 r164: [60..61]
 r165: [58..59]
 r166: [56..57]
 r167: [54..55]
 r168: [52..53]
 r169: [50..51]
 r170: [46..47]
 r171: [44..45]
 r172: [42..43]
 r173: [40..41]
 r174: [32..33]
 r175: [30..31]
 r176: [24..29]
 r177: [26..29]
 r178: [24..25]
 r179: [16..17]
 r180: [14..15]
 r181: [12..13]
 r182: [10..11]
 r183: [8..9]
 r184: [6..7]
 r185: [2..5]
 r186: [2..3]
 r187: [242..243]
 r188: [238..239]
 r189: [234..235]
 r190: [232..233]
 r191: [228..229]
 r192: [226..227]
 r193: [222..223]
 r194: [22..23]
 r195: [216..217]
 r196: [216..217]
 r197: [214..215]
 r198: [208..209]
 r199: [204..205]
 r200: [202..203]
 r201: [196..197]
 r202: [194..195]
 r203: [36..37]
 r204: [192..193]
 r205: [190..191]
 r206: [186..187]
 r207: [184..185]
 r208: [182..183]
 r209: [172..173]
 r210: [170..171]
 r211: [170..171]
 r212: [168..169]
 r213: [160..161]
 r214: [154..155]
 r215: [150..151]
 r216: [134..135]
 r217: [142..143]
 r218: [126..127]
 r219: [118..119]
 r220: [112..113]
 r221: [102..103]
 r222: [98..99]
 r223: [90..91]
 r224: [80..81]
 r225: [78..79]
 r226: [72..73]
 r227: [70..71]
 r228: [66..67]
 r229: [48..49]
 r230: [44..45]
 r231: [38..39]
 r232: [40..41]
 r233: [34..35]
 r234: [30..31]
 r235: [28..29]
 r236: [0..1]
 r237: [18..19]
 r238: [14..15]
 r239: [10..11]
 r240: [6..7]
 r241: [4..5]
 r242: [198..199]
 r243: [188..189]
 r244: [26..27]

********** Assignment #1: **********

	 Assigning to 242 (cl=GENERAL_REGS, orig=201, freq=3, tfirst=242, tfreq=3)...
	   Assign 1 to reload r242 (freq=3)
	 Assigning to 243 (cl=GENERAL_REGS, orig=206, freq=3, tfirst=243, tfreq=3)...
	   Assign 2 to reload r243 (freq=3)
	 Assigning to 244 (cl=SSE_REGS, orig=178, freq=3, tfirst=244, tfreq=3)...
	   Assign 22 to reload r244 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=96, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 19
changing reg in insn 20
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 51
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 55
changing reg in insn 53
changing reg in insn 56
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 73
changing reg in insn 82
changing reg in insn 75
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 84
changing reg in insn 81
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 93
changing reg in insn 95
changing reg in insn 102
changing reg in insn 107
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 111
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 115
changing reg in insn 113
changing reg in insn 116
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 133
changing reg in insn 139
changing reg in insn 134
changing reg in insn 138
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 140
changing reg in insn 146
changing reg in insn 152
changing reg in insn 147
changing reg in insn 151
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 175
changing reg in insn 179
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 188
changing reg in insn 180
changing reg in insn 184
changing reg in insn 182
changing reg in insn 183
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 207
changing reg in insn 211
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 212
changing reg in insn 213
changing reg in insn 215
changing reg in insn 219
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 221
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 232
changing reg in insn 232
changing reg in insn 232
changing reg in insn 245
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 240
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 241
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 245
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 265
changing reg in insn 265
changing reg in insn 269
changing reg in insn 266
changing reg in insn 268
changing reg in insn 269
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 290
changing reg in insn 290
changing reg in insn 291
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 296
changing reg in insn 299
changing reg in insn 298
changing reg in insn 300
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 94
changing reg in insn 96
changing reg in insn 100
changing reg in insn 102
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 108
changing reg in insn 109
changing reg in insn 112
changing reg in insn 113
changing reg in insn 126
changing reg in insn 127
changing reg in insn 135
changing reg in insn 136
changing reg in insn 148
changing reg in insn 149
changing reg in insn 163
changing reg in insn 164
changing reg in insn 176
changing reg in insn 177
changing reg in insn 181
changing reg in insn 182
changing reg in insn 186
changing reg in insn 187
changing reg in insn 195
changing reg in insn 196
changing reg in insn 208
changing reg in insn 209
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 217
changing reg in insn 220
changing reg in insn 221
changing reg in insn 228
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 246
changing reg in insn 247
changing reg in insn 249
changing reg in insn 253
changing reg in insn 254
changing reg in insn 252
changing reg in insn 261
changing reg in insn 262
changing reg in insn 264
changing reg in insn 267
changing reg in insn 282
changing reg in insn 283
changing reg in insn 286
changing reg in insn 287
changing reg in insn 289
changing reg in insn 292
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
deleting insn with uid = 22.
deleting insn with uid = 23.
deleting insn with uid = 330.
deleting insn with uid = 333.
deleting insn with uid = 79.
deleting insn with uid = 84.
deleting insn with uid = 87.
deleting insn with uid = 128.
deleting insn with uid = 165.
deleting insn with uid = 197.
deleting insn with uid = 240.
deleting insn with uid = 241.
deleting insn with uid = 243.
deleting insn with uid = 334.
deleting insn with uid = 299.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 117.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 242.
verify found no changes in insn with uid = 277.
verify found no changes in insn with uid = 279.
verify found no changes in insn with uid = 303.


void get_phase(float*, FILE**, Data_file_header*, InFile_struct*, long int, IOFiles*, int, Procpar_info*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8] 38[r9]
;;  ref usage 	r0={95d,86u} r1={49d,38u,4e} r2={22d,11u} r3={1d,1u} r4={19d,8u} r5={22d,11u} r6={1d,130u} r7={1d,40u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={69d,12u} r18={11d} r19={11d} r20={1d,1u,10e} r21={29d,18u} r22={18d,6u} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={12d,1u} r38={12d,1u} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} 
;;    total ref usage 1417{1039d,364u,14e} in 249{238 regular + 11 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 187 188 189 190 191 192 193
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])
        (reg:DI 5 di [ phase ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])
        (reg:DI 4 si [ in_file ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 infile_struct+0 S8 A64])
        (reg:DI 2 cx [ infile_struct ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 header_size+0 S8 A64])
        (reg:DI 37 r8 [ header_size ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 file+0 S8 A64])
        (reg:DI 38 r9 [ file ])) ge2fitman_fmtext_o.cpp:652 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:654 90 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:655 90 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:656 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 numSets+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:657 90 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dataSizeChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:658 90 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:659 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SF 21 xmm0 [187])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:660 129 {*movsf_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])
        (reg:SF 21 xmm0 [187])) ge2fitman_fmtext_o.cpp:660 129 {*movsf_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 0 ax [orig:87 D.25585 ] [87])
        (const_int 8 [0x8])) ge2fitman_fmtext_o.cpp:665 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:87 D.25585 ] [87])) ge2fitman_fmtext_o.cpp:665 89 {*movdi_internal}
     (nil))
(call_insn 21 20 24 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7c389c5a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:665 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 21 25 2 (set (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.25586 ] [88])) ge2fitman_fmtext_o.cpp:665 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 1 dx [orig:89 D.25587 ] [89])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [189])
                (const_int 24 [0x18])) [0 main_header_31(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:DI 0 ax [orig:90 D.25587 ] [90])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [190])
                (const_int 16 [0x10])) [0 main_header_31(D)->np.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 29 28 30 2 (parallel [
            (set (reg:DI 0 ax [191])
                (mult:DI (reg:DI 0 ax [orig:90 D.25587 ] [90])
                    (reg:DI 1 dx [orig:89 D.25587 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:671 306 {*muldi3_1}
     (nil))
(insn 30 29 31 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])
        (reg:DI 0 ax [191])) ge2fitman_fmtext_o.cpp:671 89 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:684 89 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 0 ax [orig:91 D.25588 ] [91])
        (mem/j:SI (reg/f:DI 0 ax [192]) [0 infile_struct_35(D)->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:684 90 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:SI 1 dx [orig:92 D.25589 ] [92])
        (reg:SI 0 ax [orig:91 D.25588 ] [91])) ge2fitman_fmtext_o.cpp:684 90 {*movsi_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DI 0 ax [193])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:684 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:SI 0 ax [orig:93 D.25589 ] [93])
        (reg:SI 0 ax [193])) ge2fitman_fmtext_o.cpp:684 90 {*movsi_internal}
     (nil))
(insn 36 35 37 2 (parallel [
            (set (reg:SI 0 ax [orig:94 D.25589 ] [94])
                (mult:SI (reg:SI 0 ax [orig:93 D.25589 ] [93])
                    (reg:SI 1 dx [orig:92 D.25589 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:684 305 {*mulsi3_1}
     (nil))
(insn 37 36 38 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dataSizeChannel+0 S4 A32])
        (reg:SI 0 ax [orig:94 D.25589 ] [94])) ge2fitman_fmtext_o.cpp:684 90 {*movsi_internal}
     (nil))
(insn 38 37 271 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:693 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              24 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 194
(code_label 271 38 39 3 66 "" [1 uses])
(note 39 271 40 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 3 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [0 procpar_info+0 S8 A64])) ge2fitman_fmtext_o.cpp:693 89 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [orig:95 D.25588 ] [95])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [194])
                (const_int 508 [0x1fc])) [0 procpar_info_42(D)->num_channels+0 S4 A32])) ge2fitman_fmtext_o.cpp:693 90 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:95 D.25588 ] [95])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32]))) ge2fitman_fmtext_o.cpp:693 7 {*cmpsi_1}
     (nil))
(jump_insn 43 42 44 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 274)
            (pc))) ge2fitman_fmtext_o.cpp:693 612 {*jcc_1}
     (nil)
 -> 274)
;;  succ:       25
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 98 99 100 101 102 195 196 197 198 199 200 201 202
(note 44 43 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 4 (set (reg:DI 1 dx [195])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:DI 0 ax [196])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 1 dx [orig:96 D.25587 ] [96])
                (plus:DI (reg:DI 1 dx [195])
                    (reg:DI 0 ax [196])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:700 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -88 [0xffffffffffffffa8])) [0 header_size+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 baseline_set_size+0 S8 A64]))
        (nil)))
(insn 48 47 49 4 (set (reg:SI 0 ax [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dataSizeChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:700 90 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg:SI 0 ax [orig:97 D.25588 ] [97])
                (mult:SI (reg:SI 0 ax [197])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:700 305 {*mulsi3_1}
     (nil))
(insn 50 49 51 4 (set (reg:DI 0 ax [orig:98 D.25587 ] [98])
        (sign_extend:DI (reg:SI 0 ax [orig:97 D.25588 ] [97]))) ge2fitman_fmtext_o.cpp:700 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 4 (parallel [
            (set (reg:DI 2 cx [orig:99 D.25587 ] [99])
                (plus:DI (reg:DI 1 dx [orig:96 D.25587 ] [96])
                    (reg:DI 0 ax [orig:98 D.25587 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:700 218 {*adddi_1}
     (nil))
(insn 52 51 53 4 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [orig:100 D.25590 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [198]) [0 *in_file_49(D)+0 S8 A64])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:700 90 {*movsi_internal}
     (nil))
(insn 55 54 56 4 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:99 D.25587 ] [99])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:100 D.25590 ] [100])) ge2fitman_fmtext_o.cpp:700 89 {*movdi_internal}
     (nil))
(call_insn 57 56 58 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7f7c387db948 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:700 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:710 89 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:SI 1 dx [orig:101 D.25588 ] [101])
        (mem/j:SI (reg/f:DI 0 ax [199]) [0 infile_struct_35(D)->num_datasets+0 S4 A32])) ge2fitman_fmtext_o.cpp:710 90 {*movsi_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 infile_struct+0 S8 A64])) ge2fitman_fmtext_o.cpp:710 89 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:SI 0 ax [orig:102 D.25588 ] [102])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [200])
                (const_int 4 [0x4])) [0 infile_struct_35(D)->num_unsup_sets+0 S4 A32])) ge2fitman_fmtext_o.cpp:710 90 {*movsi_internal}
     (nil))
(insn 62 61 331 4 (parallel [
            (set (reg:SI 1 dx [201])
                (minus:SI (reg:SI 1 dx [201])
                    (reg:SI 0 ax [orig:102 D.25588 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:710 260 {*subsi_1}
     (nil))
(insn 331 62 63 4 (set (reg:SI 0 ax [201])
        (reg:SI 1 dx [201])) ge2fitman_fmtext_o.cpp:710 90 {*movsi_internal}
     (nil))
(insn 63 331 64 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 numSets+0 S4 A32])
        (reg:SI 0 ax [201])) ge2fitman_fmtext_o.cpp:710 90 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SF 21 xmm0 [202])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:716 129 {*movsf_internal}
     (nil))
(insn 65 64 66 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])
        (reg:SF 21 xmm0 [202])) ge2fitman_fmtext_o.cpp:716 129 {*movsf_internal}
     (nil))
(insn 66 65 256 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:719 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              23 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 203
(code_label 256 66 67 5 65 "" [1 uses])
(note 67 256 68 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 5 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:719 90 {*movsi_internal}
     (nil))
(insn 69 68 70 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [203])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 numSets+0 S4 A32]))) ge2fitman_fmtext_o.cpp:719 7 {*cmpsi_1}
     (nil))
(jump_insn 70 69 71 5 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 259)
            (pc))) ge2fitman_fmtext_o.cpp:719 612 {*jcc_1}
     (nil)
 -> 259)
;;  succ:       24
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 104 105 106 107 108 109 204 205 206 207 208
(note 71 70 72 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 6 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 73 72 74 6 (set (reg/f:DI 1 dx [orig:103 D.25590 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [204]) [0 *in_file_49(D)+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 74 73 75 6 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 75 74 332 6 (set (reg:DI 0 ax [orig:104 D.25587 ] [104])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [205])
                (const_int 24 [0x18])) [0 main_header_31(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 332 75 76 6 (set (reg:DI 2 cx [206])
        (reg:DI 0 ax [orig:104 D.25587 ] [104])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 76 332 77 6 (parallel [
            (set (reg:DI 2 cx [206])
                (lshiftrt:DI (reg:DI 2 cx [206])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:728 546 {*lshrdi3_1}
     (nil))
(insn 77 76 78 6 (parallel [
            (set (reg:DI 0 ax [207])
                (plus:DI (reg:DI 0 ax [orig:104 D.25587 ] [104])
                    (reg:DI 2 cx [206])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:728 218 {*adddi_1}
     (nil))
(insn 78 77 80 6 (parallel [
            (set (reg:DI 0 ax [208])
                (ashiftrt:DI (reg:DI 0 ax [207])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:728 547 {*ashrdi3_1}
     (nil))
(insn 80 78 81 6 (set (reg:DI 4 si [orig:106 D.25585 ] [106])
        (reg:DI 0 ax [orig:105 D.25587 ] [105])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 81 80 82 6 (set (reg/f:DI 0 ax [orig:107 D.25591 ] [107])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 82 81 83 6 (set (reg:DI 2 cx)
        (reg/f:DI 1 dx [orig:103 D.25590 ] [103])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 83 82 85 6 (set (reg:DI 1 dx)
        (const_int 2 [0x2])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(insn 85 83 86 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:107 D.25591 ] [107])) ge2fitman_fmtext_o.cpp:728 89 {*movdi_internal}
     (nil))
(call_insn 86 85 88 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f7c387db510 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:728 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 88 86 89 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:108 D.25585 ] [108])
            (const_int 2 [0x2]))) ge2fitman_fmtext_o.cpp:728 8 {*cmpdi_1}
     (nil))
(insn 89 88 90 6 (set (reg:QI 0 ax [orig:109 D.25592 ] [109])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:728 607 {*setcc_qi}
     (nil))
(insn 90 89 91 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:109 D.25592 ] [109])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:728 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 91 90 92 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) ge2fitman_fmtext_o.cpp:728 612 {*jcc_1}
     (nil)
 -> 98)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 209
(note 92 91 93 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 7 (set (reg/f:DI 1 dx [orig:110 D.25593 ] [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 file+0 S8 A64])) ge2fitman_fmtext_o.cpp:734 89 {*movdi_internal}
     (nil))
(insn 94 93 95 7 (set (reg:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:734 89 {*movdi_internal}
     (nil))
(insn 95 94 96 7 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:110 D.25593 ] [110])) ge2fitman_fmtext_o.cpp:734 89 {*movdi_internal}
     (nil))
(insn 96 95 97 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [209])) ge2fitman_fmtext_o.cpp:734 89 {*movdi_internal}
     (nil))
(call_insn 97 96 98 7 (call (mem:QI (symbol_ref:DI ("_Z7exit_06PP8_IO_FILEPc") [flags 0x41]  <function_decl 0x7f7c375505e8 exit_06>) [0 exit_06 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:734 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 111 112 113 114 115 116 117 118 119 210 211 212 213 214
(code_label 98 97 99 8 56 "" [1 uses])
(note 99 98 100 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 8 (set (reg:DI 1 dx [210])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 header_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:742 89 {*movdi_internal}
     (nil))
(insn 101 100 102 8 (set (reg:DI 0 ax [211])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])) ge2fitman_fmtext_o.cpp:742 89 {*movdi_internal}
     (nil))
(insn 102 101 103 8 (parallel [
            (set (reg:DI 1 dx [orig:111 D.25587 ] [111])
                (plus:DI (reg:DI 1 dx [210])
                    (reg:DI 0 ax [211])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:742 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -88 [0xffffffffffffffa8])) [0 header_size+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 baseline_set_size+0 S8 A64]))
        (nil)))
(insn 103 102 104 8 (set (reg:SI 0 ax [212])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])) ge2fitman_fmtext_o.cpp:743 90 {*movsi_internal}
     (nil))
(insn 104 103 105 8 (parallel [
            (set (reg:SI 0 ax [orig:112 D.25588 ] [112])
                (plus:SI (reg:SI 0 ax [212])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:743 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 countFID+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 105 104 106 8 (set (reg:DI 0 ax [orig:113 D.25587 ] [113])
        (sign_extend:DI (reg:SI 0 ax [orig:112 D.25588 ] [112]))) ge2fitman_fmtext_o.cpp:743 142 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 8 (parallel [
            (set (reg:DI 0 ax [orig:114 D.25587 ] [114])
                (mult:DI (reg:DI 0 ax [orig:113 D.25587 ] [113])
                    (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 baseline_set_size+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:743 306 {*muldi3_1}
     (nil))
(insn 107 106 108 8 (parallel [
            (set (reg:DI 1 dx [orig:115 D.25587 ] [115])
                (plus:DI (reg:DI 1 dx [orig:111 D.25587 ] [111])
                    (reg:DI 0 ax [orig:114 D.25587 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:742 218 {*adddi_1}
     (nil))
(insn 108 107 109 8 (set (reg:SI 0 ax [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 dataSizeChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:743 90 {*movsi_internal}
     (nil))
(insn 109 108 110 8 (parallel [
            (set (reg:SI 0 ax [orig:116 D.25588 ] [116])
                (mult:SI (reg:SI 0 ax [213])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:743 305 {*mulsi3_1}
     (nil))
(insn 110 109 111 8 (set (reg:DI 0 ax [orig:117 D.25587 ] [117])
        (sign_extend:DI (reg:SI 0 ax [orig:116 D.25588 ] [116]))) ge2fitman_fmtext_o.cpp:742 142 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 8 (parallel [
            (set (reg:DI 2 cx [orig:118 D.25587 ] [118])
                (plus:DI (reg:DI 1 dx [orig:115 D.25587 ] [115])
                    (reg:DI 0 ax [orig:117 D.25587 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:742 218 {*adddi_1}
     (nil))
(insn 112 111 113 8 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 in_file+0 S8 A64])) ge2fitman_fmtext_o.cpp:742 89 {*movdi_internal}
     (nil))
(insn 113 112 114 8 (set (reg/f:DI 0 ax [orig:119 D.25590 ] [119])
        (mem/f:DI (reg/f:DI 0 ax [214]) [0 *in_file_49(D)+0 S8 A64])) ge2fitman_fmtext_o.cpp:742 89 {*movdi_internal}
     (nil))
(insn 114 113 115 8 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:743 90 {*movsi_internal}
     (nil))
(insn 115 114 116 8 (set (reg:DI 4 si)
        (reg:DI 2 cx [orig:118 D.25587 ] [118])) ge2fitman_fmtext_o.cpp:743 89 {*movdi_internal}
     (nil))
(insn 116 115 117 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:119 D.25590 ] [119])) ge2fitman_fmtext_o.cpp:743 89 {*movdi_internal}
     (nil))
(call_insn 117 116 118 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7f7c387db948 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:743 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 118 117 119 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 16 [0x10])) [0 swap_bytes+0 S4 A64])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:746 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 119 118 120 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 161)
            (pc))) ge2fitman_fmtext_o.cpp:746 612 {*jcc_1}
     (nil)
 -> 161)
;;  succ:       9 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 120 119 121 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 158 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:747 90 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              14 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 158 121 122 10 60 "" [1 uses])
(note 122 158 123 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:747 7 {*cmpsi_1}
     (nil))
(jump_insn 124 123 125 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 161)
            (pc))) ge2fitman_fmtext_o.cpp:747 612 {*jcc_1}
     (nil)
 -> 161)
;;  succ:       15
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 215
(note 125 124 126 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 127 11 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:752 89 {*movdi_internal}
     (nil))
(insn 127 126 129 11 (set (reg:DI 0 ax [orig:120 D.25587 ] [120])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [215])
                (const_int 24 [0x18])) [0 main_header_31(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:752 89 {*movdi_internal}
     (nil))
(insn 129 127 130 11 (parallel [
            (set (reg:DI 0 ax [orig:122 D.25594 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 D.25594 ] [121])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:752 218 {*adddi_1}
     (nil))
(insn 130 129 131 11 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:122 D.25594 ] [122])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:752 8 {*cmpdi_1}
     (nil))
(jump_insn 131 130 132 11 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) ge2fitman_fmtext_o.cpp:752 612 {*jcc_1}
     (nil)
 -> 144)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123 124 125 126 127 216
(note 132 131 133 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 12 (set (reg:SI 2 cx [orig:123 D.25588 ] [123])
        (const_int 2 [0x2])) ge2fitman_fmtext_o.cpp:753 90 {*movsi_internal}
     (nil))
(insn 134 133 135 12 (set (reg/f:DI 0 ax [orig:124 D.25595 ] [124])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.sh+0 S8 A64])) ge2fitman_fmtext_o.cpp:753 89 {*movdi_internal}
     (nil))
(insn 135 134 136 12 (set (reg:SI 1 dx [216])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:753 90 {*movsi_internal}
     (nil))
(insn 136 135 137 12 (set (reg:DI 1 dx [orig:125 D.25585 ] [125])
        (sign_extend:DI (reg:SI 1 dx [216]))) ge2fitman_fmtext_o.cpp:753 142 {*extendsidi2_rex64}
     (nil))
(insn 137 136 138 12 (parallel [
            (set (reg:DI 1 dx [orig:126 D.25585 ] [126])
                (ashift:DI (reg:DI 1 dx [orig:125 D.25585 ] [125])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:753 512 {*ashldi3_1}
     (nil))
(insn 138 137 139 12 (parallel [
            (set (reg/f:DI 0 ax [orig:127 D.25596 ] [127])
                (plus:DI (reg/f:DI 0 ax [orig:124 D.25595 ] [124])
                    (reg:DI 1 dx [orig:126 D.25585 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:753 218 {*adddi_1}
     (nil))
(insn 139 138 140 12 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:123 D.25588 ] [123])) ge2fitman_fmtext_o.cpp:753 90 {*movsi_internal}
     (nil))
(insn 140 139 141 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:127 D.25596 ] [127])) ge2fitman_fmtext_o.cpp:753 89 {*movdi_internal}
     (nil))
(call_insn 141 140 312 12 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7f7c3754b6c0 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:753 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 312 141 313 12 (set (pc)
        (label_ref 155)) 654 {jump}
     (nil)
 -> 155)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 313 312 144)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 128 129 130 131 132 217
(code_label 144 313 145 13 58 "" [1 uses])
(note 145 144 146 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 13 (set (reg:SI 2 cx [orig:128 D.25588 ] [128])
        (const_int 8 [0x8])) ge2fitman_fmtext_o.cpp:755 90 {*movsi_internal}
     (nil))
(insn 147 146 148 13 (set (reg/f:DI 0 ax [orig:129 D.25597 ] [129])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:755 89 {*movdi_internal}
     (nil))
(insn 148 147 149 13 (set (reg:SI 1 dx [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:755 90 {*movsi_internal}
     (nil))
(insn 149 148 150 13 (set (reg:DI 1 dx [orig:130 D.25585 ] [130])
        (sign_extend:DI (reg:SI 1 dx [217]))) ge2fitman_fmtext_o.cpp:755 142 {*extendsidi2_rex64}
     (nil))
(insn 150 149 151 13 (parallel [
            (set (reg:DI 1 dx [orig:131 D.25585 ] [131])
                (ashift:DI (reg:DI 1 dx [orig:130 D.25585 ] [130])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:755 512 {*ashldi3_1}
     (nil))
(insn 151 150 152 13 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.25596 ] [132])
                (plus:DI (reg/f:DI 0 ax [orig:129 D.25597 ] [129])
                    (reg:DI 1 dx [orig:131 D.25585 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:755 218 {*adddi_1}
     (nil))
(insn 152 151 153 13 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:128 D.25588 ] [128])) ge2fitman_fmtext_o.cpp:755 90 {*movsi_internal}
     (nil))
(insn 153 152 154 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:132 D.25596 ] [132])) ge2fitman_fmtext_o.cpp:755 89 {*movdi_internal}
     (nil))
(call_insn 154 153 155 13 (call (mem:QI (symbol_ref:DI ("_Z9swapBytesPci") [flags 0x41]  <function_decl 0x7f7c3754b6c0 swapBytes>) [0 swapBytes S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:755 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              12 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 155 154 156 14 59 "" [1 uses])
(note 156 155 157 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 157 156 314 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:747 217 {*addsi_1}
     (nil))
(jump_insn 314 157 315 14 (set (pc)
        (label_ref 158)) ge2fitman_fmtext_o.cpp:747 654 {jump}
     (nil)
 -> 158)
;;  succ:       10 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 315 314 161)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              10
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 133 134 135 218
(code_label 161 315 162 15 57 "" [2 uses])
(note 162 161 163 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 164 15 (set (reg/f:DI 0 ax [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:777 89 {*movdi_internal}
     (nil))
(insn 164 163 166 15 (set (reg:DI 0 ax [orig:133 D.25587 ] [133])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [218])
                (const_int 24 [0x18])) [0 main_header_31(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:777 89 {*movdi_internal}
     (nil))
(insn 166 164 167 15 (parallel [
            (set (reg:DI 0 ax [orig:135 D.25594 ] [135])
                (plus:DI (reg:DI 0 ax [orig:134 D.25594 ] [134])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:777 218 {*adddi_1}
     (nil))
(insn 167 166 168 15 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:135 D.25594 ] [135])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:777 8 {*cmpdi_1}
     (nil))
(jump_insn 168 167 169 15 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) ge2fitman_fmtext_o.cpp:777 612 {*jcc_1}
     (nil)
 -> 193)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 169 168 170 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 190 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:778 90 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              18 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 190 170 171 17 63 "" [1 uses])
(note 171 190 172 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 173 17 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:778 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 173 172 174 17 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) ge2fitman_fmtext_o.cpp:778 612 {*jcc_1}
     (nil)
 -> 226)
;;  succ:       23
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138 139 140 141 142 143 144 145 219 220 221
(note 174 173 175 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 18 (set (reg/f:DI 0 ax [orig:136 D.25591 ] [136])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:779 89 {*movdi_internal}
     (nil))
(insn 176 175 177 18 (set (reg:SI 1 dx [219])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:779 90 {*movsi_internal}
     (nil))
(insn 177 176 178 18 (set (reg:DI 1 dx [orig:137 D.25585 ] [137])
        (sign_extend:DI (reg:SI 1 dx [219]))) ge2fitman_fmtext_o.cpp:779 142 {*extendsidi2_rex64}
     (nil))
(insn 178 177 179 18 (parallel [
            (set (reg:DI 1 dx [orig:138 D.25585 ] [138])
                (ashift:DI (reg:DI 1 dx [orig:137 D.25585 ] [137])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:779 512 {*ashldi3_1}
     (nil))
(insn 179 178 180 18 (parallel [
            (set (reg/f:DI 0 ax [orig:139 D.25591 ] [139])
                (plus:DI (reg/f:DI 0 ax [orig:136 D.25591 ] [136])
                    (reg:DI 1 dx [orig:138 D.25585 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:779 218 {*adddi_1}
     (nil))
(insn 180 179 181 18 (set (reg/f:DI 1 dx [orig:140 D.25595 ] [140])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.sh+0 S8 A64])) ge2fitman_fmtext_o.cpp:779 89 {*movdi_internal}
     (nil))
(insn 181 180 182 18 (set (reg:SI 2 cx [220])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:779 90 {*movsi_internal}
     (nil))
(insn 182 181 183 18 (set (reg:DI 2 cx [orig:141 D.25585 ] [141])
        (sign_extend:DI (reg:SI 2 cx [220]))) ge2fitman_fmtext_o.cpp:779 142 {*extendsidi2_rex64}
     (nil))
(insn 183 182 184 18 (parallel [
            (set (reg:DI 2 cx [orig:142 D.25585 ] [142])
                (ashift:DI (reg:DI 2 cx [orig:141 D.25585 ] [141])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:779 512 {*ashldi3_1}
     (nil))
(insn 184 183 185 18 (parallel [
            (set (reg/f:DI 1 dx [orig:143 D.25595 ] [143])
                (plus:DI (reg/f:DI 1 dx [orig:140 D.25595 ] [140])
                    (reg:DI 2 cx [orig:142 D.25585 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:779 218 {*adddi_1}
     (nil))
(insn 185 184 186 18 (set (reg:HI 1 dx [orig:144 D.25598 ] [144])
        (mem:HI (reg/f:DI 1 dx [orig:143 D.25595 ] [143]) [0 *_108+0 S2 A16])) ge2fitman_fmtext_o.cpp:779 92 {*movhi_internal}
     (nil))
(insn 186 185 187 18 (set (reg:SI 1 dx [221])
        (sign_extend:SI (reg:HI 1 dx [orig:144 D.25598 ] [144]))) ge2fitman_fmtext_o.cpp:779 146 {extendhisi2}
     (nil))
(insn 187 186 188 18 (set (reg:SF 21 xmm0 [orig:145 D.25599 ] [145])
        (float:SF (reg:SI 1 dx [221]))) ge2fitman_fmtext_o.cpp:779 199 {*floatsisf2_sse}
     (nil))
(insn 188 187 189 18 (set (mem:SF (reg/f:DI 0 ax [orig:139 D.25591 ] [139]) [0 *_104+0 S4 A32])
        (reg:SF 21 xmm0 [orig:145 D.25599 ] [145])) ge2fitman_fmtext_o.cpp:779 129 {*movsf_internal}
     (nil))
(insn 189 188 316 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:778 217 {*addsi_1}
     (nil))
(jump_insn 316 189 317 18 (set (pc)
        (label_ref 190)) ge2fitman_fmtext_o.cpp:778 654 {jump}
     (nil)
 -> 190)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 317 316 193)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 148 222
(code_label 193 317 194 19 61 "" [1 uses])
(note 194 193 195 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 19 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 main_header+0 S8 A64])) ge2fitman_fmtext_o.cpp:782 89 {*movdi_internal}
     (nil))
(insn 196 195 198 19 (set (reg:DI 0 ax [orig:146 D.25587 ] [146])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [222])
                (const_int 24 [0x18])) [0 main_header_31(D)->ebytes.number+0 S8 A64])) ge2fitman_fmtext_o.cpp:782 89 {*movdi_internal}
     (nil))
(insn 198 196 199 19 (parallel [
            (set (reg:DI 0 ax [orig:148 D.25594 ] [148])
                (plus:DI (reg:DI 0 ax [orig:147 D.25594 ] [147])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:782 218 {*adddi_1}
     (nil))
(insn 199 198 200 19 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:148 D.25594 ] [148])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:782 8 {*cmpdi_1}
     (nil))
(jump_insn 200 199 201 19 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) ge2fitman_fmtext_o.cpp:782 612 {*jcc_1}
     (nil)
 -> 226)
;;  succ:       20 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 201 200 202 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 223 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:783 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              22 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 223 202 203 21 64 "" [1 uses])
(note 203 223 204 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 204 203 205 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:783 7 {*cmpsi_1}
     (nil))
(jump_insn 205 204 206 21 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 226)
            (pc))) ge2fitman_fmtext_o.cpp:783 612 {*jcc_1}
     (nil)
 -> 226)
;;  succ:       23
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 150 151 152 153 154 155 156 157 223 224 225 226
(note 206 205 207 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 22 (set (reg/f:DI 0 ax [orig:149 D.25597 ] [149])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.lo+0 S8 A64])) ge2fitman_fmtext_o.cpp:784 89 {*movdi_internal}
     (nil))
(insn 208 207 209 22 (set (reg:SI 1 dx [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:784 90 {*movsi_internal}
     (nil))
(insn 209 208 210 22 (set (reg:DI 1 dx [orig:150 D.25585 ] [150])
        (sign_extend:DI (reg:SI 1 dx [223]))) ge2fitman_fmtext_o.cpp:784 142 {*extendsidi2_rex64}
     (nil))
(insn 210 209 211 22 (parallel [
            (set (reg:DI 1 dx [orig:151 D.25585 ] [151])
                (ashift:DI (reg:DI 1 dx [orig:150 D.25585 ] [150])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:784 512 {*ashldi3_1}
     (nil))
(insn 211 210 212 22 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.25597 ] [152])
                (plus:DI (reg/f:DI 0 ax [orig:149 D.25597 ] [149])
                    (reg:DI 1 dx [orig:151 D.25585 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:784 218 {*adddi_1}
     (nil))
(insn 212 211 213 22 (set (reg:DI 0 ax [orig:153 D.25587 ] [153])
        (mem:DI (reg/f:DI 0 ax [orig:152 D.25597 ] [152]) [0 *_120+0 S8 A64])) ge2fitman_fmtext_o.cpp:784 89 {*movdi_internal}
     (nil))
(insn 213 212 214 22 (set (reg:SF 21 xmm0 [224])
        (float:SF (reg:DI 0 ax [orig:153 D.25587 ] [153]))) ge2fitman_fmtext_o.cpp:784 200 {*floatdisf2_sse}
     (nil))
(insn 214 213 215 22 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 temp_float+0 S4 A32])
        (reg:SF 21 xmm0 [224])) ge2fitman_fmtext_o.cpp:784 129 {*movsf_internal}
     (nil))
(insn 215 214 216 22 (set (reg/f:DI 0 ax [orig:154 D.25591 ] [154])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:785 89 {*movdi_internal}
     (nil))
(insn 216 215 217 22 (set (reg:SI 1 dx [225])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:785 90 {*movsi_internal}
     (nil))
(insn 217 216 218 22 (set (reg:DI 1 dx [orig:155 D.25585 ] [155])
        (sign_extend:DI (reg:SI 1 dx [225]))) ge2fitman_fmtext_o.cpp:785 142 {*extendsidi2_rex64}
     (nil))
(insn 218 217 219 22 (parallel [
            (set (reg:DI 1 dx [orig:156 D.25585 ] [156])
                (ashift:DI (reg:DI 1 dx [orig:155 D.25585 ] [155])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:785 512 {*ashldi3_1}
     (nil))
(insn 219 218 220 22 (parallel [
            (set (reg/f:DI 0 ax [orig:157 D.25591 ] [157])
                (plus:DI (reg/f:DI 0 ax [orig:154 D.25591 ] [154])
                    (reg:DI 1 dx [orig:156 D.25585 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:785 218 {*adddi_1}
     (nil))
(insn 220 219 221 22 (set (reg:SF 21 xmm0 [226])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 temp_float+0 S4 A32])) ge2fitman_fmtext_o.cpp:785 129 {*movsf_internal}
     (nil))
(insn 221 220 222 22 (set (mem:SF (reg/f:DI 0 ax [orig:157 D.25591 ] [157]) [0 *_126+0 S4 A32])
        (reg:SF 21 xmm0 [226])) ge2fitman_fmtext_o.cpp:785 129 {*movsf_internal}
     (nil))
(insn 222 221 318 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -52 [0xffffffffffffffcc])) [0 countPoint+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:783 217 {*addsi_1}
     (nil))
(jump_insn 318 222 319 22 (set (pc)
        (label_ref 223)) ge2fitman_fmtext_o.cpp:783 654 {jump}
     (nil)
 -> 223)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 319 318 226)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;;              19
;;              21
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 227 228 229 230 231 232
(code_label 226 319 227 23 62 "" [3 uses])
(note 227 226 228 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 23 (set (reg:SI 0 ax [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:794 90 {*movsi_internal}
     (nil))
(insn 229 228 230 23 (set (reg:DI 0 ax [orig:158 D.25585 ] [158])
        (sign_extend:DI (reg:SI 0 ax [227]))) ge2fitman_fmtext_o.cpp:794 142 {*extendsidi2_rex64}
     (nil))
(insn 230 229 231 23 (parallel [
            (set (reg:DI 1 dx [orig:159 D.25585 ] [159])
                (ashift:DI (reg:DI 0 ax [orig:158 D.25585 ] [158])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:794 512 {*ashldi3_1}
     (nil))
(insn 231 230 232 23 (set (reg/f:DI 0 ax [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:794 89 {*movdi_internal}
     (nil))
(insn 232 231 233 23 (parallel [
            (set (reg/f:DI 3 bx [orig:160 D.25591 ] [160])
                (plus:DI (reg:DI 1 dx [orig:159 D.25585 ] [159])
                    (reg/f:DI 0 ax [228])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:794 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:159 D.25585 ] [159]))
        (nil)))
(insn 233 232 234 23 (set (reg/f:DI 0 ax [orig:161 D.25591 ] [161])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:794 89 {*movdi_internal}
     (nil))
(insn 234 233 235 23 (set (reg:SF 21 xmm0 [orig:162 D.25599 ] [162])
        (mem:SF (reg/f:DI 0 ax [orig:161 D.25591 ] [161]) [0 *_133+0 S4 A32])) ge2fitman_fmtext_o.cpp:794 129 {*movsf_internal}
     (nil))
(insn 235 234 236 23 (set (reg:DF 22 xmm1 [orig:163 D.25600 ] [163])
        (float_extend:DF (reg:SF 21 xmm0 [orig:162 D.25599 ] [162]))) ge2fitman_fmtext_o.cpp:794 152 {*extendsfdf2_sse}
     (nil))
(insn 236 235 237 23 (set (reg/f:DI 0 ax [orig:164 D.25591 ] [164])
        (mem/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 data_points.fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:794 89 {*movdi_internal}
     (nil))
(insn 237 236 238 23 (parallel [
            (set (reg/f:DI 0 ax [orig:165 D.25591 ] [165])
                (plus:DI (reg/f:DI 0 ax [orig:164 D.25591 ] [164])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:794 218 {*adddi_1}
     (nil))
(insn 238 237 239 23 (set (reg:SF 21 xmm0 [orig:166 D.25599 ] [166])
        (mem:SF (reg/f:DI 0 ax [orig:165 D.25591 ] [165]) [0 *_137+0 S4 A32])) ge2fitman_fmtext_o.cpp:794 129 {*movsf_internal}
     (nil))
(insn 239 238 242 23 (set (reg:DF 21 xmm0 [orig:167 D.25600 ] [167])
        (float_extend:DF (reg:SF 21 xmm0 [orig:166 D.25599 ] [166]))) ge2fitman_fmtext_o.cpp:794 152 {*extendsfdf2_sse}
     (nil))
(call_insn 242 239 244 23 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7f7c38922870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:794 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 244 242 245 23 (set (reg:SF 21 xmm0 [orig:169 D.25599 ] [169])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:168 D.25600 ] [168]))) ge2fitman_fmtext_o.cpp:794 157 {*truncdfsf_fast_sse}
     (nil))
(insn 245 244 246 23 (set (mem:SF (reg/f:DI 3 bx [orig:160 D.25591 ] [160]) [0 *_132+0 S4 A32])
        (reg:SF 21 xmm0 [orig:169 D.25599 ] [169])) ge2fitman_fmtext_o.cpp:794 129 {*movsf_internal}
     (nil))
(insn 246 245 247 23 (set (reg:SI 0 ax [229])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:795 90 {*movsi_internal}
     (nil))
(insn 247 246 248 23 (set (reg:DI 0 ax [orig:170 D.25585 ] [170])
        (sign_extend:DI (reg:SI 0 ax [229]))) ge2fitman_fmtext_o.cpp:795 142 {*extendsidi2_rex64}
     (nil))
(insn 248 247 249 23 (parallel [
            (set (reg:DI 1 dx [orig:171 D.25585 ] [171])
                (ashift:DI (reg:DI 0 ax [orig:170 D.25585 ] [170])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:795 512 {*ashldi3_1}
     (nil))
(insn 249 248 250 23 (set (reg/f:DI 0 ax [230])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:795 89 {*movdi_internal}
     (nil))
(insn 250 249 251 23 (parallel [
            (set (reg/f:DI 0 ax [orig:172 D.25591 ] [172])
                (plus:DI (reg/f:DI 0 ax [230])
                    (reg:DI 1 dx [orig:171 D.25585 ] [171])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:795 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:171 D.25585 ] [171]))
        (nil)))
(insn 251 250 252 23 (set (reg:SF 21 xmm0 [orig:173 D.25599 ] [173])
        (mem:SF (reg/f:DI 0 ax [orig:172 D.25591 ] [172]) [0 *_146+0 S4 A32])) ge2fitman_fmtext_o.cpp:795 129 {*movsf_internal}
     (nil))
(insn 252 251 253 23 (set (reg:SF 22 xmm1 [232])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])) ge2fitman_fmtext_o.cpp:795 129 {*movsf_internal}
     (nil))
(insn 253 252 254 23 (set (reg:SF 21 xmm0 [231])
        (plus:SF (reg:SF 21 xmm0 [orig:173 D.25599 ] [173])
            (reg:SF 22 xmm1 [232]))) ge2fitman_fmtext_o.cpp:795 797 {*fop_sf_comm_sse}
     (nil))
(insn 254 253 255 23 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])
        (reg:SF 21 xmm0 [231])) ge2fitman_fmtext_o.cpp:795 129 {*movsf_internal}
     (nil))
(insn 255 254 320 23 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:719 217 {*addsi_1}
     (nil))
(jump_insn 320 255 321 23 (set (pc)
        (label_ref 256)) ge2fitman_fmtext_o.cpp:719 654 {jump}
     (nil)
 -> 256)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 321 320 259)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 174 175 176 177 178 233 234 235
(code_label 259 321 260 24 55 "" [1 uses])
(note 260 259 261 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 261 260 262 24 (set (reg:SI 0 ax [233])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])) ge2fitman_fmtext_o.cpp:799 90 {*movsi_internal}
     (nil))
(insn 262 261 263 24 (set (reg:DI 0 ax [orig:174 D.25585 ] [174])
        (sign_extend:DI (reg:SI 0 ax [233]))) ge2fitman_fmtext_o.cpp:799 142 {*extendsidi2_rex64}
     (nil))
(insn 263 262 264 24 (parallel [
            (set (reg:DI 1 dx [orig:175 D.25585 ] [175])
                (ashift:DI (reg:DI 0 ax [orig:174 D.25585 ] [174])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:799 512 {*ashldi3_1}
     (nil))
(insn 264 263 265 24 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:799 89 {*movdi_internal}
     (nil))
(insn 265 264 266 24 (parallel [
            (set (reg/f:DI 0 ax [orig:176 D.25591 ] [176])
                (plus:DI (reg/f:DI 0 ax [234])
                    (reg:DI 1 dx [orig:175 D.25585 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:799 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:175 D.25585 ] [175]))
        (nil)))
(insn 266 265 267 24 (set (reg:SF 21 xmm0 [orig:177 D.25599 ] [177])
        (float:SF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -60 [0xffffffffffffffc4])) [0 countFID+0 S4 A32]))) ge2fitman_fmtext_o.cpp:799 199 {*floatsisf2_sse}
     (nil))
(insn 267 266 268 24 (set (reg:SF 22 xmm1 [235])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 totalPhase+0 S4 A32])) ge2fitman_fmtext_o.cpp:799 129 {*movsf_internal}
     (nil))
(insn 268 267 335 24 (set (reg:SF 22 xmm1 [orig:178 D.25599 ] [178])
        (div:SF (reg:SF 22 xmm1 [orig:178 D.25599 ] [178])
            (reg:SF 21 xmm0 [orig:177 D.25599 ] [177]))) ge2fitman_fmtext_o.cpp:799 804 {*fop_sf_1_sse}
     (nil))
(insn 335 268 269 24 (set (reg:SF 21 xmm0 [orig:178 D.25599 ] [178])
        (reg:SF 22 xmm1 [orig:178 D.25599 ] [178])) ge2fitman_fmtext_o.cpp:799 129 {*movsf_internal}
     (nil))
(insn 269 335 270 24 (set (mem:SF (reg/f:DI 0 ax [orig:176 D.25591 ] [176]) [0 *_152+0 S4 A32])
        (reg:SF 21 xmm0 [orig:178 D.25599 ] [178])) ge2fitman_fmtext_o.cpp:799 129 {*movsf_internal}
     (nil))
(insn 270 269 322 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:693 217 {*addsi_1}
     (nil))
(jump_insn 322 270 323 24 (set (pc)
        (label_ref 271)) ge2fitman_fmtext_o.cpp:693 654 {jump}
     (nil)
 -> 271)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 323 322 274)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 274 323 275 25 54 "" [1 uses])
(note 275 274 276 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f7c37280630 *.LC29>)) ge2fitman_fmtext_o.cpp:806 89 {*movdi_internal}
     (nil))
(call_insn 277 276 278 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:806 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 278 277 279 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7c372806c0 *.LC30>)) ge2fitman_fmtext_o.cpp:808 89 {*movdi_internal}
     (nil))
(call_insn 279 278 280 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f7c3899b000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:808 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 280 279 305 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:809 90 {*movsi_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              27 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236
(code_label 305 280 281 26 68 "" [1 uses])
(note 281 305 282 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 282 281 283 26 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])) ge2fitman_fmtext_o.cpp:809 90 {*movsi_internal}
     (nil))
(insn 283 282 284 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [236])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 countChannel+0 S4 A32]))) ge2fitman_fmtext_o.cpp:809 7 {*cmpsi_1}
     (nil))
(jump_insn 284 283 285 26 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 327)
            (pc))) ge2fitman_fmtext_o.cpp:809 612 {*jcc_1}
     (nil)
 -> 327)
;;  succ:       29
;;              27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 179 180 181 182 183 184 185 186 237 238 239 240 241
(note 285 284 286 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 286 285 287 27 (set (reg:SI 0 ax [237])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])) ge2fitman_fmtext_o.cpp:810 90 {*movsi_internal}
     (nil))
(insn 287 286 288 27 (set (reg:DI 0 ax [orig:179 D.25585 ] [179])
        (sign_extend:DI (reg:SI 0 ax [237]))) ge2fitman_fmtext_o.cpp:810 142 {*extendsidi2_rex64}
     (nil))
(insn 288 287 289 27 (parallel [
            (set (reg:DI 1 dx [orig:180 D.25585 ] [180])
                (ashift:DI (reg:DI 0 ax [orig:179 D.25585 ] [179])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:810 512 {*ashldi3_1}
     (nil))
(insn 289 288 290 27 (set (reg/f:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 phase+0 S8 A64])) ge2fitman_fmtext_o.cpp:810 89 {*movdi_internal}
     (nil))
(insn 290 289 291 27 (parallel [
            (set (reg/f:DI 0 ax [orig:181 D.25591 ] [181])
                (plus:DI (reg/f:DI 0 ax [238])
                    (reg:DI 1 dx [orig:180 D.25585 ] [180])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:810 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 phase+0 S8 A64])
            (reg:DI 1 dx [orig:180 D.25585 ] [180]))
        (nil)))
(insn 291 290 292 27 (set (reg:SF 22 xmm1 [orig:182 D.25599 ] [182])
        (mem:SF (reg/f:DI 0 ax [orig:181 D.25591 ] [181]) [0 *_162+0 S4 A32])) ge2fitman_fmtext_o.cpp:810 129 {*movsf_internal}
     (nil))
(insn 292 291 293 27 (set (reg:SF 21 xmm0 [239])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC31") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:810 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.8e+2 [0x0.b4p+8])
        (nil)))
(insn 293 292 294 27 (set (reg:SF 21 xmm0 [orig:183 D.25599 ] [183])
        (mult:SF (reg:SF 21 xmm0 [239])
            (reg:SF 22 xmm1 [orig:182 D.25599 ] [182]))) ge2fitman_fmtext_o.cpp:810 797 {*fop_sf_comm_sse}
     (nil))
(insn 294 293 295 27 (set (reg:DF 21 xmm0 [orig:184 D.25600 ] [184])
        (float_extend:DF (reg:SF 21 xmm0 [orig:183 D.25599 ] [183]))) ge2fitman_fmtext_o.cpp:810 152 {*extendsfdf2_sse}
     (nil))
(insn 295 294 296 27 (set (reg:DF 22 xmm1 [240])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC32") [flags 0x2]) [0  S8 A64])) ge2fitman_fmtext_o.cpp:810 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 3.141592653589793115997963468544185161590576171875e+0 [0x0.c90fdaa22168cp+2])
        (nil)))
(insn 296 295 297 27 (set (reg:DF 21 xmm0 [orig:185 D.25600 ] [185])
        (div:DF (reg:DF 21 xmm0 [orig:184 D.25600 ] [184])
            (reg:DF 22 xmm1 [240]))) ge2fitman_fmtext_o.cpp:810 805 {*fop_df_1_sse}
     (nil))
(insn 297 296 298 27 (set (reg:SI 0 ax [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])) ge2fitman_fmtext_o.cpp:810 90 {*movsi_internal}
     (nil))
(insn 298 297 300 27 (parallel [
            (set (reg:SI 0 ax [orig:186 D.25588 ] [186])
                (plus:SI (reg:SI 0 ax [241])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:810 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 counter+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 300 298 301 27 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:186 D.25588 ] [186])) ge2fitman_fmtext_o.cpp:810 90 {*movsi_internal}
     (nil))
(insn 301 300 302 27 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f7c37280750 *.LC33>)) ge2fitman_fmtext_o.cpp:810 89 {*movdi_internal}
     (nil))
(insn 302 301 303 27 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:810 93 {*movqi_internal}
     (nil))
(call_insn 303 302 304 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f7c3899a5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:810 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:DF (use (reg:DF 21 xmm0))
                    (nil))))))
(insn 304 303 324 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -64 [0xffffffffffffffc0])) [0 counter+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:809 217 {*addsi_1}
     (nil))
(jump_insn 324 304 325 27 (set (pc)
        (label_ref 305)) ge2fitman_fmtext_o.cpp:809 654 {jump}
     (nil)
 -> 305)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 325 324 327)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 28, flags: (NEW, RTL, MODIFIED)
;;  pred:       26
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 327 325 326 29 69 "" [1 uses])
(note 326 327 328 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 328 326 310 29 (const_int 0 [0]) ge2fitman_fmtext_o.cpp:813 684 {nop}
     (nil))
;;  succ:       28 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 [100.0%]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 310 328 311 28 53 "" [0 uses])
(note 311 310 329 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 329 311 0 NOTE_INSN_DELETED)

;; Function void fix_phase(float, int, Precision1*, int, int) (_Z9fix_phasefiP10Precision1ii, funcdef_no=1024, decl_uid=24404, cgraph_uid=229, symbol_order=230)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1225,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=615,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=3,overall=1223,losers=2 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=4,overall=614,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=20,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 2:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 11:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 12:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 13:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 14:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 25
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 31:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 33:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=0,overall=1223,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=616,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=8,overall=1221,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=618,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 37:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 49:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =x  (1) xm {*extendsfdf2_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 51:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 56
	 Choosing alt 0 in insn 56:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=180 from oldreg=96, assigning class SSE_REGS to r180
      Making reload reg 180 for reg 96 optional
   56: r108:DF=r107:DF+r180:DF
      REG_DEAD r107:DF
      REG_DEAD r96:DF
    Inserting insn reload before:
  145: r180:DF=r96:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 145:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 60:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=181, assigning class SSE_REGS to r181
   60: r181:SF=float_trunc(r109:DF)
      REG_DEAD r109:DF
    Inserting insn reload after:
  146: [frame:DI-0x18]=r181:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 146:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 65
	 Choosing alt 0 in insn 65:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 71:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 84:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 90:  (0) =x  (1) xm {*truncdfsf_fast_sse}
      Creating newreg=182, assigning class SSE_REGS to r182
   90: r182:SF=float_trunc(r129:DF)
      REG_DEAD r129:DF
    Inserting insn reload after:
  147: [frame:DI-0x14]=r182:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=6,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=7,overall=15,losers=2,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=8,overall=1,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 147:  (0) m  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 91:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =x  (1) 0  (2) xm {*fop_sf_1_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 93:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 104:  (0) =x  (1) xm {*extendsfdf2_sse}
      Creating newreg=183 from oldreg=137, assigning class SSE_REGS to r183
  104: r183:DF=float_extend([frame:DI-0x18])
    Inserting insn reload after:
  148: r137:DF=r183:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=14,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 148:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=184 from oldreg=137, assigning class SSE_REGS to r184
      Making reload reg 184 for reg 137 optional
  109: r140:DF=r139:DF*r184:DF
      REG_DEAD r139:DF
      REG_DEAD r137:DF
    Inserting insn reload before:
  149: r184:DF=r137:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 149:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 111:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 120:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non input pseudo reload: reject++
          alt=0,overall=7,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 123:  (0) =x  (1) xm {*extendsfdf2_sse}
      Creating newreg=185 from oldreg=150, assigning class SSE_REGS to r185
  123: r185:DF=float_extend([frame:DI-0x18])
    Inserting insn reload after:
  150: r150:DF=r185:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1221,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=8,overall=1219,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
          alt=14,overall=613,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 150:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =x  (1) xm {*extendsfdf2_sse}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rBwBz {*call_value}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=186 from oldreg=150, assigning class SSE_REGS to r186
      Making reload reg 186 for reg 150 optional
  128: r153:DF=r152:DF*r186:DF
      REG_DEAD r152:DF
      REG_DEAD r150:DF
    Inserting insn reload before:
  151: r186:DF=r150:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 151:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =x  (1) xm {*truncdfsf_fast_sse}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 130:  (0) m  (1) v {*movsf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 131:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=187 from oldreg=150, assigning class SSE_REGS to inheritance r187
    Original reg change 150->187 (bb4):
  150: r187:DF=r185:DF
    Add original<-inheritance after:
  152: r150:DF=r187:DF

    Inheritance reuse change 150->187 (bb4):
  151: r186:DF=r187:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=188 from oldreg=137, assigning class SSE_REGS to inheritance r188
    Original reg change 137->188 (bb4):
  148: r188:DF=r183:DF
    Add original<-inheritance after:
  153: r137:DF=r188:DF

    Inheritance reuse change 137->188 (bb4):
  149: r184:DF=r188:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=189 from oldreg=96, assigning class SSE_REGS to inheritance r189
    Original reg change 96->189 (bb4):
   37: r189:DF=xmm0:DF
      REG_DEAD xmm0:DF
    Add original<-inheritance after:
  154: r96:DF=r189:DF

    Inheritance reuse change 96->189 (bb4):
  145: r180:DF=r189:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   152: r150:DF=r187:DF
deleting insn with uid = 152.
	    Removing dead insn:
   153: r137:DF=r188:DF
deleting insn with uid = 153.
	    Removing dead insn:
   154: r96:DF=r189:DF
deleting insn with uid = 154.
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 143: point = 0
  BB 3
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 17: point = 1
  BB 4
   Insn 139: point = 2
   Insn 131: point = 2
   Insn 130: point = 2
   Insn 129: point = 3
   Insn 128: point = 5
   Insn 151: point = 7
	   Creating copy r186<-r187@1
   Insn 127: point = 9
   Insn 126: point = 10
   Insn 125: point = 10
   Insn 124: point = 11
   Insn 150: point = 12
	   Creating copy r185->r187@1
   Insn 123: point = 14
   Insn 122: point = 15
   Insn 121: point = 17
   Insn 120: point = 19
   Insn 119: point = 21
   Insn 118: point = 23
   Insn 117: point = 24
   Insn 116: point = 26
   Insn 115: point = 28
   Insn 114: point = 29
   Insn 113: point = 31
   Insn 112: point = 33
   Insn 111: point = 34
   Insn 110: point = 35
   Insn 109: point = 37
   Insn 149: point = 39
	   Creating copy r184<-r188@1
   Insn 108: point = 41
   Insn 107: point = 42
   Insn 106: point = 42
   Insn 105: point = 43
   Insn 148: point = 44
	   Creating copy r183->r188@1
   Insn 104: point = 46
   Insn 103: point = 47
   Insn 102: point = 49
   Insn 101: point = 51
   Insn 100: point = 53
   Insn 99: point = 54
   Insn 98: point = 56
   Insn 97: point = 58
   Insn 96: point = 59
   Insn 95: point = 61
   Insn 94: point = 63
   Insn 93: point = 64
   Insn 92: point = 65
   Insn 91: point = 67
   Insn 147: point = 68
   Insn 90: point = 69
   Insn 89: point = 71
   Insn 88: point = 72
   Insn 87: point = 72
   Insn 86: point = 73
   Insn 85: point = 74
   Insn 84: point = 76
   Insn 83: point = 78
   Insn 82: point = 80
   Insn 81: point = 82
   Insn 80: point = 84
   Insn 79: point = 86
   Insn 78: point = 87
   Insn 77: point = 89
   Insn 76: point = 91
   Insn 75: point = 92
   Insn 74: point = 94
   Insn 73: point = 96
   Insn 72: point = 97
   Insn 71: point = 99
   Insn 70: point = 101
   Insn 69: point = 103
   Insn 68: point = 105
   Insn 67: point = 107
   Insn 66: point = 108
   Insn 65: point = 110
   Insn 64: point = 112
   Insn 63: point = 113
   Insn 62: point = 115
   Insn 61: point = 117
   Insn 146: point = 118
   Insn 60: point = 119
   Insn 59: point = 121
   Insn 58: point = 122
   Insn 57: point = 122
   Insn 56: point = 123
   Insn 145: point = 125
	   Creating copy r180<-r189@1
   Insn 55: point = 127
   Insn 54: point = 128
   Insn 53: point = 128
   Insn 52: point = 129
   Insn 51: point = 130
   Insn 50: point = 131
   Insn 49: point = 133
   Insn 48: point = 135
   Insn 47: point = 137
   Insn 46: point = 139
   Insn 45: point = 141
   Insn 44: point = 143
   Insn 43: point = 144
   Insn 42: point = 146
   Insn 41: point = 148
   Insn 40: point = 149
   Insn 39: point = 151
   Insn 38: point = 153
   Insn 37: point = 154
	Hard reg 21 is preferable by r189 with profit 1
   Insn 36: point = 155
   Insn 35: point = 155
   Insn 34: point = 156
   Insn 33: point = 157
   Insn 32: point = 158
   Insn 31: point = 160
   Insn 30: point = 162
   Insn 29: point = 164
   Insn 28: point = 166
   Insn 27: point = 168
   Insn 26: point = 169
   Insn 25: point = 171
   Insn 24: point = 173
   Insn 23: point = 174
   Insn 22: point = 176
   Insn 21: point = 178
  BB 2
   Insn 15: point = 179
   Insn 14: point = 179
   Insn 13: point = 180
   Insn 12: point = 181
   Insn 11: point = 182
   Insn 10: point = 183
   Insn 6: point = 183
   Insn 5: point = 183
   Insn 4: point = 183
   Insn 3: point = 183
   Insn 2: point = 183
 r87: [175..176]
 r88: [172..174]
 r89: [170..171]
 r90: [163..169]
 r91: [165..166]
 r92: [163..164]
 r93: [161..162]
 r94: [159..160]
 r95: [155..158]
 r97: [150..151]
 r98: [147..149]
 r99: [145..146]
 r100: [136..144]
 r101: [140..141]
 r102: [138..139]
 r103: [136..137]
 r104: [134..135]
 r105: [132..133]
 r106: [128..131]
 r107: [124..127]
 r108: [122..123]
 r109: [120..121]
 r110: [114..115]
 r111: [111..113]
 r112: [109..110]
 r113: [102..108]
 r114: [104..105]
 r115: [102..103]
 r116: [100..101]
 r117: [98..99]
 r118: [73..97]
 r119: [93..94]
 r120: [90..92]
 r121: [88..89]
 r122: [79..87]
 r123: [83..84]
 r124: [81..82]
 r125: [79..80]
 r126: [77..78]
 r127: [75..76]
 r128: [72..74]
 r129: [70..71]
 r130: [60..61]
 r131: [57..59]
 r132: [55..56]
 r133: [48..54]
 r134: [50..51]
 r135: [48..49]
 r136: [34..47]
 r138: [42..43]
 r139: [38..41]
 r140: [36..37]
 r141: [34..35]
 r142: [30..31]
 r143: [27..29]
 r144: [25..26]
 r145: [16..24]
 r146: [20..21]
 r147: [18..19]
 r148: [16..17]
 r149: [2..15]
 r151: [10..11]
 r152: [6..9]
 r153: [4..5]
 r154: [2..3]
 r155: [181..182]
 r156: [179..180]
 r157: [0..1]
 r158: [177..178]
 r159: [172..173]
 r160: [167..168]
 r161: [156..157]
 r162: [152..153]
 r163: [147..148]
 r164: [142..143]
 r165: [129..130]
 r166: [116..117]
 r167: [111..112]
 r168: [106..107]
 r169: [95..96]
 r170: [90..91]
 r171: [85..86]
 r172: [64..65]
 r173: [66..67]
 r174: [62..63]
 r175: [57..58]
 r176: [52..53]
 r177: [32..33]
 r178: [27..28]
 r179: [22..23]
 r180: [124..125]
 r181: [118..119]
 r182: [68..69]
 r183: [45..46]
 r184: [38..39]
 r185: [13..14]
 r186: [6..7]
 r187: [8..12]
 r188: [40..44]
 r189: [126..154]
Compressing live ranges: from 183 to 160 - 87%
Ranges after the compression:
 r87: [152..153]
 r88: [150..151]
 r89: [148..149]
 r90: [142..147]
 r91: [144..145]
 r92: [142..143]
 r93: [140..141]
 r94: [138..139]
 r95: [136..137]
 r97: [132..133]
 r98: [130..131]
 r99: [128..129]
 r100: [120..127]
 r101: [124..125]
 r102: [122..123]
 r103: [120..121]
 r104: [118..119]
 r105: [116..117]
 r106: [114..115]
 r107: [110..113]
 r108: [108..109]
 r109: [106..107]
 r110: [100..101]
 r111: [98..99]
 r112: [96..97]
 r113: [90..95]
 r114: [92..93]
 r115: [90..91]
 r116: [88..89]
 r117: [86..87]
 r118: [64..85]
 r119: [82..83]
 r120: [80..81]
 r121: [78..79]
 r122: [70..77]
 r123: [74..75]
 r124: [72..73]
 r125: [70..71]
 r126: [68..69]
 r127: [66..67]
 r128: [64..65]
 r129: [62..63]
 r130: [52..53]
 r131: [50..51]
 r132: [48..49]
 r133: [42..47]
 r134: [44..45]
 r135: [42..43]
 r136: [30..41]
 r138: [38..39]
 r139: [34..37]
 r140: [32..33]
 r141: [30..31]
 r142: [26..27]
 r143: [24..25]
 r144: [22..23]
 r145: [14..21]
 r146: [18..19]
 r147: [16..17]
 r148: [14..15]
 r149: [2..13]
 r151: [10..11]
 r152: [6..9]
 r153: [4..5]
 r154: [2..3]
 r155: [158..159]
 r156: [156..157]
 r157: [0..1]
 r158: [154..155]
 r159: [150..151]
 r160: [146..147]
 r161: [136..137]
 r162: [134..135]
 r163: [130..131]
 r164: [126..127]
 r165: [114..115]
 r166: [102..103]
 r167: [98..99]
 r168: [94..95]
 r169: [84..85]
 r170: [80..81]
 r171: [76..77]
 r172: [56..57]
 r173: [58..59]
 r174: [54..55]
 r175: [50..51]
 r176: [46..47]
 r177: [28..29]
 r178: [24..25]
 r179: [20..21]
 r180: [110..111]
 r181: [104..105]
 r182: [60..61]
 r183: [40..41]
 r184: [34..35]
 r185: [12..13]
 r186: [6..7]
 r187: [8..11]
 r188: [36..39]
 r189: [112..135]

********** Assignment #1: **********

	 Assigning to 180 (cl=SSE_REGS, orig=96, freq=2, tfirst=180, tfreq=2)...
	   Assign 23 to optional reload r180 (freq=2)
	Hard reg 21 is preferable by r189 with profit 1
	Hard reg 23 is preferable by r189 with profit 1
	 Assigning to 189 (cl=SSE_REGS, orig=96, freq=2, tfirst=180, tfreq=2)...
	 Assigning to 181 (cl=SSE_REGS, orig=181, freq=2, tfirst=181, tfreq=2)...
	   Assign 24 to reload r181 (freq=2)
	 Assigning to 182 (cl=SSE_REGS, orig=182, freq=2, tfirst=182, tfreq=2)...
	   Assign 25 to reload r182 (freq=2)
	 Assigning to 183 (cl=SSE_REGS, orig=137, freq=2, tfirst=183, tfreq=2)...
	   Assign 26 to reload r183 (freq=2)
	Hard reg 26 is preferable by r188 with profit 1
	Hard reg 26 is preferable by r184 with profit 1
	 Assigning to 184 (cl=SSE_REGS, orig=137, freq=2, tfirst=183, tfreq=2)...
	   Assign 26 to optional reload r184 (freq=2)
	Hard reg 26 is preferable by r188 with profit 2
	 Assigning to 188 (cl=SSE_REGS, orig=137, freq=2, tfirst=183, tfreq=2)...
	 Assigning to 185 (cl=SSE_REGS, orig=150, freq=2, tfirst=185, tfreq=2)...
	   Assign 27 to reload r185 (freq=2)
	Hard reg 27 is preferable by r187 with profit 1
	Hard reg 27 is preferable by r186 with profit 1
	 Assigning to 186 (cl=SSE_REGS, orig=150, freq=2, tfirst=185, tfreq=2)...
	   Assign 27 to optional reload r186 (freq=2)
	Hard reg 27 is preferable by r187 with profit 2
	 Assigning to 187 (cl=SSE_REGS, orig=150, freq=2, tfirst=185, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 3 (0.00%)
   Insn after restoring regs:
  151: r186:DF=r150:DF
      REG_DEAD r150:DF
   Insn after restoring regs:
  150: r150:DF=r185:DF
      REG_DEAD r185:DF
   Insn after restoring regs:
  149: r184:DF=r137:DF
      REG_DEAD r137:DF
   Insn after restoring regs:
  148: r137:DF=r183:DF
      REG_DEAD r183:DF
   Insn after restoring regs:
  145: r180:DF=r96:DF
      REG_DEAD r96:DF
   Insn after restoring regs:
   37: r96:DF=xmm0:DF
      REG_DEAD xmm0:DF
Remove optional reload reg 180
  Restoring original insn:
   56: r108:DF=r107:DF+r96:DF
      REG_DEAD r96:DF
      REG_DEAD r107:DF
  Deleting move 145
  145: r180:DF=r96:DF
      REG_DEAD r96:DF
deleting insn with uid = 145.
Remove optional reload reg 184
  Restoring original insn:
  109: r140:DF=r139:DF*r137:DF
      REG_DEAD r137:DF
      REG_DEAD r139:DF
  Deleting move 149
  149: r184:DF=r137:DF
      REG_DEAD r137:DF
deleting insn with uid = 149.
Remove optional reload reg 186
  Restoring original insn:
  128: r153:DF=r152:DF*r150:DF
      REG_DEAD r150:DF
      REG_DEAD r152:DF
  Deleting move 151
  151: r186:DF=r150:DF
      REG_DEAD r150:DF
deleting insn with uid = 151.

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=190 from oldreg=150, assigning class SSE_REGS to r190
      Making reload reg 190 for reg 150 optional
  128: r153:DF=r152:DF*r190:DF
      REG_DEAD r150:DF
      REG_DEAD r152:DF
    Inserting insn reload before:
  155: r190:DF=r150:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 155:  (0) v  (1) m {*movdf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=191 from oldreg=137, assigning class SSE_REGS to r191
      Making reload reg 191 for reg 137 optional
  109: r140:DF=r139:DF*r191:DF
      REG_DEAD r137:DF
      REG_DEAD r139:DF
    Inserting insn reload before:
  156: r191:DF=r137:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 156:  (0) v  (1) m {*movdf_internal}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
      Creating newreg=192 from oldreg=96, assigning class SSE_REGS to r192
      Making reload reg 192 for reg 96 optional
   56: r108:DF=r107:DF+r192:DF
      REG_DEAD r96:DF
      REG_DEAD r107:DF
    Inserting insn reload before:
  157: r192:DF=r96:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=1214,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 157:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=193 from oldreg=150, assigning class SSE_REGS to inheritance r193
    Original reg change 150->193 (bb4):
  150: r193:DF=r185:DF
      REG_DEAD r185:DF
    Add original<-inheritance after:
  158: r150:DF=r193:DF

    Inheritance reuse change 150->193 (bb4):
  155: r190:DF=r193:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=194 from oldreg=137, assigning class SSE_REGS to inheritance r194
    Original reg change 137->194 (bb4):
  148: r194:DF=r183:DF
      REG_DEAD r183:DF
    Add original<-inheritance after:
  159: r137:DF=r194:DF

    Inheritance reuse change 137->194 (bb4):
  156: r191:DF=r194:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=195 from oldreg=96, assigning class SSE_REGS to inheritance r195
    Original reg change 96->195 (bb4):
   37: r195:DF=xmm0:DF
      REG_DEAD xmm0:DF
    Add original<-inheritance after:
  160: r96:DF=r195:DF

    Inheritance reuse change 96->195 (bb4):
  157: r192:DF=r195:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   158: r150:DF=r193:DF
deleting insn with uid = 158.
	    Removing dead insn:
   159: r137:DF=r194:DF
deleting insn with uid = 159.
	    Removing dead insn:
   160: r96:DF=r195:DF
deleting insn with uid = 160.
EBB 6
EBB 5

********** Pseudo live ranges #2: **********

  BB 5
  BB 6
   Insn 143: point = 0
  BB 3
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 17: point = 1
  BB 4
   Insn 139: point = 2
   Insn 131: point = 2
   Insn 130: point = 2
   Insn 129: point = 3
   Insn 128: point = 5
   Insn 155: point = 7
	   Creating copy r190<-r193@1
   Insn 127: point = 9
   Insn 126: point = 10
   Insn 125: point = 10
   Insn 124: point = 11
   Insn 150: point = 12
	   Creating copy r185->r193@1
   Insn 123: point = 14
   Insn 122: point = 15
   Insn 121: point = 17
   Insn 120: point = 19
   Insn 119: point = 21
   Insn 118: point = 23
   Insn 117: point = 24
   Insn 116: point = 26
   Insn 115: point = 28
   Insn 114: point = 29
   Insn 113: point = 31
   Insn 112: point = 33
   Insn 111: point = 34
   Insn 110: point = 35
   Insn 109: point = 37
   Insn 156: point = 39
	   Creating copy r191<-r194@1
   Insn 108: point = 41
   Insn 107: point = 42
   Insn 106: point = 42
   Insn 105: point = 43
   Insn 148: point = 44
	   Creating copy r183->r194@1
   Insn 104: point = 46
   Insn 103: point = 47
   Insn 102: point = 49
   Insn 101: point = 51
   Insn 100: point = 53
   Insn 99: point = 54
   Insn 98: point = 56
   Insn 97: point = 58
   Insn 96: point = 59
   Insn 95: point = 61
   Insn 94: point = 63
   Insn 93: point = 64
   Insn 92: point = 65
   Insn 91: point = 67
   Insn 147: point = 68
   Insn 90: point = 69
   Insn 89: point = 71
   Insn 88: point = 72
   Insn 87: point = 72
   Insn 86: point = 73
   Insn 85: point = 74
   Insn 84: point = 76
   Insn 83: point = 78
   Insn 82: point = 80
   Insn 81: point = 82
   Insn 80: point = 84
   Insn 79: point = 86
   Insn 78: point = 87
   Insn 77: point = 89
   Insn 76: point = 91
   Insn 75: point = 92
   Insn 74: point = 94
   Insn 73: point = 96
   Insn 72: point = 97
   Insn 71: point = 99
   Insn 70: point = 101
   Insn 69: point = 103
   Insn 68: point = 105
   Insn 67: point = 107
   Insn 66: point = 108
   Insn 65: point = 110
   Insn 64: point = 112
   Insn 63: point = 113
   Insn 62: point = 115
   Insn 61: point = 117
   Insn 146: point = 118
   Insn 60: point = 119
   Insn 59: point = 121
   Insn 58: point = 122
   Insn 57: point = 122
   Insn 56: point = 123
   Insn 157: point = 125
	   Creating copy r192<-r195@1
   Insn 55: point = 127
   Insn 54: point = 128
   Insn 53: point = 128
   Insn 52: point = 129
   Insn 51: point = 130
   Insn 50: point = 131
   Insn 49: point = 133
   Insn 48: point = 135
   Insn 47: point = 137
   Insn 46: point = 139
   Insn 45: point = 141
   Insn 44: point = 143
   Insn 43: point = 144
   Insn 42: point = 146
   Insn 41: point = 148
   Insn 40: point = 149
   Insn 39: point = 151
   Insn 38: point = 153
   Insn 37: point = 154
	Hard reg 21 is preferable by r195 with profit 1
   Insn 36: point = 155
   Insn 35: point = 155
   Insn 34: point = 156
   Insn 33: point = 157
   Insn 32: point = 158
   Insn 31: point = 160
   Insn 30: point = 162
   Insn 29: point = 164
   Insn 28: point = 166
   Insn 27: point = 168
   Insn 26: point = 169
   Insn 25: point = 171
   Insn 24: point = 173
   Insn 23: point = 174
   Insn 22: point = 176
   Insn 21: point = 178
  BB 2
   Insn 15: point = 179
   Insn 14: point = 179
   Insn 13: point = 180
   Insn 12: point = 181
   Insn 11: point = 182
   Insn 10: point = 183
   Insn 6: point = 183
   Insn 5: point = 183
   Insn 4: point = 183
   Insn 3: point = 183
   Insn 2: point = 183
 r87: [175..176]
 r88: [172..174]
 r89: [170..171]
 r90: [163..169]
 r91: [165..166]
 r92: [163..164]
 r93: [161..162]
 r94: [159..160]
 r95: [155..158]
 r97: [150..151]
 r98: [147..149]
 r99: [145..146]
 r100: [136..144]
 r101: [140..141]
 r102: [138..139]
 r103: [136..137]
 r104: [134..135]
 r105: [132..133]
 r106: [128..131]
 r107: [124..127]
 r108: [122..123]
 r109: [120..121]
 r110: [114..115]
 r111: [111..113]
 r112: [109..110]
 r113: [102..108]
 r114: [104..105]
 r115: [102..103]
 r116: [100..101]
 r117: [98..99]
 r118: [73..97]
 r119: [93..94]
 r120: [90..92]
 r121: [88..89]
 r122: [79..87]
 r123: [83..84]
 r124: [81..82]
 r125: [79..80]
 r126: [77..78]
 r127: [75..76]
 r128: [72..74]
 r129: [70..71]
 r130: [60..61]
 r131: [57..59]
 r132: [55..56]
 r133: [48..54]
 r134: [50..51]
 r135: [48..49]
 r136: [34..47]
 r138: [42..43]
 r139: [38..41]
 r140: [36..37]
 r141: [34..35]
 r142: [30..31]
 r143: [27..29]
 r144: [25..26]
 r145: [16..24]
 r146: [20..21]
 r147: [18..19]
 r148: [16..17]
 r149: [2..15]
 r151: [10..11]
 r152: [6..9]
 r153: [4..5]
 r154: [2..3]
 r155: [181..182]
 r156: [179..180]
 r157: [0..1]
 r158: [177..178]
 r159: [172..173]
 r160: [167..168]
 r161: [156..157]
 r162: [152..153]
 r163: [147..148]
 r164: [142..143]
 r165: [129..130]
 r166: [116..117]
 r167: [111..112]
 r168: [106..107]
 r169: [95..96]
 r170: [90..91]
 r171: [85..86]
 r172: [64..65]
 r173: [66..67]
 r174: [62..63]
 r175: [57..58]
 r176: [52..53]
 r177: [32..33]
 r178: [27..28]
 r179: [22..23]
 r181: [118..119]
 r182: [68..69]
 r183: [45..46]
 r185: [13..14]
 r190: [6..7]
 r191: [38..39]
 r192: [124..125]
 r193: [8..12]
 r194: [40..44]
 r195: [126..154]
Compressing live ranges: from 183 to 160 - 87%
Ranges after the compression:
 r87: [152..153]
 r88: [150..151]
 r89: [148..149]
 r90: [142..147]
 r91: [144..145]
 r92: [142..143]
 r93: [140..141]
 r94: [138..139]
 r95: [136..137]
 r97: [132..133]
 r98: [130..131]
 r99: [128..129]
 r100: [120..127]
 r101: [124..125]
 r102: [122..123]
 r103: [120..121]
 r104: [118..119]
 r105: [116..117]
 r106: [114..115]
 r107: [110..113]
 r108: [108..109]
 r109: [106..107]
 r110: [100..101]
 r111: [98..99]
 r112: [96..97]
 r113: [90..95]
 r114: [92..93]
 r115: [90..91]
 r116: [88..89]
 r117: [86..87]
 r118: [64..85]
 r119: [82..83]
 r120: [80..81]
 r121: [78..79]
 r122: [70..77]
 r123: [74..75]
 r124: [72..73]
 r125: [70..71]
 r126: [68..69]
 r127: [66..67]
 r128: [64..65]
 r129: [62..63]
 r130: [52..53]
 r131: [50..51]
 r132: [48..49]
 r133: [42..47]
 r134: [44..45]
 r135: [42..43]
 r136: [30..41]
 r138: [38..39]
 r139: [34..37]
 r140: [32..33]
 r141: [30..31]
 r142: [26..27]
 r143: [24..25]
 r144: [22..23]
 r145: [14..21]
 r146: [18..19]
 r147: [16..17]
 r148: [14..15]
 r149: [2..13]
 r151: [10..11]
 r152: [6..9]
 r153: [4..5]
 r154: [2..3]
 r155: [158..159]
 r156: [156..157]
 r157: [0..1]
 r158: [154..155]
 r159: [150..151]
 r160: [146..147]
 r161: [136..137]
 r162: [134..135]
 r163: [130..131]
 r164: [126..127]
 r165: [114..115]
 r166: [102..103]
 r167: [98..99]
 r168: [94..95]
 r169: [84..85]
 r170: [80..81]
 r171: [76..77]
 r172: [56..57]
 r173: [58..59]
 r174: [54..55]
 r175: [50..51]
 r176: [46..47]
 r177: [28..29]
 r178: [24..25]
 r179: [20..21]
 r181: [104..105]
 r182: [60..61]
 r183: [40..41]
 r185: [12..13]
 r190: [6..7]
 r191: [34..35]
 r192: [110..111]
 r193: [8..11]
 r194: [36..39]
 r195: [112..135]

********** Assignment #2: **********

	 Assigning to 190 (cl=SSE_REGS, orig=150, freq=2, tfirst=190, tfreq=2)...
	   Assign 23 to optional reload r190 (freq=2)
	Hard reg 23 is preferable by r193 with profit 1
	 Assigning to 193 (cl=SSE_REGS, orig=150, freq=2, tfirst=190, tfreq=2)...
	 Assigning to 191 (cl=SSE_REGS, orig=137, freq=2, tfirst=191, tfreq=2)...
	   Assign 28 to optional reload r191 (freq=2)
	Hard reg 28 is preferable by r194 with profit 1
	 Assigning to 194 (cl=SSE_REGS, orig=137, freq=2, tfirst=191, tfreq=2)...
	 Assigning to 192 (cl=SSE_REGS, orig=96, freq=2, tfirst=192, tfreq=2)...
	   Assign 23 to optional reload r192 (freq=2)
	Hard reg 21 is preferable by r195 with profit 1
	Hard reg 23 is preferable by r195 with profit 1
	 Assigning to 195 (cl=SSE_REGS, orig=96, freq=2, tfirst=192, tfreq=2)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 3 (0.00%)
   Insn after restoring regs:
  155: r190:DF=r150:DF
      REG_DEAD r150:DF
   Insn after restoring regs:
  150: r150:DF=r185:DF
      REG_DEAD r185:DF
   Insn after restoring regs:
  156: r191:DF=r137:DF
      REG_DEAD r137:DF
   Insn after restoring regs:
  148: r137:DF=r183:DF
      REG_DEAD r183:DF
   Insn after restoring regs:
  157: r192:DF=r96:DF
      REG_DEAD r96:DF
   Insn after restoring regs:
   37: r96:DF=xmm0:DF
      REG_DEAD xmm0:DF
Keep optional reload reg 180
Keep optional reload reg 184
Keep optional reload reg 186
Remove optional reload reg 190
  Restoring original insn:
  128: r153:DF=r152:DF*r150:DF
      REG_DEAD r150:DF
      REG_DEAD r152:DF
  Deleting move 155
  155: r190:DF=r150:DF
      REG_DEAD r150:DF
deleting insn with uid = 155.
Remove optional reload reg 191
  Restoring original insn:
  109: r140:DF=r139:DF*r137:DF
      REG_DEAD r137:DF
      REG_DEAD r139:DF
  Deleting move 156
  156: r191:DF=r137:DF
      REG_DEAD r137:DF
deleting insn with uid = 156.
Remove optional reload reg 192
  Restoring original insn:
   56: r108:DF=r107:DF+r96:DF
      REG_DEAD r96:DF
      REG_DEAD r107:DF
  Deleting move 157
  157: r192:DF=r96:DF
      REG_DEAD r96:DF
deleting insn with uid = 157.

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 128:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
            2 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}

********** Pseudo live ranges #3: **********

  BB 5
  BB 6
   Insn 143: point = 0
  BB 3
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 17: point = 1
  BB 4
   Insn 139: point = 2
   Insn 131: point = 2
   Insn 130: point = 2
   Insn 129: point = 3
   Insn 128: point = 5
   Insn 127: point = 7
   Insn 126: point = 8
   Insn 125: point = 8
   Insn 124: point = 9
   Insn 150: point = 10
   Insn 123: point = 12
   Insn 122: point = 13
   Insn 121: point = 15
   Insn 120: point = 17
   Insn 119: point = 19
   Insn 118: point = 21
   Insn 117: point = 22
   Insn 116: point = 24
   Insn 115: point = 26
   Insn 114: point = 27
   Insn 113: point = 29
   Insn 112: point = 31
   Insn 111: point = 32
   Insn 110: point = 33
   Insn 109: point = 35
   Insn 108: point = 37
   Insn 107: point = 38
   Insn 106: point = 38
   Insn 105: point = 39
   Insn 148: point = 40
   Insn 104: point = 42
   Insn 103: point = 43
   Insn 102: point = 45
   Insn 101: point = 47
   Insn 100: point = 49
   Insn 99: point = 50
   Insn 98: point = 52
   Insn 97: point = 54
   Insn 96: point = 55
   Insn 95: point = 57
   Insn 94: point = 59
   Insn 93: point = 60
   Insn 92: point = 61
   Insn 91: point = 63
   Insn 147: point = 64
   Insn 90: point = 65
   Insn 89: point = 67
   Insn 88: point = 68
   Insn 87: point = 68
   Insn 86: point = 69
   Insn 85: point = 70
   Insn 84: point = 72
   Insn 83: point = 74
   Insn 82: point = 76
   Insn 81: point = 78
   Insn 80: point = 80
   Insn 79: point = 82
   Insn 78: point = 83
   Insn 77: point = 85
   Insn 76: point = 87
   Insn 75: point = 88
   Insn 74: point = 90
   Insn 73: point = 92
   Insn 72: point = 93
   Insn 71: point = 95
   Insn 70: point = 97
   Insn 69: point = 99
   Insn 68: point = 101
   Insn 67: point = 103
   Insn 66: point = 104
   Insn 65: point = 106
   Insn 64: point = 108
   Insn 63: point = 109
   Insn 62: point = 111
   Insn 61: point = 113
   Insn 146: point = 114
   Insn 60: point = 115
   Insn 59: point = 117
   Insn 58: point = 118
   Insn 57: point = 118
   Insn 56: point = 119
   Insn 55: point = 121
   Insn 54: point = 122
   Insn 53: point = 122
   Insn 52: point = 123
   Insn 51: point = 124
   Insn 50: point = 125
   Insn 49: point = 127
   Insn 48: point = 129
   Insn 47: point = 131
   Insn 46: point = 133
   Insn 45: point = 135
   Insn 44: point = 137
   Insn 43: point = 138
   Insn 42: point = 140
   Insn 41: point = 142
   Insn 40: point = 143
   Insn 39: point = 145
   Insn 38: point = 147
   Insn 37: point = 148
   Insn 36: point = 149
   Insn 35: point = 149
   Insn 34: point = 150
   Insn 33: point = 151
   Insn 32: point = 152
   Insn 31: point = 154
   Insn 30: point = 156
   Insn 29: point = 158
   Insn 28: point = 160
   Insn 27: point = 162
   Insn 26: point = 163
   Insn 25: point = 165
   Insn 24: point = 167
   Insn 23: point = 168
   Insn 22: point = 170
   Insn 21: point = 172
  BB 2
   Insn 15: point = 173
   Insn 14: point = 173
   Insn 13: point = 174
   Insn 12: point = 175
   Insn 11: point = 176
   Insn 10: point = 177
   Insn 6: point = 177
   Insn 5: point = 177
   Insn 4: point = 177
   Insn 3: point = 177
   Insn 2: point = 177
 r96: [120..148]
 r137: [36..40]
 r150: [6..10]
Compressing live ranges: from 177 to 6 - 3%
Ranges after the compression:
 r96: [4..5]
 r137: [2..3]
 r150: [0..1]
  Slot 0 regnos (width = 8):	 96	 150	 137
Changing spilled pseudos to memory in insn #37
Changing spilled pseudos to memory in insn #56
Changing spilled pseudos to memory in insn #148
Changing spilled pseudos to memory in insn #109
Changing spilled pseudos to memory in insn #150
Changing spilled pseudos to memory in insn #128
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #128
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
Reusing alternative 15 for insn #150
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 150:  (0) m  (1) v {*movdf_internal}
Reusing alternative 0 for insn #109
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
Reusing alternative 15 for insn #148
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 148:  (0) m  (1) v {*movdf_internal}
Reusing alternative 0 for insn #56
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =x  (1) %0  (2) xm {*fop_df_comm_sse}
Reusing alternative 15 for insn #37
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 37:  (0) m  (1) v {*movdf_internal}
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 48
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 70
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 86
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 83
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 103
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 111
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 122
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 130
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 51
changing reg in insn 52
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 79
changing reg in insn 80
changing reg in insn 92
changing reg in insn 93
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 118
changing reg in insn 119
deleting insn with uid = 34.
deleting insn with uid = 35.
deleting insn with uid = 52.
deleting insn with uid = 53.
deleting insn with uid = 55.
deleting insn with uid = 57.
deleting insn with uid = 59.
deleting insn with uid = 86.
deleting insn with uid = 87.
deleting insn with uid = 89.
deleting insn with uid = 106.
deleting insn with uid = 108.
deleting insn with uid = 125.
deleting insn with uid = 127.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 88.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 126.


void fix_phase(float, int, Precision1*, int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2] 24[xmm3] 25[xmm4] 26[xmm5] 27[xmm6] 28[xmm7]
;;  ref usage 	r0={42d,35u} r1={34d,28u,6e} r2={7d,1u} r3={2d,2u} r4={7d,1u} r5={7d,1u} r6={1d,52u} r7={1d,12u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={35d,1u} r18={6d} r19={6d} r20={1d,1u,6e} r21={25d,25u} r22={10d,3u} r23={7d} r24={8d,1u} r25={8d,1u} r26={8d,1u} r27={8d,1u} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 746{568d,166u,12e} in 117{111 regular + 6 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]
;; lr  def 	 155 156
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 phase_applied+0 S4 A32])
        (reg:SF 21 xmm0 [ phase_applied ])) ge2fitman_fmtext_o.cpp:823 129 {*movsf_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 num_points+0 S4 A32])
        (reg:SI 5 di [ num_points ])) ge2fitman_fmtext_o.cpp:823 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])
        (reg:DI 4 si [ in_data ])) ge2fitman_fmtext_o.cpp:823 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])
        (reg:SI 1 dx [ fid ])) ge2fitman_fmtext_o.cpp:823 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 countFID+0 S4 A32])
        (reg:SI 2 cx [ countFID ])) ge2fitman_fmtext_o.cpp:823 90 {*movsi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:824 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SF 21 xmm0 [155])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:825 129 {*movsf_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data_magnitude+0 S4 A32])
        (reg:SF 21 xmm0 [155])) ge2fitman_fmtext_o.cpp:825 129 {*movsf_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SF 21 xmm0 [156])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S4 A32])) ge2fitman_fmtext_o.cpp:826 129 {*movsf_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32])
        (reg:SF 21 xmm0 [156])) ge2fitman_fmtext_o.cpp:826 129 {*movsf_internal}
     (nil))
(insn 15 14 132 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:830 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157
(code_label 132 15 16 3 72 "" [1 uses])
(note 16 132 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:SI 0 ax [157])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:830 90 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [157])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 num_points+0 S4 A32]))) ge2fitman_fmtext_o.cpp:830 7 {*cmpsi_1}
     (nil))
(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 142)
            (pc))) ge2fitman_fmtext_o.cpp:830 612 {*jcc_1}
     (nil)
 -> 142)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 0 ax [158])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 90 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 0 ax [orig:87 D.25604 ] [87])
        (sign_extend:DI (reg:SI 0 ax [158]))) ge2fitman_fmtext_o.cpp:831 142 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 1 dx [orig:88 D.25604 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.25604 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 512 {*ashldi3_1}
     (nil))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:831 89 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.25605 ] [89])
                (plus:DI (reg/f:DI 0 ax [159])
                    (reg:DI 1 dx [orig:88 D.25604 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.25604 ] [88]))
        (nil)))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [orig:90 D.25606 ] [90])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:89 D.25605 ] [89]) [0 _13->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:831 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:SI 1 dx [160])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 90 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 1 dx [orig:91 D.25604 ] [91])
        (sign_extend:DI (reg:SI 1 dx [160]))) ge2fitman_fmtext_o.cpp:831 142 {*extendsidi2_rex64}
     (nil))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 1 dx [orig:92 D.25604 ] [92])
                (ashift:DI (reg:DI 1 dx [orig:91 D.25604 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 512 {*ashldi3_1}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.25606 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:90 D.25606 ] [90])
                    (reg:DI 1 dx [orig:92 D.25604 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 218 {*adddi_1}
     (nil))
(insn 31 30 32 4 (set (reg:SF 21 xmm0 [orig:94 D.25607 ] [94])
        (mem:SF (reg/f:DI 0 ax [orig:93 D.25606 ] [93]) [0 *_17+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 129 {*movsf_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DF 21 xmm0 [orig:95 D.25608 ] [95])
        (float_extend:DF (reg:SF 21 xmm0 [orig:94 D.25607 ] [94]))) ge2fitman_fmtext_o.cpp:831 152 {*extendsfdf2_sse}
     (nil))
(insn 33 32 36 4 (set (reg:DF 22 xmm1 [161])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S8 A64])) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(call_insn 36 33 37 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("pow") [flags 0x41]  <function_decl 0x7f7c38957360 pow>) [0 __builtin_pow S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:831 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 37 36 160 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64])
        (reg:DF 21 xmm0)) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (nil))
(note 160 37 154 4 NOTE_INSN_DELETED)
(note 154 160 38 4 NOTE_INSN_DELETED)
(insn 38 154 39 4 (set (reg:SI 0 ax [162])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 90 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:DI 0 ax [orig:97 D.25604 ] [97])
        (sign_extend:DI (reg:SI 0 ax [162]))) ge2fitman_fmtext_o.cpp:831 142 {*extendsidi2_rex64}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg:DI 1 dx [orig:98 D.25604 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 D.25604 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 512 {*ashldi3_1}
     (nil))
(insn 41 40 42 4 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:831 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg/f:DI 0 ax [orig:99 D.25605 ] [99])
                (plus:DI (reg/f:DI 0 ax [163])
                    (reg:DI 1 dx [orig:98 D.25604 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:98 D.25604 ] [98]))
        (nil)))
(insn 43 42 44 4 (set (reg/f:DI 0 ax [orig:100 D.25606 ] [100])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:99 D.25605 ] [99]) [0 _24->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:831 89 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:SI 1 dx [164])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 90 {*movsi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 1 dx [orig:101 D.25609 ] [101])
        (sign_extend:DI (reg:SI 1 dx [164]))) ge2fitman_fmtext_o.cpp:831 142 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg:DI 1 dx [orig:102 D.25609 ] [102])
                (plus:DI (reg:DI 1 dx [orig:101 D.25609 ] [101])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 218 {*adddi_1}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (reg:DI 1 dx [orig:103 D.25609 ] [103])
                (ashift:DI (reg:DI 1 dx [orig:102 D.25609 ] [102])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 512 {*ashldi3_1}
     (nil))
(insn 48 47 49 4 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.25606 ] [104])
                (plus:DI (reg/f:DI 0 ax [orig:100 D.25606 ] [100])
                    (reg:DI 1 dx [orig:103 D.25609 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:831 218 {*adddi_1}
     (nil))
(insn 49 48 50 4 (set (reg:SF 21 xmm0 [orig:105 D.25607 ] [105])
        (mem:SF (reg/f:DI 0 ax [orig:104 D.25606 ] [104]) [0 *_29+0 S4 A32])) ge2fitman_fmtext_o.cpp:831 129 {*movsf_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DF 21 xmm0 [orig:106 D.25608 ] [106])
        (float_extend:DF (reg:SF 21 xmm0 [orig:105 D.25607 ] [105]))) ge2fitman_fmtext_o.cpp:831 152 {*extendsfdf2_sse}
     (nil))
(insn 51 50 54 4 (set (reg:DF 22 xmm1 [165])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S8 A64])) ge2fitman_fmtext_o.cpp:831 128 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 2.0e+0 [0x0.8p+2])
        (nil)))
(call_insn 54 51 145 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("pow") [flags 0x41]  <function_decl 0x7f7c38957360 pow>) [0 __builtin_pow S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:831 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(note 145 54 157 4 NOTE_INSN_DELETED)
(note 157 145 56 4 NOTE_INSN_DELETED)
(insn 56 157 58 4 (set (reg:DF 21 xmm0 [orig:108 D.25608 ] [108])
        (plus:DF (reg:DF 21 xmm0 [orig:107 D.25608 ] [107])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64]))) ge2fitman_fmtext_o.cpp:831 798 {*fop_df_comm_sse}
     (nil))
(call_insn 58 56 60 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7f7c38966d80 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:831 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(insn 60 58 146 4 (set (reg:SF 24 xmm3 [181])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:109 D.25608 ] [109]))) ge2fitman_fmtext_o.cpp:831 157 {*truncdfsf_fast_sse}
     (nil))
(insn 146 60 61 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 data_magnitude+0 S4 A32])
        (reg:SF 24 xmm3 [181])) ge2fitman_fmtext_o.cpp:831 129 {*movsf_internal}
     (nil))
(insn 61 146 62 4 (set (reg:SI 0 ax [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 90 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (set (reg:DI 0 ax [orig:110 D.25604 ] [110])
        (sign_extend:DI (reg:SI 0 ax [166]))) ge2fitman_fmtext_o.cpp:832 142 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 4 (parallel [
            (set (reg:DI 1 dx [orig:111 D.25604 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 D.25604 ] [110])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 512 {*ashldi3_1}
     (nil))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:832 89 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (parallel [
            (set (reg/f:DI 0 ax [orig:112 D.25605 ] [112])
                (plus:DI (reg/f:DI 0 ax [167])
                    (reg:DI 1 dx [orig:111 D.25604 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:111 D.25604 ] [111]))
        (nil)))
(insn 66 65 67 4 (set (reg/f:DI 0 ax [orig:113 D.25606 ] [113])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:112 D.25605 ] [112]) [0 _40->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:832 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (set (reg:SI 1 dx [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 90 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg:DI 1 dx [orig:114 D.25604 ] [114])
        (sign_extend:DI (reg:SI 1 dx [168]))) ge2fitman_fmtext_o.cpp:832 142 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 4 (parallel [
            (set (reg:DI 1 dx [orig:115 D.25604 ] [115])
                (ashift:DI (reg:DI 1 dx [orig:114 D.25604 ] [114])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 512 {*ashldi3_1}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.25606 ] [116])
                (plus:DI (reg/f:DI 0 ax [orig:113 D.25606 ] [113])
                    (reg:DI 1 dx [orig:115 D.25604 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 218 {*adddi_1}
     (nil))
(insn 71 70 72 4 (set (reg:SF 21 xmm0 [orig:117 D.25607 ] [117])
        (mem:SF (reg/f:DI 0 ax [orig:116 D.25606 ] [116]) [0 *_44+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 129 {*movsf_internal}
     (nil))
(insn 72 71 73 4 (set (reg:DF 22 xmm1 [orig:118 D.25608 ] [118])
        (float_extend:DF (reg:SF 21 xmm0 [orig:117 D.25607 ] [117]))) ge2fitman_fmtext_o.cpp:832 152 {*extendsfdf2_sse}
     (nil))
(insn 73 72 74 4 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 90 {*movsi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:DI 0 ax [orig:119 D.25604 ] [119])
        (sign_extend:DI (reg:SI 0 ax [169]))) ge2fitman_fmtext_o.cpp:832 142 {*extendsidi2_rex64}
     (nil))
(insn 75 74 76 4 (parallel [
            (set (reg:DI 1 dx [orig:120 D.25604 ] [120])
                (ashift:DI (reg:DI 0 ax [orig:119 D.25604 ] [119])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 512 {*ashldi3_1}
     (nil))
(insn 76 75 77 4 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:832 89 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (parallel [
            (set (reg/f:DI 0 ax [orig:121 D.25605 ] [121])
                (plus:DI (reg/f:DI 0 ax [170])
                    (reg:DI 1 dx [orig:120 D.25604 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:120 D.25604 ] [120]))
        (nil)))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [orig:122 D.25606 ] [122])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:121 D.25605 ] [121]) [0 _49->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:832 89 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (set (reg:SI 1 dx [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 90 {*movsi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:DI 1 dx [orig:123 D.25609 ] [123])
        (sign_extend:DI (reg:SI 1 dx [171]))) ge2fitman_fmtext_o.cpp:832 142 {*extendsidi2_rex64}
     (nil))
(insn 81 80 82 4 (parallel [
            (set (reg:DI 1 dx [orig:124 D.25609 ] [124])
                (plus:DI (reg:DI 1 dx [orig:123 D.25609 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 218 {*adddi_1}
     (nil))
(insn 82 81 83 4 (parallel [
            (set (reg:DI 1 dx [orig:125 D.25609 ] [125])
                (ashift:DI (reg:DI 1 dx [orig:124 D.25609 ] [124])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 512 {*ashldi3_1}
     (nil))
(insn 83 82 84 4 (parallel [
            (set (reg/f:DI 0 ax [orig:126 D.25606 ] [126])
                (plus:DI (reg/f:DI 0 ax [orig:122 D.25606 ] [122])
                    (reg:DI 1 dx [orig:125 D.25609 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:832 218 {*adddi_1}
     (nil))
(insn 84 83 85 4 (set (reg:SF 21 xmm0 [orig:127 D.25607 ] [127])
        (mem:SF (reg/f:DI 0 ax [orig:126 D.25606 ] [126]) [0 *_54+0 S4 A32])) ge2fitman_fmtext_o.cpp:832 129 {*movsf_internal}
     (nil))
(insn 85 84 88 4 (set (reg:DF 21 xmm0 [orig:128 D.25608 ] [128])
        (float_extend:DF (reg:SF 21 xmm0 [orig:127 D.25607 ] [127]))) ge2fitman_fmtext_o.cpp:832 152 {*extendsfdf2_sse}
     (nil))
(call_insn 88 85 90 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan2") [flags 0x41]  <function_decl 0x7f7c38922870 atan2>) [0 __builtin_atan2 S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:832 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (expr_list:DF (use (reg:DF 22 xmm1))
            (nil))))
(insn 90 88 147 4 (set (reg:SF 25 xmm4 [182])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:129 D.25608 ] [129]))) ge2fitman_fmtext_o.cpp:832 157 {*truncdfsf_fast_sse}
     (nil))
(insn 147 90 91 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32])
        (reg:SF 25 xmm4 [182])) ge2fitman_fmtext_o.cpp:832 129 {*movsf_internal}
     (nil))
(insn 91 147 92 4 (set (reg:SF 21 xmm0 [173])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32])) ge2fitman_fmtext_o.cpp:841 129 {*movsf_internal}
     (nil))
(insn 92 91 93 4 (set (reg:SF 21 xmm0 [172])
        (minus:SF (reg:SF 21 xmm0 [173])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 phase_applied+0 S4 A32]))) ge2fitman_fmtext_o.cpp:841 804 {*fop_sf_1_sse}
     (nil))
(insn 93 92 94 4 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32])
        (reg:SF 21 xmm0 [172])) ge2fitman_fmtext_o.cpp:841 129 {*movsf_internal}
     (nil))
(insn 94 93 95 4 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:845 90 {*movsi_internal}
     (nil))
(insn 95 94 96 4 (set (reg:DI 0 ax [orig:130 D.25604 ] [130])
        (sign_extend:DI (reg:SI 0 ax [174]))) ge2fitman_fmtext_o.cpp:845 142 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 4 (parallel [
            (set (reg:DI 1 dx [orig:131 D.25604 ] [131])
                (ashift:DI (reg:DI 0 ax [orig:130 D.25604 ] [130])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:845 512 {*ashldi3_1}
     (nil))
(insn 97 96 98 4 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:845 89 {*movdi_internal}
     (nil))
(insn 98 97 99 4 (parallel [
            (set (reg/f:DI 0 ax [orig:132 D.25605 ] [132])
                (plus:DI (reg/f:DI 0 ax [175])
                    (reg:DI 1 dx [orig:131 D.25604 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:845 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:131 D.25604 ] [131]))
        (nil)))
(insn 99 98 100 4 (set (reg/f:DI 0 ax [orig:133 D.25606 ] [133])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:132 D.25605 ] [132]) [0 _64->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:845 89 {*movdi_internal}
     (nil))
(insn 100 99 101 4 (set (reg:SI 1 dx [176])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:845 90 {*movsi_internal}
     (nil))
(insn 101 100 102 4 (set (reg:DI 1 dx [orig:134 D.25604 ] [134])
        (sign_extend:DI (reg:SI 1 dx [176]))) ge2fitman_fmtext_o.cpp:845 142 {*extendsidi2_rex64}
     (nil))
(insn 102 101 103 4 (parallel [
            (set (reg:DI 1 dx [orig:135 D.25604 ] [135])
                (ashift:DI (reg:DI 1 dx [orig:134 D.25604 ] [134])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:845 512 {*ashldi3_1}
     (nil))
(insn 103 102 104 4 (parallel [
            (set (reg/f:DI 3 bx [orig:136 D.25606 ] [136])
                (plus:DI (reg/f:DI 0 ax [orig:133 D.25606 ] [133])
                    (reg:DI 1 dx [orig:135 D.25604 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:845 218 {*adddi_1}
     (nil))
(insn 104 103 148 4 (set (reg:DF 26 xmm5 [orig:137 D.25608 ] [137])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 data_magnitude+0 S4 A32]))) ge2fitman_fmtext_o.cpp:845 152 {*extendsfdf2_sse}
     (nil))
(insn 148 104 159 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64])
        (reg:DF 26 xmm5 [orig:137 D.25608 ] [137])) ge2fitman_fmtext_o.cpp:845 128 {*movdf_internal}
     (nil))
(note 159 148 153 4 NOTE_INSN_DELETED)
(note 153 159 105 4 NOTE_INSN_DELETED)
(insn 105 153 107 4 (set (reg:DF 21 xmm0 [orig:138 D.25608 ] [138])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32]))) ge2fitman_fmtext_o.cpp:845 152 {*extendsfdf2_sse}
     (nil))
(call_insn/u 107 105 149 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f7c389275e8 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:845 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(note 149 107 156 4 NOTE_INSN_DELETED)
(note 156 149 109 4 NOTE_INSN_DELETED)
(insn 109 156 110 4 (set (reg:DF 21 xmm0 [orig:140 D.25608 ] [140])
        (mult:DF (reg:DF 21 xmm0 [orig:139 D.25608 ] [139])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64]))) ge2fitman_fmtext_o.cpp:845 798 {*fop_df_comm_sse}
     (nil))
(insn 110 109 111 4 (set (reg:SF 21 xmm0 [orig:141 D.25607 ] [141])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:140 D.25608 ] [140]))) ge2fitman_fmtext_o.cpp:845 157 {*truncdfsf_fast_sse}
     (nil))
(insn 111 110 112 4 (set (mem:SF (reg/f:DI 3 bx [orig:136 D.25606 ] [136]) [0 *_68+0 S4 A32])
        (reg:SF 21 xmm0 [orig:141 D.25607 ] [141])) ge2fitman_fmtext_o.cpp:845 129 {*movsf_internal}
     (nil))
(insn 112 111 113 4 (set (reg:SI 0 ax [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 fid+0 S4 A32])) ge2fitman_fmtext_o.cpp:846 90 {*movsi_internal}
     (nil))
(insn 113 112 114 4 (set (reg:DI 0 ax [orig:142 D.25604 ] [142])
        (sign_extend:DI (reg:SI 0 ax [177]))) ge2fitman_fmtext_o.cpp:846 142 {*extendsidi2_rex64}
     (nil))
(insn 114 113 115 4 (parallel [
            (set (reg:DI 1 dx [orig:143 D.25604 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:142 D.25604 ] [142])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 512 {*ashldi3_1}
     (nil))
(insn 115 114 116 4 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 in_data+0 S8 A64])) ge2fitman_fmtext_o.cpp:846 89 {*movdi_internal}
     (nil))
(insn 116 115 117 4 (parallel [
            (set (reg/f:DI 0 ax [orig:144 D.25605 ] [144])
                (plus:DI (reg/f:DI 0 ax [178])
                    (reg:DI 1 dx [orig:143 D.25604 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 in_data+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.25604 ] [143]))
        (nil)))
(insn 117 116 118 4 (set (reg/f:DI 0 ax [orig:145 D.25606 ] [145])
        (mem/f/j:DI (reg/f:DI 0 ax [orig:144 D.25605 ] [144]) [0 _77->fl+0 S8 A64])) ge2fitman_fmtext_o.cpp:846 89 {*movdi_internal}
     (nil))
(insn 118 117 119 4 (set (reg:SI 1 dx [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])) ge2fitman_fmtext_o.cpp:846 90 {*movsi_internal}
     (nil))
(insn 119 118 120 4 (set (reg:DI 1 dx [orig:146 D.25609 ] [146])
        (sign_extend:DI (reg:SI 1 dx [179]))) ge2fitman_fmtext_o.cpp:846 142 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 4 (parallel [
            (set (reg:DI 1 dx [orig:147 D.25609 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 D.25609 ] [146])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 218 {*adddi_1}
     (nil))
(insn 121 120 122 4 (parallel [
            (set (reg:DI 1 dx [orig:148 D.25609 ] [148])
                (ashift:DI (reg:DI 1 dx [orig:147 D.25609 ] [147])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 512 {*ashldi3_1}
     (nil))
(insn 122 121 123 4 (parallel [
            (set (reg/f:DI 3 bx [orig:149 D.25606 ] [149])
                (plus:DI (reg/f:DI 0 ax [orig:145 D.25606 ] [145])
                    (reg:DI 1 dx [orig:148 D.25609 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:846 218 {*adddi_1}
     (nil))
(insn 123 122 150 4 (set (reg:DF 27 xmm6 [orig:150 D.25608 ] [150])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 data_magnitude+0 S4 A32]))) ge2fitman_fmtext_o.cpp:846 152 {*extendsfdf2_sse}
     (nil))
(insn 150 123 158 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64])
        (reg:DF 27 xmm6 [orig:150 D.25608 ] [150])) ge2fitman_fmtext_o.cpp:846 128 {*movdf_internal}
     (nil))
(note 158 150 152 4 NOTE_INSN_DELETED)
(note 152 158 124 4 NOTE_INSN_DELETED)
(insn 124 152 126 4 (set (reg:DF 21 xmm0 [orig:151 D.25608 ] [151])
        (float_extend:DF (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 data_phase+0 S4 A32]))) ge2fitman_fmtext_o.cpp:846 152 {*extendsfdf2_sse}
     (nil))
(call_insn/u 126 124 151 4 (set (reg:DF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f7c389645e8 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) ge2fitman_fmtext_o.cpp:846 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 21 xmm0))
        (nil)))
(note 151 126 155 4 NOTE_INSN_DELETED)
(note 155 151 128 4 NOTE_INSN_DELETED)
(insn 128 155 129 4 (set (reg:DF 21 xmm0 [orig:153 D.25608 ] [153])
        (mult:DF (reg:DF 21 xmm0 [orig:152 D.25608 ] [152])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 %sfp+-48 S8 A64]))) ge2fitman_fmtext_o.cpp:846 798 {*fop_df_comm_sse}
     (nil))
(insn 129 128 130 4 (set (reg:SF 21 xmm0 [orig:154 D.25607 ] [154])
        (float_truncate:SF (reg:DF 21 xmm0 [orig:153 D.25608 ] [153]))) ge2fitman_fmtext_o.cpp:846 157 {*truncdfsf_fast_sse}
     (nil))
(insn 130 129 131 4 (set (mem:SF (reg/f:DI 3 bx [orig:149 D.25606 ] [149]) [0 *_82+0 S4 A32])
        (reg:SF 21 xmm0 [orig:154 D.25607 ] [154])) ge2fitman_fmtext_o.cpp:846 129 {*movsf_internal}
     (nil))
(insn 131 130 139 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 countPoint+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_fmtext_o.cpp:830 217 {*addsi_1}
     (nil))
(jump_insn 139 131 140 4 (set (pc)
        (label_ref 132)) ge2fitman_fmtext_o.cpp:830 654 {jump}
     (nil)
 -> 132)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 140 139 142)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 142 140 141 6 73 "" [1 uses])
(note 141 142 143 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 143 141 137 6 (const_int 0 [0]) ge2fitman_fmtext_o.cpp:849 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 137 143 138 5 70 "" [0 uses])
(note 138 137 144 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 144 138 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1025, decl_uid=24683, cgraph_uid=230, symbol_order=257)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,10u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 195{168d,27u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) ge2fitman_fmtext_o.cpp:849 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) ge2fitman_fmtext_o.cpp:849 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_fmtext_o.cpp:849 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) ge2fitman_fmtext_o.cpp:849 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) ge2fitman_fmtext_o.cpp:849 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) ge2fitman_fmtext_o.cpp:849 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7f7c37525000 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x7f7c37894a20 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/iostream:74 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7f7c37583120 __dso_handle>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7f7c37525000 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7f7c37894bd0 __comp_dtor >)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 18 17 25 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7f7c37571510 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/iostream:74 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 18 23 6 76 "" [2 uses])
(note 23 25 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 21 6 (const_int 0 [0]) ge2fitman_fmtext_o.cpp:849 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 24 22 5 74 "" [0 uses])
(note 22 21 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 22 0 NOTE_INSN_DELETED)

;; Function (static initializers for ge2fitman_fmtext_o.cpp) (_GLOBAL__sub_I__Z9read_dataPiP10PreprocessP7IOFilesP16Data_file_headerP17Data_block_headerP10Precision2PP8_IO_FILEP12Procpar_infoP10Precision1PPfSI_iP13InFile_structb, funcdef_no=1026, decl_uid=24689, cgraph_uid=231, symbol_order=361)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for ge2fitman_fmtext_o.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{92d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) ge2fitman_fmtext_o.cpp:849 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) ge2fitman_fmtext_o.cpp:849 90 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x7f7c37571438 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) ge2fitman_fmtext_o.cpp:849 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
