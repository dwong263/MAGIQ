
;; Function void endianCheck_system(Endian_Check*, bool) (_Z18endianCheck_systemP12Endian_Checkb, funcdef_no=1021, decl_uid=24454, cgraph_uid=226, symbol_order=227)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

  BB 7
  BB 8
   Insn 43: point = 0
  BB 6
   Insn 32: point = 0
   Insn 31: point = 0
  BB 5
   Insn 29: point = 0
   Insn 28: point = 0
   Insn 27: point = 0
   Insn 26: point = 1
  BB 4
   Insn 37: point = 2
   Insn 21: point = 2
   Insn 20: point = 2
  BB 3
   Insn 18: point = 2
   Insn 17: point = 2
   Insn 16: point = 2
   Insn 15: point = 3
  BB 2
   Insn 13: point = 4
   Insn 12: point = 4
   Insn 11: point = 5
   Insn 10: point = 6
   Insn 9: point = 7
   Insn 8: point = 8
   Insn 4: point = 8
   Insn 3: point = 9
   Insn 2: point = 10
Compressing live ranges: from 10 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 3
changing reg in insn 15
changing reg in insn 16
changing reg in insn 26
changing reg in insn 27
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns


void endianCheck_system(Endian_Check*, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={8d,5u} r1={4d} r2={4d} r4={4d,1u} r5={6d,3u} r6={1d,14u} r7={1d,11u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={7d,4u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 283{244d,39u,0e} in 22{19 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])
        (reg:DI 5 di [ endian_check ])) ge2fitman_sup.cpp:20 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:SI 0 ax [89])
        (reg:SI 4 si [ verbose ])) ge2fitman_sup.cpp:20 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
        (reg:QI 0 ax [89])) ge2fitman_sup.cpp:20 93 {*movqi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 8 5 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Z11isBigEndianv") [flags 0x3]  <function_decl 0x7f043e262288 isBigEndian>) [0 isBigEndian S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:23 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 10 8 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 D.25494 ] [87])
            (const_int 0 [0]))) ge2fitman_sup.cpp:23 3 {*cmpsi_ccno_1}
     (nil))
(insn 11 10 12 2 (set (reg:QI 0 ax [orig:88 D.25495 ] [88])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_sup.cpp:23 607 {*setcc_qi}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 D.25495 ] [88])
            (const_int 0 [0]))) ge2fitman_sup.cpp:23 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 24)
            (pc))) ge2fitman_sup.cpp:23 612 {*jcc_1}
     (nil)
 -> 24)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:24 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (mem/j:SI (reg/f:DI 0 ax [90]) [0 endian_check_6(D)->systemStruct+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:24 90 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:25 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) ge2fitman_sup.cpp:25 612 {*jcc_1}
     (nil)
 -> 42)
;;  succ:       4 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f043df6d1b0 *.LC0>)) ge2fitman_sup.cpp:26 89 {*movdi_internal}
     (nil))
(call_insn 21 20 37 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:26 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 37 21 38 4 (set (pc)
        (label_ref:DI 42)) ge2fitman_sup.cpp:35 654 {jump}
     (nil)
 -> 42)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 38 37 24)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91
(code_label 24 38 25 5 2 "" [1 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:30 89 {*movdi_internal}
     (nil))
(insn 27 26 28 5 (set (mem/j:SI (reg/f:DI 0 ax [91]) [0 endian_check_6(D)->systemStruct+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:30 90 {*movsi_internal}
     (nil))
(insn 28 27 29 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:31 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 29 28 30 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 42)
            (pc))) ge2fitman_sup.cpp:31 612 {*jcc_1}
     (nil)
 -> 42)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 30 29 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f043df6d240 *.LC1>)) ge2fitman_sup.cpp:32 89 {*movdi_internal}
     (nil))
(call_insn 32 31 42 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:32 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 7, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;;              4 [100.0%] 
;;              6 [100.0%]  (FALLTHRU)
;;              5
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 42 32 41 8 4 "" [3 uses])
(note 41 42 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 43 41 35 8 (const_int 0 [0]) ge2fitman_sup.cpp:35 684 {nop}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 35 43 36 7 1 "" [0 uses])
(note 36 35 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 44 36 0 NOTE_INSN_DELETED)

;; Function int endianCheck_file(FILE*, Endian_Check*, bool*, char*, bool) (_Z16endianCheck_fileP8_IO_FILEP12Endian_CheckPbPcb, funcdef_no=1022, decl_uid=24460, cgraph_uid=227, symbol_order=228)

      Creating newreg=112
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=113
Removing SCRATCH in insn #155 (nop 3)
rescanning insn with uid = 155.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 7:  (0) m  (1) qn {*movqi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r112
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 35:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 36:  (0) v  (1) m {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) x  (1) xm {*cmpiusf_sse}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 85:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 90:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 100:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 105:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 108:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 126:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 131:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) ?mq {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 142:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r113
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28

********** Pseudo live ranges #1: **********

  BB 27
   Insn 157: point = 0
  BB 28
   Insn 160: point = 0
  BB 26
   Insn 156: point = 0
   Insn 155: point = 0
   Insn 154: point = 1
   Insn 150: point = 2
  BB 3
   Insn 167: point = 5
   Insn 30: point = 5
  BB 25
   Insn 145: point = 6
  BB 14
   Insn 172: point = 7
   Insn 90: point = 7
   Insn 89: point = 8
  BB 13
   Insn 86: point = 9
   Insn 85: point = 9
  BB 12
   Insn 83: point = 9
   Insn 82: point = 9
  BB 8
   Insn 170: point = 9
   Insn 61: point = 9
   Insn 60: point = 10
  BB 7
   Insn 57: point = 11
   Insn 56: point = 11
   Insn 55: point = 11
   Insn 54: point = 11
   Insn 53: point = 11
   Insn 52: point = 11
   Insn 51: point = 12
  BB 6
   Insn 49: point = 13
   Insn 48: point = 13
  BB 11
   Insn 79: point = 13
   Insn 78: point = 14
  BB 10
   Insn 75: point = 15
   Insn 74: point = 15
   Insn 73: point = 15
   Insn 72: point = 15
   Insn 71: point = 15
   Insn 70: point = 15
   Insn 69: point = 16
  BB 9
   Insn 67: point = 17
   Insn 66: point = 17
  BB 5
   Insn 46: point = 17
   Insn 45: point = 17
   Insn 44: point = 18
   Insn 43: point = 20
  BB 24
   Insn 142: point = 21
   Insn 141: point = 22
  BB 23
   Insn 138: point = 23
   Insn 137: point = 23
  BB 22
   Insn 135: point = 23
   Insn 134: point = 23
  BB 18
   Insn 174: point = 23
   Insn 113: point = 23
   Insn 112: point = 24
  BB 17
   Insn 109: point = 25
   Insn 108: point = 25
   Insn 107: point = 25
   Insn 106: point = 25
   Insn 105: point = 25
   Insn 104: point = 25
   Insn 103: point = 26
  BB 16
   Insn 101: point = 27
   Insn 100: point = 27
  BB 21
   Insn 131: point = 27
   Insn 130: point = 28
  BB 20
   Insn 127: point = 29
   Insn 126: point = 29
   Insn 125: point = 29
   Insn 124: point = 29
   Insn 123: point = 29
   Insn 122: point = 29
   Insn 121: point = 30
  BB 19
   Insn 119: point = 31
   Insn 118: point = 31
  BB 15
   Insn 98: point = 31
   Insn 97: point = 31
   Insn 96: point = 32
   Insn 95: point = 34
  BB 4
   Insn 38: point = 35
   Insn 37: point = 35
   Insn 36: point = 36
   Insn 35: point = 37
  BB 2
   Insn 28: point = 38
   Insn 27: point = 38
   Insn 26: point = 39
   Insn 25: point = 40
   Insn 24: point = 41
   Insn 23: point = 42
   Insn 22: point = 42
   Insn 21: point = 43
   Insn 20: point = 43
   Insn 19: point = 43
   Insn 18: point = 44
   Insn 17: point = 45
   Insn 16: point = 46
   Insn 15: point = 46
   Insn 14: point = 47
   Insn 13: point = 47
   Insn 12: point = 47
   Insn 9: point = 48
   Insn 7: point = 50
   Insn 6: point = 51
   Insn 5: point = 52
   Insn 4: point = 52
   Insn 3: point = 52
   Insn 2: point = 52
 r87: [3..6]
 r88: [40..41]
 r89: [38..39]
 r90: [35..37]
 r91: [17..18]
 r92: [31..32]
 r93: [1..2]
 r94: [50..51]
 r95: [46..47]
 r96: [43..45]
 r97: [42..44]
 r98: [35..36]
 r99: [19..20]
 r100: [11..12]
 r101: [9..10]
 r102: [15..16]
 r103: [13..14]
 r104: [7..8]
 r105: [33..34]
 r106: [25..26]
 r107: [23..24]
 r108: [29..30]
 r109: [27..28]
 r110: [21..22]
 r112: [48..49]
 r113: [0..0]
Compressing live ranges: from 52 to 47 - 90%
Ranges after the compression:
 r87: [3..4]
 r88: [37..38]
 r89: [35..36]
 r90: [33..34]
 r91: [15..16]
 r92: [29..30]
 r93: [1..2]
 r94: [45..46]
 r95: [41..42]
 r96: [39..40]
 r97: [39..40]
 r98: [33..34]
 r99: [17..18]
 r100: [9..10]
 r101: [7..8]
 r102: [13..14]
 r103: [11..12]
 r104: [5..6]
 r105: [31..32]
 r106: [23..24]
 r107: [21..22]
 r108: [27..28]
 r109: [25..26]
 r110: [19..20]
 r112: [43..44]
 r113: [0..0]

********** Assignment #1: **********

	 Assigning to 112 (cl=INDEX_REGS, orig=112, freq=1, tfirst=112, tfreq=1)...
	   Assign 0 to reload r112 (freq=1)
	 Assigning to 113 (cl=INDEX_REGS, orig=113, freq=1, tfirst=113, tfreq=1)...
	   Assign 2 to reload r113 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 145
changing reg in insn 30
changing reg in insn 150
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 35
changing reg in insn 37
changing reg in insn 44
changing reg in insn 45
changing reg in insn 96
changing reg in insn 97
changing reg in insn 150
changing reg in insn 154
changing reg in insn 6
changing reg in insn 12
changing reg in insn 15
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 22
changing reg in insn 36
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 51
changing reg in insn 52
changing reg in insn 60
changing reg in insn 61
changing reg in insn 69
changing reg in insn 70
changing reg in insn 78
changing reg in insn 79
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 96
changing reg in insn 103
changing reg in insn 104
changing reg in insn 112
changing reg in insn 113
changing reg in insn 121
changing reg in insn 122
changing reg in insn 130
changing reg in insn 131
changing reg in insn 141
changing reg in insn 142
changing reg in insn 9
changing reg in insn 155
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 125.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 157.


int endianCheck_file(FILE*, Endian_Check*, bool*, char*, bool)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 37[r8]
;;  ref usage 	r0={42d,28u} r1={17d,4u} r2={16d,2u} r4={20d,7u} r5={26d,13u} r6={1d,57u} r7={1d,41u} r8={13d} r9={13d} r10={13d} r11={13d} r12={13d} r13={13d} r14={13d} r15={13d} r17={27d,12u} r18={13d} r19={13d} r20={1d,1u} r21={15d,1u} r22={15d,1u} r23={14d} r24={14d} r25={14d} r26={14d} r27={14d} r28={14d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={13d} r37={14d,1u} r38={14d} r39={13d} r40={13d} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} r76={13d} r77={13d} r78={13d} r79={13d} r80={13d} 
;;    total ref usage 1189{1021d,168u,0e} in 104{91 regular + 13 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 94 95 96 97
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
        (reg:DI 5 di [ in_file ])) ge2fitman_sup.cpp:43 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])
        (reg:DI 4 si [ endian_check ])) ge2fitman_sup.cpp:43 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 swap_bytes+0 S8 A64])
        (reg:DI 1 dx [ swap_bytes ])) ge2fitman_sup.cpp:43 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])
        (reg:DI 2 cx [ filename ])) ge2fitman_sup.cpp:43 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 0 ax [94])
        (reg:SI 37 r8 [ verbose ])) ge2fitman_sup.cpp:43 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
        (reg:QI 0 ax [94])) ge2fitman_sup.cpp:43 93 {*movqi_internal}
     (nil))
(note 8 7 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 8 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.25502+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [112])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:43 986 {stack_tls_protect_set_di}
     (nil))
(insn 12 9 13 2 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) ge2fitman_sup.cpp:51 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 1 dx)
        (const_int 0 [0])) ge2fitman_sup.cpp:51 90 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (const_int 0 [0])) ge2fitman_sup.cpp:51 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) ge2fitman_sup.cpp:51 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fseek") [flags 0x41]  <function_decl 0x7f043f4ef798 fseek>) [0 fseek S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:51 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 17 16 18 2 (set (reg:DI 1 dx [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (parallel [
            (set (reg:DI 0 ax [97])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:52 218 {*adddi_1}
     (nil))
(insn 19 18 20 2 (set (reg:DI 2 cx)
        (reg:DI 1 dx [96])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 1 dx)
        (const_int 4 [0x4])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 4 si)
        (const_int 1 [0x1])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(call_insn 23 22 24 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fread") [flags 0x41]  <function_decl 0x7f043f4ef360 fread>) [0 fread S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:52 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 24 23 25 2 (set (reg:DI 0 ax [orig:88 D.25499 ] [88])
        (reg:DI 0 ax)) ge2fitman_sup.cpp:52 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:88 D.25499 ] [88])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:52 8 {*cmpdi_1}
     (nil))
(insn 26 25 27 2 (set (reg:QI 0 ax [orig:89 D.25500 ] [89])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_sup.cpp:52 607 {*setcc_qi}
     (nil))
(insn 27 26 28 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.25500 ] [89])
            (const_int 0 [0]))) ge2fitman_sup.cpp:52 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 28 27 29 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 33)
            (pc))) ge2fitman_sup.cpp:52 612 {*jcc_1}
     (nil)
 -> 33)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 29 28 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 167 3 (set (reg:SI 0 ax [orig:87 D.25498 ] [87])
        (const_int -1 [0xffffffffffffffff])) ge2fitman_sup.cpp:53 90 {*movsi_internal}
     (nil))
(jump_insn 167 30 168 3 (set (pc)
        (label_ref 148)) ge2fitman_sup.cpp:53 654 {jump}
     (nil)
 -> 148)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 168 167 33)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 98
(code_label 33 168 34 4 6 "" [1 uses])
(note 34 33 35 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 4 (set (reg:SF 22 xmm1 [orig:90 D.25501 ] [90])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 revision_num+0 S4 A32])) ge2fitman_sup.cpp:56 129 {*movsf_internal}
     (nil))
(insn 36 35 37 4 (set (reg:SF 21 xmm0 [98])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:56 129 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 37 36 38 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [98])
            (reg:SF 22 xmm1 [orig:90 D.25501 ] [90]))) ge2fitman_sup.cpp:56 55 {*cmpiusf_sse}
     (nil))
(jump_insn 38 37 42 4 (set (pc)
        (if_then_else (unle (reg:CCFPU 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 169)
            (pc))) ge2fitman_sup.cpp:56 612 {*jcc_1}
     (nil)
 -> 169)
;;  succ:       5 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 99
(note 42 38 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 5 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:57 89 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:SI 0 ax [orig:91 D.25498 ] [91])
        (mem/j:SI (reg/f:DI 0 ax [99]) [0 endian_check_22(D)->systemStruct+0 S4 A32])) ge2fitman_sup.cpp:57 90 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:91 D.25498 ] [91])
            (const_int 0 [0]))) ge2fitman_sup.cpp:57 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 46 45 47 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) ge2fitman_sup.cpp:57 612 {*jcc_1}
     (nil)
 -> 64)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:58 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 49 48 50 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) ge2fitman_sup.cpp:58 612 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 100
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 7 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])) ge2fitman_sup.cpp:59 89 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (reg:DI 4 si)
        (reg:DI 0 ax [100])) ge2fitman_sup.cpp:59 89 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f043df6de10 *.LC3>)) ge2fitman_sup.cpp:59 89 {*movdi_internal}
     (nil))
(insn 54 53 55 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:59 93 {*movqi_internal}
     (nil))
(call_insn 55 54 56 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:59 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 56 55 57 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f043df6dea0 *.LC4>)) ge2fitman_sup.cpp:60 89 {*movdi_internal}
     (nil))
(call_insn 57 56 58 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:60 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 101
(code_label 58 57 59 8 11 "" [1 uses])
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 8 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:62 89 {*movdi_internal}
     (nil))
(insn 61 60 170 8 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 4 [0x4])) [0 endian_check_22(D)->fileStruct+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:62 90 {*movsi_internal}
     (nil))
(jump_insn 170 61 171 8 (set (pc)
        (label_ref 80)) 654 {jump}
     (nil)
 -> 80)
;;  succ:       12 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 171 170 64)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 64 171 65 9 10 "" [1 uses])
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:64 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 67 66 68 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) ge2fitman_sup.cpp:64 612 {*jcc_1}
     (nil)
 -> 76)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102
(note 68 67 69 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 10 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])) ge2fitman_sup.cpp:65 89 {*movdi_internal}
     (nil))
(insn 70 69 71 10 (set (reg:DI 4 si)
        (reg:DI 0 ax [102])) ge2fitman_sup.cpp:65 89 {*movdi_internal}
     (nil))
(insn 71 70 72 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f043df6de10 *.LC3>)) ge2fitman_sup.cpp:65 89 {*movdi_internal}
     (nil))
(insn 72 71 73 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:65 93 {*movqi_internal}
     (nil))
(call_insn 73 72 74 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:65 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 74 73 75 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f043df6df30 *.LC5>)) ge2fitman_sup.cpp:66 89 {*movdi_internal}
     (nil))
(call_insn 75 74 76 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:66 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 103
(code_label 76 75 77 11 13 "" [1 uses])
(note 77 76 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 11 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:68 89 {*movdi_internal}
     (nil))
(insn 79 78 80 11 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 4 [0x4])) [0 endian_check_22(D)->fileStruct+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:68 90 {*movsi_internal}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;;              8 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 80 79 81 12 12 "" [1 uses])
(note 81 80 82 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:70 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 83 82 84 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) ge2fitman_sup.cpp:70 612 {*jcc_1}
     (nil)
 -> 87)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 84 83 85 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f043df7c000 *.LC6>)) ge2fitman_sup.cpp:71 89 {*movdi_internal}
     (nil))
(call_insn 86 85 87 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:71 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 104
(code_label 87 86 88 14 14 "" [1 uses])
(note 88 87 89 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 14 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 swap_bytes+0 S8 A64])) ge2fitman_sup.cpp:73 89 {*movdi_internal}
     (nil))
(insn 90 89 172 14 (set (mem:QI (reg/f:DI 0 ax [104]) [0 *swap_bytes_33(D)+0 S1 A8])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:73 93 {*movqi_internal}
     (nil))
(jump_insn 172 90 173 14 (set (pc)
        (label_ref 143)) 654 {jump}
     (nil)
 -> 143)
;;  succ:       25 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 173 172 169)
;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 105
(code_label 169 173 94 15 24 "" [1 uses])
(note 94 169 95 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 15 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:75 89 {*movdi_internal}
     (nil))
(insn 96 95 97 15 (set (reg:SI 0 ax [orig:92 D.25498 ] [92])
        (mem/j:SI (reg/f:DI 0 ax [105]) [0 endian_check_22(D)->systemStruct+0 S4 A32])) ge2fitman_sup.cpp:75 90 {*movsi_internal}
     (nil))
(insn 97 96 98 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.25498 ] [92])
            (const_int 0 [0]))) ge2fitman_sup.cpp:75 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 98 97 99 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) ge2fitman_sup.cpp:75 612 {*jcc_1}
     (nil)
 -> 116)
;;  succ:       16 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 99 98 100 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:76 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 101 100 102 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 110)
            (pc))) ge2fitman_sup.cpp:76 612 {*jcc_1}
     (nil)
 -> 110)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 106
(note 102 101 103 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 17 (set (reg:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])) ge2fitman_sup.cpp:77 89 {*movdi_internal}
     (nil))
(insn 104 103 105 17 (set (reg:DI 4 si)
        (reg:DI 0 ax [106])) ge2fitman_sup.cpp:77 89 {*movdi_internal}
     (nil))
(insn 105 104 106 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f043df6de10 *.LC3>)) ge2fitman_sup.cpp:77 89 {*movdi_internal}
     (nil))
(insn 106 105 107 17 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:77 93 {*movqi_internal}
     (nil))
(call_insn 107 106 108 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:77 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 108 107 109 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f043df6df30 *.LC5>)) ge2fitman_sup.cpp:78 89 {*movdi_internal}
     (nil))
(call_insn 109 108 110 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:78 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 107
(code_label 110 109 111 18 17 "" [1 uses])
(note 111 110 112 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 112 111 113 18 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:80 89 {*movdi_internal}
     (nil))
(insn 113 112 174 18 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 4 [0x4])) [0 endian_check_22(D)->fileStruct+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:80 90 {*movsi_internal}
     (nil))
(jump_insn 174 113 175 18 (set (pc)
        (label_ref 132)) 654 {jump}
     (nil)
 -> 132)
;;  succ:       22 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 175 174 116)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 116 175 117 19 16 "" [1 uses])
(note 117 116 118 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:82 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 119 118 120 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) ge2fitman_sup.cpp:82 612 {*jcc_1}
     (nil)
 -> 128)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 108
(note 120 119 121 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 20 (set (reg:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 filename+0 S8 A64])) ge2fitman_sup.cpp:83 89 {*movdi_internal}
     (nil))
(insn 122 121 123 20 (set (reg:DI 4 si)
        (reg:DI 0 ax [108])) ge2fitman_sup.cpp:83 89 {*movdi_internal}
     (nil))
(insn 123 122 124 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f043df6de10 *.LC3>)) ge2fitman_sup.cpp:83 89 {*movdi_internal}
     (nil))
(insn 124 123 125 20 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:83 93 {*movqi_internal}
     (nil))
(call_insn 125 124 126 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:83 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 126 125 127 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f043df6dea0 *.LC4>)) ge2fitman_sup.cpp:84 89 {*movdi_internal}
     (nil))
(call_insn 127 126 128 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:84 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 109
(code_label 128 127 129 21 19 "" [1 uses])
(note 129 128 130 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 21 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 endian_check+0 S8 A64])) ge2fitman_sup.cpp:86 89 {*movdi_internal}
     (nil))
(insn 131 130 132 21 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [109])
                (const_int 4 [0x4])) [0 endian_check_22(D)->fileStruct+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:86 90 {*movsi_internal}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              18 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 132 131 133 22 18 "" [1 uses])
(note 133 132 134 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])) [0 verbose+0 S1 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:88 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 135 134 136 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) ge2fitman_sup.cpp:88 612 {*jcc_1}
     (nil)
 -> 139)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 136 135 137 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 138 23 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f043df7c090 *.LC7>)) ge2fitman_sup.cpp:89 89 {*movdi_internal}
     (nil))
(call_insn 138 137 139 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:89 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 110
(code_label 139 138 140 24 20 "" [1 uses])
(note 140 139 141 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 24 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 swap_bytes+0 S8 A64])) ge2fitman_sup.cpp:91 89 {*movdi_internal}
     (nil))
(insn 142 141 143 24 (set (mem:QI (reg/f:DI 0 ax [110]) [0 *swap_bytes_33(D)+0 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:91 93 {*movqi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;;              14 [100.0%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 143 142 144 25 15 "" [1 uses])
(note 144 143 145 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 148 25 (set (reg:SI 0 ax [orig:87 D.25498 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:94 90 {*movsi_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              3 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 93
(code_label 148 145 149 26 21 "" [1 uses])
(note 149 148 150 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 154 26 (set (reg:SI 0 ax [orig:93 <retval> ] [93])
        (reg:SI 0 ax [orig:87 D.25498 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 154 150 155 26 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:93 <retval> ] [93])) ge2fitman_sup.cpp:95 90 {*movsi_internal}
     (nil))
(insn 155 154 156 26 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.25502+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [113]))
        ]) ge2fitman_sup.cpp:95 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 156 155 164 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 159)
            (pc))) ge2fitman_sup.cpp:95 612 {*jcc_1}
     (nil)
 -> 159)
;;  succ:       28
;;              27 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 164 156 157 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(call_insn 157 164 158 27 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f043e2c21b0 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:95 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 158 157 159)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 159 158 165 28 22 "" [1 uses])
(note 165 159 160 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 160 165 176 28 (use (reg/i:SI 0 ax)) ge2fitman_sup.cpp:95 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 176 160 0 NOTE_INSN_DELETED)

;; Function int isBigEndian() (_Z11isBigEndianv, funcdef_no=1023, decl_uid=24451, cgraph_uid=228, symbol_order=229)

      Creating newreg=92
Removing SCRATCH in insn #3 (nop 2)
rescanning insn with uid = 3.
      Creating newreg=93
Removing SCRATCH in insn #27 (nop 3)
rescanning insn with uid = 27.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r92
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) m  (1) rn {*movhi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 7:  (0) r  (1) r  (2) le {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r93
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 6
   Insn 29: point = 0
  BB 7
   Insn 32: point = 0
  BB 5
   Insn 28: point = 0
   Insn 27: point = 0
   Insn 26: point = 1
   Insn 22: point = 2
  BB 3
   Insn 36: point = 5
   Insn 12: point = 5
  BB 4
   Insn 17: point = 6
  BB 2
   Insn 10: point = 7
   Insn 9: point = 7
   Insn 8: point = 8
   Insn 7: point = 10
   Insn 6: point = 11
   Insn 3: point = 11
 r87: [3..6]
 r88: [9..10]
 r89: [7..8]
 r90: [1..2]
 r92: [11..12]
 r93: [0..0]
Compressing live ranges: from 13 to 11 - 84%
Ranges after the compression:
 r87: [3..4]
 r88: [7..8]
 r89: [5..6]
 r90: [1..2]
 r92: [9..10]
 r93: [0..0]

********** Assignment #1: **********

	 Assigning to 92 (cl=INDEX_REGS, orig=92, freq=1, tfirst=92, tfreq=1)...
	   Assign 0 to reload r92 (freq=1)
	 Assigning to 93 (cl=INDEX_REGS, orig=93, freq=1, tfirst=93, tfreq=1)...
	   Assign 1 to reload r93 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 12
changing reg in insn 22
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 22
changing reg in insn 26
changing reg in insn 3
changing reg in insn 27
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 29.


int isBigEndian()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={9d,6u} r1={3d} r2={2d} r4={2d} r5={2d} r6={1d,11u} r7={1d,8u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d,2u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 130{102d,28u,0e} in 15{14 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.25513+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [92])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:102 986 {stack_tls_protect_set_di}
     (nil))
(insn 6 3 7 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [0 word+0 S2 A16])
        (const_int 17185 [0x4321])) ge2fitman_sup.cpp:103 92 {*movhi_internal}
     (nil))
(insn 7 6 8 2 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.25511 ] [88])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -10 [0xfffffffffffffff6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:104 218 {*adddi_1}
     (nil))
(insn 8 7 9 2 (set (reg:QI 0 ax [orig:89 D.25512 ] [89])
        (mem:QI (reg/f:DI 0 ax [orig:88 D.25511 ] [88]) [0 MEM[(char *)_4]+0 S1 A8])) ge2fitman_sup.cpp:104 93 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.25512 ] [89])
            (const_int 33 [0x21]))) ge2fitman_sup.cpp:104 5 {*cmpqi_1}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) ge2fitman_sup.cpp:104 612 {*jcc_1}
     (nil)
 -> 15)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 36 3 (set (reg:SI 0 ax [orig:87 D.25510 ] [87])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:105 90 {*movsi_internal}
     (nil))
(jump_insn 36 12 37 3 (set (pc)
        (label_ref 20)) ge2fitman_sup.cpp:105 654 {jump}
     (nil)
 -> 20)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 37 36 15)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 15 37 16 4 26 "" [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 20 4 (set (reg:SI 0 ax [orig:87 D.25510 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:107 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 17 [flags] 90
(code_label 20 17 21 5 28 "" [1 uses])
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 26 5 (set (reg:SI 0 ax [orig:90 <retval> ] [90])
        (reg:SI 0 ax [orig:87 D.25510 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 26 22 27 5 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:90 <retval> ] [90])) ge2fitman_sup.cpp:109 90 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.25513+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 1 dx [93]))
        ]) ge2fitman_sup.cpp:109 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 28 27 34 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) ge2fitman_sup.cpp:109 612 {*jcc_1}
     (nil)
 -> 31)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 34 28 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 29 34 30 6 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f043e2c21b0 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:109 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 30 29 31)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 31 30 35 7 29 "" [1 uses])
(note 35 31 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 35 38 7 (use (reg/i:SI 0 ax)) ge2fitman_sup.cpp:109 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 38 32 0 NOTE_INSN_DELETED)

;; Function bool isNumber(char*) (_Z8isNumberPc, funcdef_no=1024, decl_uid=24450, cgraph_uid=229, symbol_order=230)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 13
	 Choosing alt 0 in insn 13:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 21
	 Choosing alt 0 in insn 21:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 29
	 Choosing alt 0 in insn 29:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) ?mr {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) q  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 57:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 80:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) q  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19

********** Pseudo live ranges #1: **********

  BB 19
   Insn 102: point = 0
   Insn 101: point = 0
   Insn 97: point = 1
  BB 17
   Insn 114: point = 4
   Insn 89: point = 4
  BB 16
   Insn 112: point = 5
   Insn 84: point = 5
  BB 15
   Insn 82: point = 6
   Insn 81: point = 6
   Insn 80: point = 7
   Insn 79: point = 9
  BB 14
   Insn 77: point = 10
   Insn 76: point = 10
  BB 13
   Insn 110: point = 10
   Insn 71: point = 10
  BB 12
   Insn 69: point = 11
   Insn 68: point = 11
   Insn 67: point = 12
   Insn 66: point = 14
  BB 11
   Insn 64: point = 15
   Insn 63: point = 15
  BB 9
   Insn 106: point = 15
   Insn 52: point = 15
  BB 7
   Insn 104: point = 16
   Insn 37: point = 16
  BB 6
   Insn 35: point = 17
   Insn 34: point = 17
  BB 5
   Insn 32: point = 17
   Insn 31: point = 17
   Insn 30: point = 18
   Insn 29: point = 20
   Insn 28: point = 22
   Insn 27: point = 23
   Insn 26: point = 25
  BB 4
   Insn 24: point = 26
   Insn 23: point = 26
   Insn 22: point = 27
   Insn 21: point = 29
   Insn 20: point = 31
   Insn 19: point = 32
   Insn 18: point = 34
  BB 3
   Insn 16: point = 35
   Insn 15: point = 35
   Insn 14: point = 36
   Insn 13: point = 38
   Insn 12: point = 40
   Insn 11: point = 41
   Insn 10: point = 43
  BB 10
   Insn 108: point = 44
   Insn 57: point = 44
  BB 8
   Insn 50: point = 44
   Insn 49: point = 44
   Insn 48: point = 45
   Insn 47: point = 47
   Insn 46: point = 49
   Insn 45: point = 51
   Insn 44: point = 53
   Insn 43: point = 54
   Insn 42: point = 56
  BB 18
   Insn 94: point = 57
  BB 2
   Insn 8: point = 58
   Insn 7: point = 58
   Insn 6: point = 58
   Insn 2: point = 58
 r87: [57..57] [15..16] [10..10] [2..5]
 r88: [39..41]
 r89: [37..38]
 r90: [35..36]
 r91: [30..32]
 r92: [28..29]
 r93: [26..27]
 r94: [21..23]
 r95: [19..20]
 r96: [17..18]
 r97: [52..54]
 r98: [50..51]
 r99: [48..49]
 r100: [46..47]
 r101: [44..45]
 r102: [11..12]
 r103: [6..7]
 r104: [0..1]
 r105: [42..43]
 r106: [39..40]
 r107: [33..34]
 r108: [30..31]
 r109: [24..25]
 r110: [21..22]
 r111: [55..56]
 r112: [52..53]
 r113: [13..14]
 r114: [8..9]
Compressing live ranges: from 58 to 52 - 89%
Ranges after the compression:
 r87: [51..51] [13..14] [8..8] [2..3]
 r88: [35..36]
 r89: [33..34]
 r90: [31..32]
 r91: [27..28]
 r92: [25..26]
 r93: [23..24]
 r94: [19..20]
 r95: [17..18]
 r96: [15..16]
 r97: [47..48]
 r98: [45..46]
 r99: [43..44]
 r100: [41..42]
 r101: [39..40]
 r102: [9..10]
 r103: [4..5]
 r104: [0..1]
 r105: [37..38]
 r106: [35..36]
 r107: [29..30]
 r108: [27..28]
 r109: [21..22]
 r110: [19..20]
 r111: [49..50]
 r112: [47..48]
 r113: [11..12]
 r114: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 94
changing reg in insn 89
changing reg in insn 84
changing reg in insn 71
changing reg in insn 52
changing reg in insn 37
changing reg in insn 97
changing reg in insn 11
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 43
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 67
changing reg in insn 68
changing reg in insn 80
changing reg in insn 81
changing reg in insn 97
changing reg in insn 101
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 66
changing reg in insn 67
changing reg in insn 79
changing reg in insn 80
starting the processing of deferred insns
ending the processing of deferred insns


bool isNumber(char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={31d,26u} r1={5d,4u,4e} r2={1d} r4={1d} r5={1d,1u} r6={1d,37u} r7={1d,19u} r17={16d,10u} r20={1d,1u,4e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 174{68d,98u,8e} in 64{64 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
        (reg:DI 5 di [ string ])) ge2fitman_sup.cpp:137 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:138 90 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:140 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 58 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) ge2fitman_sup.cpp:140 612 {*jcc_1}
     (nil)
 -> 92)
;;  succ:       3 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              10 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 105 106
(code_label 58 8 9 3 36 "" [1 uses])
(note 9 58 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:141 90 {*movsi_internal}
     (nil))
(insn 11 10 12 3 (set (reg:DI 1 dx [orig:88 D.25515 ] [88])
        (sign_extend:DI (reg:SI 0 ax [105]))) ge2fitman_sup.cpp:141 142 {*extendsidi2_rex64}
     (nil))
(insn 12 11 13 3 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:141 89 {*movdi_internal}
     (nil))
(insn 13 12 14 3 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.25516 ] [89])
                (plus:DI (reg/f:DI 0 ax [106])
                    (reg:DI 1 dx [orig:88 D.25515 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:141 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.25515 ] [88]))
        (nil)))
(insn 14 13 15 3 (set (reg:QI 0 ax [orig:90 D.25517 ] [90])
        (mem:QI (reg/f:DI 0 ax [orig:89 D.25516 ] [89]) [0 *_6+0 S1 A8])) ge2fitman_sup.cpp:141 93 {*movqi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:90 D.25517 ] [90])
            (const_int 0 [0]))) ge2fitman_sup.cpp:141 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) ge2fitman_sup.cpp:141 612 {*jcc_1}
     (nil)
 -> 61)
;;  succ:       11
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 107 108
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 ax [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:142 90 {*movsi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:DI 1 dx [orig:91 D.25515 ] [91])
        (sign_extend:DI (reg:SI 0 ax [107]))) ge2fitman_sup.cpp:142 142 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:142 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.25516 ] [92])
                (plus:DI (reg/f:DI 0 ax [108])
                    (reg:DI 1 dx [orig:91 D.25515 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:142 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.25515 ] [91]))
        (nil)))
(insn 22 21 23 4 (set (reg:QI 0 ax [orig:93 D.25517 ] [93])
        (mem:QI (reg/f:DI 0 ax [orig:92 D.25516 ] [92]) [0 *_10+0 S1 A8])) ge2fitman_sup.cpp:142 93 {*movqi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 D.25517 ] [93])
            (const_int 46 [0x2e]))) ge2fitman_sup.cpp:142 5 {*cmpqi_1}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) ge2fitman_sup.cpp:142 612 {*jcc_1}
     (nil)
 -> 55)
;;  succ:       10
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 109 110
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 0 ax [109])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:144 90 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:DI 1 dx [orig:94 D.25515 ] [94])
        (sign_extend:DI (reg:SI 0 ax [109]))) ge2fitman_sup.cpp:144 142 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 5 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:144 89 {*movdi_internal}
     (nil))
(insn 29 28 30 5 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.25516 ] [95])
                (plus:DI (reg/f:DI 0 ax [110])
                    (reg:DI 1 dx [orig:94 D.25515 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:144 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.25515 ] [94]))
        (nil)))
(insn 30 29 31 5 (set (reg:QI 0 ax [orig:96 D.25517 ] [96])
        (mem:QI (reg/f:DI 0 ax [orig:95 D.25516 ] [95]) [0 *_14+0 S1 A8])) ge2fitman_sup.cpp:144 93 {*movqi_internal}
     (nil))
(insn 31 30 32 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:96 D.25517 ] [96])
            (const_int 45 [0x2d]))) ge2fitman_sup.cpp:144 5 {*cmpqi_1}
     (nil))
(jump_insn 32 31 33 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) ge2fitman_sup.cpp:144 612 {*jcc_1}
     (nil)
 -> 40)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:145 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 35 34 36 6 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) ge2fitman_sup.cpp:145 612 {*jcc_1}
     (nil)
 -> 55)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 104 7 (set (reg:QI 0 ax [orig:87 D.25514 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:146 93 {*movqi_internal}
     (nil))
(jump_insn 104 37 105 7 (set (pc)
        (label_ref 95)) ge2fitman_sup.cpp:146 654 {jump}
     (nil)
 -> 95)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 105 104 40)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 100 101 111 112
(code_label 40 105 41 8 34 "" [1 uses])
(note 41 40 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 8 (set (reg:SI 0 ax [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:148 90 {*movsi_internal}
     (nil))
(insn 43 42 44 8 (set (reg:DI 1 dx [orig:97 D.25515 ] [97])
        (sign_extend:DI (reg:SI 0 ax [111]))) ge2fitman_sup.cpp:148 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 8 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:148 89 {*movdi_internal}
     (nil))
(insn 45 44 46 8 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.25516 ] [98])
                (plus:DI (reg/f:DI 0 ax [112])
                    (reg:DI 1 dx [orig:97 D.25515 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:148 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.25515 ] [97]))
        (nil)))
(insn 46 45 47 8 (set (reg:QI 0 ax [orig:99 D.25517 ] [99])
        (mem:QI (reg/f:DI 0 ax [orig:98 D.25516 ] [98]) [0 *_17+0 S1 A8])) ge2fitman_sup.cpp:148 93 {*movqi_internal}
     (nil))
(insn 47 46 48 8 (set (reg:SI 0 ax [orig:100 D.25518 ] [100])
        (sign_extend:SI (reg:QI 0 ax [orig:99 D.25517 ] [99]))) ge2fitman_sup.cpp:148 148 {extendqisi2}
     (nil))
(insn 48 47 49 8 (parallel [
            (set (reg:SI 0 ax [orig:101 D.25518 ] [101])
                (plus:SI (reg:SI 0 ax [orig:100 D.25518 ] [100])
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:148 217 {*addsi_1}
     (nil))
(insn 49 48 50 8 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:101 D.25518 ] [101])
            (const_int 9 [0x9]))) ge2fitman_sup.cpp:148 7 {*cmpsi_1}
     (nil))
(jump_insn 50 49 51 8 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) ge2fitman_sup.cpp:148 612 {*jcc_1}
     (nil)
 -> 55)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 51 50 52 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 106 9 (set (reg:QI 0 ax [orig:87 D.25514 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:149 93 {*movqi_internal}
     (nil))
(jump_insn 106 52 107 9 (set (pc)
        (label_ref 95)) ge2fitman_sup.cpp:149 654 {jump}
     (nil)
 -> 95)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 107 106 55)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              6
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 55 107 56 10 33 "" [3 uses])
(note 56 55 57 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 108 10 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:151 217 {*addsi_1}
     (nil))
(jump_insn 108 57 109 10 (set (pc)
        (label_ref 58)) ge2fitman_sup.cpp:141 654 {jump}
     (nil)
 -> 58)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 109 108 61)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 61 109 62 11 32 "" [1 uses])
(note 62 61 63 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:153 7 {*cmpsi_1}
     (nil))
(jump_insn 64 63 65 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) ge2fitman_sup.cpp:153 612 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 113
(note 65 64 66 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 12 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:153 89 {*movdi_internal}
     (nil))
(insn 67 66 68 12 (set (reg:QI 0 ax [orig:102 D.25517 ] [102])
        (mem:QI (reg/f:DI 0 ax [113]) [0 *string_4(D)+0 S1 A8])) ge2fitman_sup.cpp:153 93 {*movqi_internal}
     (nil))
(insn 68 67 69 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:102 D.25517 ] [102])
            (const_int 45 [0x2d]))) ge2fitman_sup.cpp:153 5 {*cmpqi_1}
     (nil))
(jump_insn 69 68 70 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) ge2fitman_sup.cpp:153 612 {*jcc_1}
     (nil)
 -> 74)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 70 69 71 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 110 13 (set (reg:QI 0 ax [orig:87 D.25514 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:154 93 {*movqi_internal}
     (nil))
(jump_insn 110 71 111 13 (set (pc)
        (label_ref 95)) ge2fitman_sup.cpp:154 654 {jump}
     (nil)
 -> 95)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 111 110 74)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 74 111 75 14 37 "" [2 uses])
(note 75 74 76 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:155 7 {*cmpsi_1}
     (nil))
(jump_insn 77 76 78 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) ge2fitman_sup.cpp:155 612 {*jcc_1}
     (nil)
 -> 87)
;;  succ:       15 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 114
(note 78 77 79 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 15 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 string+0 S8 A64])) ge2fitman_sup.cpp:155 89 {*movdi_internal}
     (nil))
(insn 80 79 81 15 (set (reg:QI 0 ax [orig:103 D.25517 ] [103])
        (mem:QI (reg/f:DI 0 ax [114]) [0 *string_4(D)+0 S1 A8])) ge2fitman_sup.cpp:155 93 {*movqi_internal}
     (nil))
(insn 81 80 82 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:103 D.25517 ] [103])
            (const_int 46 [0x2e]))) ge2fitman_sup.cpp:155 5 {*cmpqi_1}
     (nil))
(jump_insn 82 81 83 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 87)
            (pc))) ge2fitman_sup.cpp:155 612 {*jcc_1}
     (nil)
 -> 87)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 83 82 84 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 112 16 (set (reg:QI 0 ax [orig:87 D.25514 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:156 93 {*movqi_internal}
     (nil))
(jump_insn 112 84 113 16 (set (pc)
        (label_ref 95)) ge2fitman_sup.cpp:156 654 {jump}
     (nil)
 -> 95)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 113 112 87)
;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 87 113 88 17 38 "" [2 uses])
(note 88 87 89 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 114 17 (set (reg:QI 0 ax [orig:87 D.25514 ] [87])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:158 93 {*movqi_internal}
     (nil))
(jump_insn 114 89 115 17 (set (pc)
        (label_ref 95)) ge2fitman_sup.cpp:158 654 {jump}
     (nil)
 -> 95)
;;  succ:       19 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 115 114 92)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 92 115 93 18 31 "" [1 uses])
(note 93 92 94 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 18 (set (reg:QI 0 ax [orig:87 D.25514 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:161 93 {*movqi_internal}
     (nil))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;;              7 [100.0%] 
;;              9 [100.0%] 
;;              13 [100.0%] 
;;              16 [100.0%] 
;;              17 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 104
(code_label 95 94 96 19 35 "" [5 uses])
(note 96 95 97 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 101 19 (set (reg:QI 0 ax [orig:104 <retval> ] [104])
        (reg:QI 0 ax [orig:87 D.25514 ] [87])) 93 {*movqi_internal}
     (nil))
(insn 101 97 102 19 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:104 <retval> ] [104])) ge2fitman_sup.cpp:164 93 {*movqi_internal}
     (nil))
(insn 102 101 116 19 (use (reg/i:QI 0 ax)) ge2fitman_sup.cpp:164 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 116 102 0 NOTE_INSN_DELETED)

;; Function void swapBytes(char*, int) (_Z9swapBytesPci, funcdef_no=1025, decl_uid=24463, cgraph_uid=230, symbol_order=231)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 10:  (0) =rm  (1) 0  (2) cI {*lshrsi3_1}
      Creating newreg=115 from oldreg=102, assigning class GENERAL_REGS to r115
   10: {r115:SI=r115:SI 0>>0x1f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
   57: r115:SI=r101:SI
    Inserting insn reload after:
   58: r102:SI=r115:SI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 11
	 Choosing alt 0 in insn 11:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =rm  (1) 0  (2) cI {*ashrsi3_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 32
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 34:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) 0  (2) rm {*subsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 38:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 42:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 43:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 55: point = 0
  BB 3
   Insn 15: point = 0
   Insn 14: point = 0
   Insn 13: point = 1
   Insn 12: point = 3
   Insn 11: point = 5
   Insn 58: point = 7
	Hard reg 1 is preferable by r115 with profit 1
   Insn 10: point = 9
   Insn 57: point = 9
   Insn 9: point = 10
  BB 4
   Insn 51: point = 11
   Insn 43: point = 11
   Insn 42: point = 11
   Insn 41: point = 12
   Insn 40: point = 13
   Insn 39: point = 15
   Insn 38: point = 16
   Insn 37: point = 18
   Insn 36: point = 20
   Insn 35: point = 22
   Insn 34: point = 23
   Insn 33: point = 24
   Insn 32: point = 26
   Insn 31: point = 28
   Insn 30: point = 29
   Insn 29: point = 31
   Insn 28: point = 33
   Insn 27: point = 35
   Insn 26: point = 36
   Insn 25: point = 38
   Insn 24: point = 39
   Insn 23: point = 41
   Insn 22: point = 42
   Insn 21: point = 43
   Insn 20: point = 45
   Insn 19: point = 47
   Insn 18: point = 48
   Insn 17: point = 50
  BB 2
   Insn 7: point = 51
   Insn 3: point = 51
   Insn 2: point = 51
 r87: [0..1]
 r88: [46..48]
 r89: [44..45]
 r90: [37..39]
 r91: [23..36]
 r92: [32..33]
 r93: [30..31]
 r94: [27..29]
 r95: [25..26]
 r96: [23..24]
 r97: [19..20]
 r98: [17..18]
 r99: [14..16]
 r100: [11..13]
 r101: [6..10]
 r102: [6..7]
 r103: [4..5]
 r104: [2..3]
 r105: [49..50]
 r106: [46..47]
 r107: [42..43]
 r108: [40..41]
 r109: [37..38]
 r110: [34..35]
 r111: [27..28]
 r112: [21..22]
 r113: [14..15]
 r114: [11..12]
 r115: [8..9]
Compressing live ranges: from 51 to 44 - 86%
Ranges after the compression:
 r87: [0..1]
 r88: [40..41]
 r89: [38..39]
 r90: [32..33]
 r91: [20..31]
 r92: [28..29]
 r93: [26..27]
 r94: [24..25]
 r95: [22..23]
 r96: [20..21]
 r97: [16..17]
 r98: [14..15]
 r99: [12..13]
 r100: [10..11]
 r101: [6..9]
 r102: [6..7]
 r103: [4..5]
 r104: [2..3]
 r105: [42..43]
 r106: [40..41]
 r107: [36..37]
 r108: [34..35]
 r109: [32..33]
 r110: [30..31]
 r111: [24..25]
 r112: [18..19]
 r113: [12..13]
 r114: [10..11]
 r115: [8..9]

********** Assignment #1: **********

	 Assigning to 115 (cl=GENERAL_REGS, orig=102, freq=3, tfirst=115, tfreq=3)...
	   Assign 1 to reload r115 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 26
changing reg in insn 34
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
deleting insn with uid = 58.
deleting insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns


void swapBytes(char*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags]
;;  ref usage 	r0={21d,21u} r1={8d,7u,3e} r2={2d,1u,1e} r4={1d,1u} r5={1d,1u} r6={1d,25u} r7={1d,6u} r17={13d,1u} r20={1d,1u,8e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 135{59d,64u,12e} in 39{39 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
        (reg:DI 5 di [ theVarChar ])) ge2fitman_sup.cpp:169 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
        (reg:SI 4 si [ size ])) ge2fitman_sup.cpp:169 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 44 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:180 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 101 102 103 104
(code_label 44 7 8 3 41 "" [1 uses])
(note 8 44 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 57 3 (set (reg:SI 0 ax [101])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) ge2fitman_sup.cpp:180 90 {*movsi_internal}
     (nil))
(insn 57 9 10 3 (set (reg:SI 1 dx [102])
        (reg:SI 0 ax [101])) ge2fitman_sup.cpp:180 90 {*movsi_internal}
     (nil))
(insn 10 57 11 3 (parallel [
            (set (reg:SI 1 dx [102])
                (lshiftrt:SI (reg:SI 1 dx [102])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:180 544 {*lshrsi3_1}
     (nil))
(insn 11 10 12 3 (parallel [
            (set (reg:SI 0 ax [103])
                (plus:SI (reg:SI 0 ax [101])
                    (reg:SI 1 dx [102])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:180 217 {*addsi_1}
     (nil))
(insn 12 11 14 3 (parallel [
            (set (reg:SI 0 ax [104])
                (ashiftrt:SI (reg:SI 0 ax [103])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:180 545 {*ashrsi3_1}
     (nil))
(insn 14 12 15 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 D.25519 ] [87])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))) ge2fitman_sup.cpp:180 7 {*cmpsi_1}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 54)
            (pc))) ge2fitman_sup.cpp:180 612 {*jcc_1}
     (nil)
 -> 54)
;;  succ:       6
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 91 92 93 94 95 96 97 98 99 100 105 106 107 108 109 110 111 112 113 114
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:181 90 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (reg:DI 1 dx [orig:88 D.25520 ] [88])
        (sign_extend:DI (reg:SI 0 ax [105]))) ge2fitman_sup.cpp:181 142 {*extendsidi2_rex64}
     (nil))
(insn 19 18 20 4 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) ge2fitman_sup.cpp:181 89 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.25521 ] [89])
                (plus:DI (reg/f:DI 0 ax [106])
                    (reg:DI 1 dx [orig:88 D.25520 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:181 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.25520 ] [88]))
        (nil)))
(insn 21 20 22 4 (set (reg:QI 0 ax [107])
        (mem:QI (reg/f:DI 0 ax [orig:89 D.25521 ] [89]) [0 *_9+0 S1 A8])) ge2fitman_sup.cpp:181 93 {*movqi_internal}
     (nil))
(insn 22 21 23 4 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5 [0xfffffffffffffffb])) [0 tempChar+0 S1 A8])
        (reg:QI 0 ax [107])) ge2fitman_sup.cpp:181 93 {*movqi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 0 ax [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:182 90 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 1 dx [orig:90 D.25520 ] [90])
        (sign_extend:DI (reg:SI 0 ax [108]))) ge2fitman_sup.cpp:182 142 {*extendsidi2_rex64}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) ge2fitman_sup.cpp:182 89 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg/f:DI 1 dx [orig:91 D.25521 ] [91])
                (plus:DI (reg:DI 1 dx [orig:90 D.25520 ] [90])
                    (reg/f:DI 0 ax [109])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:182 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:90 D.25520 ] [90]))
        (nil)))
(insn 27 26 28 4 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) ge2fitman_sup.cpp:182 90 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (parallel [
            (set (reg:SI 0 ax [orig:92 D.25519 ] [92])
                (minus:SI (reg:SI 0 ax [110])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:182 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))
        (nil)))
(insn 29 28 30 4 (set (reg:DI 0 ax [orig:93 D.25520 ] [93])
        (sign_extend:DI (reg:SI 0 ax [orig:92 D.25519 ] [92]))) ge2fitman_sup.cpp:182 142 {*extendsidi2_rex64}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 2 cx [orig:94 D.25520 ] [94])
                (plus:DI (reg:DI 0 ax [orig:93 D.25520 ] [93])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:182 218 {*adddi_1}
     (nil))
(insn 31 30 32 4 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) ge2fitman_sup.cpp:182 89 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.25521 ] [95])
                (plus:DI (reg/f:DI 0 ax [111])
                    (reg:DI 2 cx [orig:94 D.25520 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:182 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 2 cx [orig:94 D.25520 ] [94]))
        (nil)))
(insn 33 32 34 4 (set (reg:QI 0 ax [orig:96 D.25522 ] [96])
        (mem:QI (reg/f:DI 0 ax [orig:95 D.25521 ] [95]) [0 *_16+0 S1 A8])) ge2fitman_sup.cpp:182 93 {*movqi_internal}
     (nil))
(insn 34 33 35 4 (set (mem:QI (reg/f:DI 1 dx [orig:91 D.25521 ] [91]) [0 *_12+0 S1 A8])
        (reg:QI 0 ax [orig:96 D.25522 ] [96])) ge2fitman_sup.cpp:182 93 {*movqi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])) ge2fitman_sup.cpp:183 90 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:SI 0 ax [orig:97 D.25519 ] [97])
                (minus:SI (reg:SI 0 ax [112])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:183 260 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32]))
        (nil)))
(insn 37 36 38 4 (set (reg:DI 0 ax [orig:98 D.25520 ] [98])
        (sign_extend:DI (reg:SI 0 ax [orig:97 D.25519 ] [97]))) ge2fitman_sup.cpp:183 142 {*extendsidi2_rex64}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 1 dx [orig:99 D.25520 ] [99])
                (plus:DI (reg:DI 0 ax [orig:98 D.25520 ] [98])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:183 218 {*adddi_1}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])) ge2fitman_sup.cpp:183 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 1 dx [orig:100 D.25521 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 D.25520 ] [99])
                    (reg/f:DI 0 ax [113])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:183 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theVarChar+0 S8 A64])
            (reg:DI 1 dx [orig:99 D.25520 ] [99]))
        (nil)))
(insn 41 40 42 4 (set (reg:QI 0 ax [114])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -5 [0xfffffffffffffffb])) [0 tempChar+0 S1 A8])) ge2fitman_sup.cpp:183 93 {*movqi_internal}
     (nil))
(insn 42 41 43 4 (set (mem:QI (reg/f:DI 1 dx [orig:100 D.25521 ] [100]) [0 *_22+0 S1 A8])
        (reg:QI 0 ax [114])) ge2fitman_sup.cpp:183 93 {*movqi_internal}
     (nil))
(insn 43 42 51 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:180 217 {*addsi_1}
     (nil))
(jump_insn 51 43 52 4 (set (pc)
        (label_ref 44)) ge2fitman_sup.cpp:180 654 {jump}
     (nil)
 -> 44)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 52 51 54)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 54 52 53 6 42 "" [1 uses])
(note 53 54 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 55 53 49 6 (const_int 0 [0]) ge2fitman_sup.cpp:194 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 49 55 50 5 39 "" [0 uses])
(note 50 49 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 56 50 0 NOTE_INSN_DELETED)

;; Function bool promptYN() (_Z8promptYNv, funcdef_no=1026, decl_uid=24466, cgraph_uid=231, symbol_order=232)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) q  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 58:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

  BB 16
   Insn 71: point = 0
   Insn 70: point = 0
   Insn 66: point = 1
  BB 13
   Insn 86: point = 4
   Insn 50: point = 4
  BB 12
   Insn 84: point = 5
   Insn 45: point = 5
  BB 6
   Insn 29: point = 6
   Insn 28: point = 6
   Insn 27: point = 6
  BB 4
   Insn 20: point = 7
   Insn 19: point = 7
   Insn 18: point = 7
   Insn 17: point = 8
   Insn 16: point = 9
   Insn 15: point = 9
   Insn 14: point = 10
  BB 5
   Insn 79: point = 11
  BB 3
   Insn 12: point = 11
   Insn 11: point = 12
   Insn 10: point = 13
   Insn 9: point = 13
   Insn 8: point = 14
   Insn 7: point = 15
   Insn 6: point = 15
   Insn 5: point = 15
  BB 15
   Insn 88: point = 15
  BB 17
   Insn 91: point = 15
  BB 14
   Insn 59: point = 15
   Insn 58: point = 15
   Insn 57: point = 15
   Insn 56: point = 15
   Insn 55: point = 15
  BB 9
   Insn 82: point = 15
  BB 8
   Insn 33: point = 15
   Insn 32: point = 15
  BB 11
   Insn 40: point = 17
   Insn 39: point = 17
  BB 10
   Insn 38: point = 19
   Insn 37: point = 19
  BB 7
   Insn 31: point = 20
   Insn 30: point = 20
  BB 2
Compressing live ranges: from 21 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 50
changing reg in insn 45
changing reg in insn 66
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 27
changing reg in insn 39
changing reg in insn 37
changing reg in insn 32
changing reg in insn 30
changing reg in insn 28
changing reg in insn 66
changing reg in insn 70
starting the processing of deferred insns
ending the processing of deferred insns


bool promptYN()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={17d,17u} r1={6d} r2={6d} r4={6d} r5={11d,5u} r6={1d,21u} r7={1d,22u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={11d,6u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 472{400d,72u,0e} in 42{37 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 61 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              15 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89
(code_label 61 2 4 3 51 "" [1 uses])
(note 4 61 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 4 6 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f043df93480 *.LC8>)) ge2fitman_sup.cpp:203 89 {*movdi_internal}
     (nil))
(insn 6 5 7 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:203 93 {*movqi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:203 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 8 7 9 3 (set (reg/f:DI 0 ax [orig:88 D.25524 ] [88])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f043f442a20 stdin>) [0 stdin+0 S8 A64])) ge2fitman_sup.cpp:204 89 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 D.25524 ] [88])) ge2fitman_sup.cpp:204 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f043f475ca8 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:204 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:89 D.25525 ] [89])
        (reg:SI 0 ax)) ge2fitman_sup.cpp:204 90 {*movsi_internal}
     (nil))
(insn 12 11 22 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8])
        (reg:QI 0 ax [orig:89 D.25525 ] [89])) ge2fitman_sup.cpp:204 93 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              5 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91
(code_label 22 12 13 4 45 "" [1 uses])
(note 13 22 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:DI 0 ax [orig:90 D.25524 ] [90])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f043f442a20 stdin>) [0 stdin+0 S8 A64])) ge2fitman_sup.cpp:206 89 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 D.25524 ] [90])) ge2fitman_sup.cpp:206 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f043f475ca8 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:206 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 4 (set (reg:SI 0 ax [orig:91 D.25525 ] [91])
        (reg:SI 0 ax)) ge2fitman_sup.cpp:206 90 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
        (reg:QI 0 ax [orig:91 D.25525 ] [91])) ge2fitman_sup.cpp:206 93 {*movqi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
            (const_int 10 [0xa]))) ge2fitman_sup.cpp:207 5 {*cmpqi_1}
     (nil))
(jump_insn 20 19 21 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) ge2fitman_sup.cpp:207 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 21 20 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 79 21 80 5 (set (pc)
        (label_ref 22)) ge2fitman_sup.cpp:205 654 {jump}
     (nil)
 -> 22)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 80 79 25)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92
(code_label 25 80 26 6 44 "" [1 uses])
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 6 (set (reg:SI 0 ax [orig:92 D.25525 ] [92])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8]))) ge2fitman_sup.cpp:209 148 {extendqisi2}
     (nil))
(insn 28 27 29 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.25525 ] [92])
            (const_int 89 [0x59]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 29 28 73 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) ge2fitman_sup.cpp:209 612 {*jcc_1}
     (nil)
 -> 43)
;;  succ:       12
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 17 [flags]
(note 73 29 30 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 30 73 31 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:92 D.25525 ] [92])
            (const_int 89 [0x59]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 31 30 74 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) ge2fitman_sup.cpp:209 612 {*jcc_1}
     (nil)
 -> 36)
;;  succ:       10
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 17 [flags]
(note 74 31 32 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 32 74 33 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.25525 ] [92])
            (const_int 78 [0x4e]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 33 32 81 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) ge2fitman_sup.cpp:209 612 {*jcc_1}
     (nil)
 -> 48)
;;  succ:       13
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 81 33 82 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 82 81 83 9 (set (pc)
        (label_ref 53)) ge2fitman_sup.cpp:209 654 {jump}
     (nil)
 -> 53)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 83 82 36)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 17 [flags]
(code_label 36 83 76 10 48 "" [1 uses])
(note 76 36 37 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 37 76 38 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.25525 ] [92])
            (const_int 110 [0x6e]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 38 37 77 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) ge2fitman_sup.cpp:209 612 {*jcc_1}
     (nil)
 -> 48)
;;  succ:       13
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92
;; lr  def 	 17 [flags]
(note 77 38 39 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 39 77 40 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:92 D.25525 ] [92])
            (const_int 121 [0x79]))) ge2fitman_sup.cpp:209 7 {*cmpsi_1}
     (nil))
(jump_insn 40 39 43 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 53)
            (pc))) ge2fitman_sup.cpp:209 612 {*jcc_1}
     (nil)
 -> 53)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 43 40 44 12 47 "" [1 uses])
(note 44 43 45 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 84 12 (set (reg:QI 0 ax [orig:87 D.25523 ] [87])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:212 93 {*movqi_internal}
     (nil))
(jump_insn 84 45 85 12 (set (pc)
        (label_ref 64)) ge2fitman_sup.cpp:212 654 {jump}
     (nil)
 -> 64)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 85 84 48)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;;              10
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 48 85 49 13 49 "" [2 uses])
(note 49 48 50 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 86 13 (set (reg:QI 0 ax [orig:87 D.25523 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:216 93 {*movqi_internal}
     (nil))
(jump_insn 86 50 87 13 (set (pc)
        (label_ref 64)) ge2fitman_sup.cpp:216 654 {jump}
     (nil)
 -> 64)
;;  succ:       16 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 87 86 53)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;;              9 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 53 87 54 14 46 "" [2 uses])
(note 54 53 55 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f043df93510 *.LC9>)) ge2fitman_sup.cpp:219 89 {*movdi_internal}
     (nil))
(insn 56 55 57 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:219 93 {*movqi_internal}
     (nil))
(call_insn 57 56 58 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:219 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 58 57 59 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f043df935a0 *.LC10>)) ge2fitman_sup.cpp:220 89 {*movdi_internal}
     (nil))
(call_insn 59 58 90 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:220 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 15, flags: (NEW, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 90 59 91 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 60 17 (const_int 0 [0]) ge2fitman_sup.cpp:221 684 {nop}
     (nil))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 [100.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 60 91 88 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(jump_insn 88 60 89 15 (set (pc)
        (label_ref 61)) ge2fitman_sup.cpp:202 654 {jump}
     (nil)
 -> 61)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 89 88 64)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 [100.0%] 
;;              13 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 93
(code_label 64 89 65 16 50 "" [2 uses])
(note 65 64 66 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 70 16 (set (reg:QI 0 ax [orig:93 <retval> ] [93])
        (reg:QI 0 ax [orig:87 D.25523 ] [87])) 93 {*movqi_internal}
     (nil))
(insn 70 66 71 16 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:93 <retval> ] [93])) ge2fitman_sup.cpp:224 93 {*movqi_internal}
     (nil))
(insn 71 70 92 16 (use (reg/i:QI 0 ax)) ge2fitman_sup.cpp:224 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 92 71 0 NOTE_INSN_DELETED)

;; Function int promptSUBN() (_Z10promptSUBNv, funcdef_no=1027, decl_uid=24467, cgraph_uid=232, symbol_order=233)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 28:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rmWz {*zero_extendsidi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rBw {*tablejump_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 60:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

  BB 14
   Insn 76: point = 0
   Insn 75: point = 0
   Insn 71: point = 1
  BB 11
   Insn 87: point = 4
   Insn 55: point = 4
  BB 9
   Insn 83: point = 5
   Insn 45: point = 5
  BB 8
   Insn 81: point = 6
   Insn 40: point = 6
  BB 10
   Insn 85: point = 7
   Insn 50: point = 7
  BB 7
   Insn 33: point = 8
   Insn 32: point = 9
   Insn 31: point = 11
  BB 6
   Insn 30: point = 14
   Insn 29: point = 14
   Insn 28: point = 14
   Insn 27: point = 16
  BB 4
   Insn 20: point = 17
   Insn 19: point = 17
   Insn 18: point = 17
   Insn 17: point = 18
   Insn 16: point = 19
   Insn 15: point = 19
   Insn 14: point = 20
  BB 5
   Insn 79: point = 21
  BB 3
   Insn 12: point = 21
   Insn 11: point = 22
   Insn 10: point = 23
   Insn 9: point = 23
   Insn 8: point = 24
   Insn 7: point = 25
   Insn 6: point = 25
   Insn 5: point = 25
  BB 13
   Insn 89: point = 25
  BB 15
   Insn 92: point = 25
  BB 12
   Insn 64: point = 25
   Insn 63: point = 25
   Insn 62: point = 25
   Insn 61: point = 25
   Insn 60: point = 25
  BB 2
Compressing live ranges: from 25 to 0 - 0%
Ranges after the compression:
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 55
changing reg in insn 50
changing reg in insn 45
changing reg in insn 40
changing reg in insn 71
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 27
changing reg in insn 28
changing reg in insn 71
changing reg in insn 75
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
starting the processing of deferred insns
ending the processing of deferred insns


int promptSUBN()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={22d,17u} r1={6d} r2={6d} r4={6d} r5={11d,5u} r6={1d,19u} r7={1d,20u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={8d,2u} r18={5d} r19={5d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={6d} r38={6d} r39={5d} r40={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} 
;;    total ref usage 466{402d,64u,0e} in 41{36 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 66 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;;              13 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89
(code_label 66 2 4 3 62 "" [1 uses])
(note 4 66 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 4 6 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f043df992d0 *.LC11>)) ge2fitman_sup.cpp:233 89 {*movdi_internal}
     (nil))
(insn 6 5 7 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:233 93 {*movqi_internal}
     (nil))
(call_insn 7 6 8 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:233 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 8 7 9 3 (set (reg/f:DI 0 ax [orig:88 D.25531 ] [88])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f043f442a20 stdin>) [0 stdin+0 S8 A64])) ge2fitman_sup.cpp:234 89 {*movdi_internal}
     (nil))
(insn 9 8 10 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 D.25531 ] [88])) ge2fitman_sup.cpp:234 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f043f475ca8 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:234 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 ax [orig:89 D.25530 ] [89])
        (reg:SI 0 ax)) ge2fitman_sup.cpp:234 90 {*movsi_internal}
     (nil))
(insn 12 11 22 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8])
        (reg:QI 0 ax [orig:89 D.25530 ] [89])) ge2fitman_sup.cpp:234 93 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              5 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91
(code_label 22 12 13 4 54 "" [1 uses])
(note 13 22 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg/f:DI 0 ax [orig:90 D.25531 ] [90])
        (mem/f/c:DI (symbol_ref:DI ("stdin") [flags 0x40]  <var_decl 0x7f043f442a20 stdin>) [0 stdin+0 S8 A64])) ge2fitman_sup.cpp:236 89 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 D.25531 ] [90])) ge2fitman_sup.cpp:236 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_IO_getc") [flags 0x41]  <function_decl 0x7f043f475ca8 _IO_getc>) [0 _IO_getc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:236 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 4 (set (reg:SI 0 ax [orig:91 D.25530 ] [91])
        (reg:SI 0 ax)) ge2fitman_sup.cpp:236 90 {*movsi_internal}
     (nil))
(insn 18 17 19 4 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
        (reg:QI 0 ax [orig:91 D.25530 ] [91])) ge2fitman_sup.cpp:236 93 {*movqi_internal}
     (nil))
(insn 19 18 20 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -1 [0xffffffffffffffff])) [0 junk+0 S1 A8])
            (const_int 10 [0xa]))) ge2fitman_sup.cpp:237 5 {*cmpqi_1}
     (nil))
(jump_insn 20 19 21 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) ge2fitman_sup.cpp:237 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 21 20 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 79 21 80 5 (set (pc)
        (label_ref 22)) ge2fitman_sup.cpp:235 654 {jump}
     (nil)
 -> 22)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 80 79 25)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 94
(code_label 25 80 26 6 53 "" [1 uses])
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 6 (set (reg:SI 0 ax [orig:92 D.25530 ] [92])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -2 [0xfffffffffffffffe])) [0 option+0 S1 A8]))) ge2fitman_sup.cpp:239 148 {extendqisi2}
     (nil))
(insn 28 27 29 6 (parallel [
            (set (reg:SI 0 ax [94])
                (plus:SI (reg:SI 0 ax [orig:92 D.25530 ] [92])
                    (const_int -66 [0xffffffffffffffbe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:239 217 {*addsi_1}
     (nil))
(insn 29 28 30 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [94])
            (const_int 51 [0x33]))) ge2fitman_sup.cpp:239 7 {*cmpsi_1}
     (nil))
(jump_insn 30 29 78 6 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) ge2fitman_sup.cpp:239 612 {*jcc_1}
     (nil)
 -> 58)
;;  succ:       12
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 95 96
(note 78 30 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 31 78 32 7 (set (reg:DI 0 ax [95])
        (zero_extend:DI (reg:SI 0 ax [94]))) ge2fitman_sup.cpp:239 133 {*zero_extendsidi2}
     (nil))
(insn 32 31 33 7 (set (reg:DI 0 ax [96])
        (mem/u/c:DI (plus:DI (ashift:DI (reg:DI 0 ax [95])
                    (const_int 3 [0x3]))
                (label_ref:DI 35)) [0  S8 A8])) ge2fitman_sup.cpp:239 89 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 35 (nil)))
(jump_insn 33 32 34 7 (parallel [
            (set (pc)
                (reg:DI 0 ax [96]))
            (use (label_ref 35))
        ]) ge2fitman_sup.cpp:239 658 {*tablejump_1}
     (nil)
 -> 35)
;;  succ:       12
;;              10
;;              11
;;              8
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 34 33 35)
;; Insn is not within a basic block
(code_label 35 34 36 57 "" [2 uses])
;; Insn is not within a basic block
(jump_table_data 36 35 37 (addr_vec:DI [
            (label_ref:DI 48)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 53)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 38)
            (label_ref:DI 58)
            (label_ref:DI 43)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 48)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 53)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 58)
            (label_ref:DI 38)
            (label_ref:DI 58)
            (label_ref:DI 43)
        ]))
(barrier 37 36 38)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 38 37 39 8 59 "" [2 uses])
(note 39 38 40 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 81 8 (set (reg:SI 0 ax [orig:87 D.25530 ] [87])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:242 90 {*movsi_internal}
     (nil))
(jump_insn 81 40 82 8 (set (pc)
        (label_ref 69)) ge2fitman_sup.cpp:242 654 {jump}
     (nil)
 -> 69)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 82 81 43)
;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 43 82 44 9 60 "" [2 uses])
(note 44 43 45 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 83 9 (set (reg:SI 0 ax [orig:87 D.25530 ] [87])
        (const_int 2 [0x2])) ge2fitman_sup.cpp:246 90 {*movsi_internal}
     (nil))
(jump_insn 83 45 84 9 (set (pc)
        (label_ref 69)) ge2fitman_sup.cpp:246 654 {jump}
     (nil)
 -> 69)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 84 83 48)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 48 84 49 10 56 "" [2 uses])
(note 49 48 50 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 85 10 (set (reg:SI 0 ax [orig:87 D.25530 ] [87])
        (const_int 0 [0])) ge2fitman_sup.cpp:250 90 {*movsi_internal}
     (nil))
(jump_insn 85 50 86 10 (set (pc)
        (label_ref 69)) ge2fitman_sup.cpp:250 654 {jump}
     (nil)
 -> 69)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 86 85 53)
;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 53 86 54 11 58 "" [2 uses])
(note 54 53 55 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 87 11 (set (reg:SI 0 ax [orig:87 D.25530 ] [87])
        (const_int -1 [0xffffffffffffffff])) ge2fitman_sup.cpp:254 90 {*movsi_internal}
     (nil))
(jump_insn 87 55 88 11 (set (pc)
        (label_ref 69)) ge2fitman_sup.cpp:254 654 {jump}
     (nil)
 -> 69)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 88 87 58)
;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7
;;              6
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 58 88 59 12 55 "" [45 uses])
(note 59 58 60 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f043df93510 *.LC9>)) ge2fitman_sup.cpp:257 89 {*movdi_internal}
     (nil))
(insn 61 60 62 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:257 93 {*movqi_internal}
     (nil))
(call_insn 62 61 63 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:257 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 63 62 64 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f043df99360 *.LC12>)) ge2fitman_sup.cpp:258 89 {*movdi_internal}
     (nil))
(call_insn 64 63 91 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:258 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 13, flags: (NEW, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 91 64 92 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 65 15 (const_int 0 [0]) ge2fitman_sup.cpp:259 684 {nop}
     (nil))
;;  succ:       13 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 65 92 89 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(jump_insn 89 65 90 13 (set (pc)
        (label_ref 66)) ge2fitman_sup.cpp:232 654 {jump}
     (nil)
 -> 66)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 90 89 69)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 [100.0%] 
;;              8 [100.0%] 
;;              9 [100.0%] 
;;              11 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 93
(code_label 69 90 70 14 61 "" [4 uses])
(note 70 69 71 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 75 14 (set (reg:SI 0 ax [orig:93 <retval> ] [93])
        (reg:SI 0 ax [orig:87 D.25530 ] [87])) 90 {*movsi_internal}
     (nil))
(insn 75 71 76 14 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:93 <retval> ] [93])) ge2fitman_sup.cpp:262 90 {*movsi_internal}
     (nil))
(insn 76 75 93 14 (use (reg/i:SI 0 ax)) ge2fitman_sup.cpp:262 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 93 76 0 NOTE_INSN_DELETED)

;; Function void init(Data_file_header*, Data_block_header*, Procpar_info*, Preprocess*, IOFiles*, InFile_struct*) (_Z4initP16Data_file_headerP17Data_block_headerP12Procpar_infoP10PreprocessP7IOFilesP13InFile_struct, funcdef_no=1028, decl_uid=24476, cgraph_uid=233, symbol_order=234)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 18:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=551 from oldreg=88, assigning class GENERAL_REGS to r551
   18: {r551:DI=r551:DI<<0x9;clobber flags:CC;}
      REG_DEAD r87:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  802: r551:DI=r87:DI
    Inserting insn reload after:
  803: r88:DI=r551:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 21:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 25:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=552 from oldreg=91, assigning class GENERAL_REGS to r552
   25: {r552:DI=r552:DI<<0x9;clobber flags:CC;}
      REG_DEAD r90:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  804: r552:DI=r90:DI
    Inserting insn reload after:
  805: r91:DI=r552:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 28:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 29:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 32:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=553 from oldreg=94, assigning class GENERAL_REGS to r553
   32: {r553:DI=r553:DI<<0x9;clobber flags:CC;}
      REG_DEAD r93:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  806: r553:DI=r93:DI
    Inserting insn reload after:
  807: r94:DI=r553:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 34
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 38:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=554 from oldreg=97, assigning class GENERAL_REGS to r554
   38: {r554:DI=r554:DI<<0x9;clobber flags:CC;}
      REG_DEAD r96:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  808: r554:DI=r96:DI
    Inserting insn reload after:
  809: r97:DI=r554:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 40
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 44:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=555 from oldreg=100, assigning class GENERAL_REGS to r555
   44: {r555:DI=r555:DI<<0x9;clobber flags:CC;}
      REG_DEAD r99:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  810: r555:DI=r99:DI
    Inserting insn reload after:
  811: r100:DI=r555:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 47:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 48:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 51:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=556 from oldreg=103, assigning class GENERAL_REGS to r556
   51: {r556:DI=r556:DI<<0x9;clobber flags:CC;}
      REG_DEAD r102:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  812: r556:DI=r102:DI
    Inserting insn reload after:
  813: r103:DI=r556:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 54:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 55:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 58:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=557 from oldreg=106, assigning class GENERAL_REGS to r557
   58: {r557:DI=r557:DI<<0x9;clobber flags:CC;}
      REG_DEAD r105:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  814: r557:DI=r105:DI
    Inserting insn reload after:
  815: r106:DI=r557:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 60
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 61:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 62:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 65:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=558 from oldreg=109, assigning class GENERAL_REGS to r558
   65: {r558:DI=r558:DI<<0x9;clobber flags:CC;}
      REG_DEAD r108:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  816: r558:DI=r108:DI
    Inserting insn reload after:
  817: r109:DI=r558:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 67
	 Choosing alt 0 in insn 67:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 68:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 69:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 72:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=559 from oldreg=112, assigning class GENERAL_REGS to r559
   72: {r559:DI=r559:DI<<0x9;clobber flags:CC;}
      REG_DEAD r111:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  818: r559:DI=r111:DI
    Inserting insn reload after:
  819: r112:DI=r559:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 74
	 Choosing alt 0 in insn 74:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 75:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 76:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 79:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=560 from oldreg=115, assigning class GENERAL_REGS to r560
   79: {r560:DI=r560:DI<<0x9;clobber flags:CC;}
      REG_DEAD r114:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  820: r560:DI=r114:DI
    Inserting insn reload after:
  821: r115:DI=r560:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 82:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 83:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 86:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=561 from oldreg=118, assigning class GENERAL_REGS to r561
   86: {r561:DI=r561:DI<<0x9;clobber flags:CC;}
      REG_DEAD r117:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  822: r561:DI=r117:DI
    Inserting insn reload after:
  823: r118:DI=r561:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 88
	 Choosing alt 0 in insn 88:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 89:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 90:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 93:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=562 from oldreg=121, assigning class GENERAL_REGS to r562
   93: {r562:DI=r562:DI<<0x9;clobber flags:CC;}
      REG_DEAD r120:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  824: r562:DI=r120:DI
    Inserting insn reload after:
  825: r121:DI=r562:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 95
	 Choosing alt 0 in insn 95:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 96:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 97:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 100:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=563 from oldreg=124, assigning class GENERAL_REGS to r563
  100: {r563:DI=r563:DI<<0x9;clobber flags:CC;}
      REG_DEAD r123:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  826: r563:DI=r123:DI
    Inserting insn reload after:
  827: r124:DI=r563:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 102
	 Choosing alt 0 in insn 102:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 103:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 104:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 107:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=564 from oldreg=127, assigning class GENERAL_REGS to r564
  107: {r564:DI=r564:DI<<0x9;clobber flags:CC;}
      REG_DEAD r126:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  828: r564:DI=r126:DI
    Inserting insn reload after:
  829: r127:DI=r564:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 109
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 110:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 111:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 114:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=565 from oldreg=130, assigning class GENERAL_REGS to r565
  114: {r565:DI=r565:DI<<0x9;clobber flags:CC;}
      REG_DEAD r129:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  830: r565:DI=r129:DI
    Inserting insn reload after:
  831: r130:DI=r565:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 116
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 117:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 118:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=566 from oldreg=133, assigning class GENERAL_REGS to r566
  121: {r566:DI=r566:DI<<0x9;clobber flags:CC;}
      REG_DEAD r132:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  832: r566:DI=r132:DI
    Inserting insn reload after:
  833: r133:DI=r566:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 124:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=14,overall=18,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 125:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 128:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=567 from oldreg=136, assigning class GENERAL_REGS to r567
  128: {r567:DI=r567:DI<<0x9;clobber flags:CC;}
      REG_DEAD r135:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  834: r567:DI=r135:DI
    Inserting insn reload after:
  835: r136:DI=r567:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 131:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 132:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 135:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=568 from oldreg=139, assigning class GENERAL_REGS to r568
  135: {r568:DI=r568:DI<<0x9;clobber flags:CC;}
      REG_DEAD r138:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  836: r568:DI=r138:DI
    Inserting insn reload after:
  837: r139:DI=r568:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 148:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=569 from oldreg=143, assigning class GENERAL_REGS to r569
  148: {r569:DI=r569:DI<<0x9;clobber flags:CC;}
      REG_DEAD r142:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  838: r569:DI=r142:DI
    Inserting insn reload after:
  839: r143:DI=r569:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 153:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 154:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 169:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=570 from oldreg=147, assigning class GENERAL_REGS to r570
  169: {r570:DI=r570:DI<<0x9;clobber flags:CC;}
      REG_DEAD r146:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  840: r570:DI=r146:DI
    Inserting insn reload after:
  841: r147:DI=r570:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 174:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 175:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 183:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=571 from oldreg=150, assigning class GENERAL_REGS to r571
  183: {r571:DI=r571:DI<<0x9;clobber flags:CC;}
      REG_DEAD r149:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  842: r571:DI=r149:DI
    Inserting insn reload after:
  843: r150:DI=r571:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 184:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 187:  (0) r  (1) i {*movdi_internal}
      Creating newreg=572, assigning class GENERAL_REGS to r572
  187: r572:DI=0x2065746144206f4e
    Inserting insn reload after:
  844: [r152:DI]=r572:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 844:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 188:  (0) r  (1) i {*movdi_internal}
      Creating newreg=573, assigning class GENERAL_REGS to r573
  188: r573:DI=0x6c62616c69617641
    Inserting insn reload after:
  845: [r152:DI+0x8]=r573:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 845:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 199:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=574 from oldreg=155, assigning class GENERAL_REGS to r574
  199: {r574:DI=r574:DI<<0x9;clobber flags:CC;}
      REG_DEAD r154:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  846: r574:DI=r154:DI
    Inserting insn reload after:
  847: r155:DI=r574:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 204:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 205:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 213:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=575 from oldreg=158, assigning class GENERAL_REGS to r575
  213: {r575:DI=r575:DI<<0x9;clobber flags:CC;}
      REG_DEAD r157:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  848: r575:DI=r157:DI
    Inserting insn reload after:
  849: r158:DI=r575:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 214:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 215
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 217:  (0) r  (1) i {*movdi_internal}
      Creating newreg=576, assigning class GENERAL_REGS to r576
  217: r576:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  850: [r160:DI]=r576:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 850:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 218:  (0) r  (1) i {*movdi_internal}
      Creating newreg=577, assigning class GENERAL_REGS to r577
  218: r577:DI=0x6961764120656d61
    Inserting insn reload after:
  851: [r160:DI+0x8]=r577:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 851:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 230:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=578 from oldreg=163, assigning class GENERAL_REGS to r578
  230: {r578:DI=r578:DI<<0x9;clobber flags:CC;}
      REG_DEAD r162:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  852: r578:DI=r162:DI
    Inserting insn reload after:
  853: r163:DI=r578:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 235:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 236:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 244:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=579 from oldreg=166, assigning class GENERAL_REGS to r579
  244: {r579:DI=r579:DI<<0x9;clobber flags:CC;}
      REG_DEAD r165:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  854: r579:DI=r165:DI
    Inserting insn reload after:
  855: r166:DI=r579:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 245:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 246
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 247:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 248:  (0) r  (1) i {*movdi_internal}
      Creating newreg=580, assigning class GENERAL_REGS to r580
  248: r580:DI=0x6970736f48206f4e
    Inserting insn reload after:
  856: [r168:DI]=r580:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 856:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 249:  (0) r  (1) i {*movdi_internal}
      Creating newreg=581, assigning class GENERAL_REGS to r581
  249: r581:DI=0x656d614e206c6174
    Inserting insn reload after:
  857: [r168:DI+0x8]=r581:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 857:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 250:  (0) r  (1) i {*movdi_internal}
      Creating newreg=582, assigning class GENERAL_REGS to r582
  250: r582:DI=0x62616c6961764120
    Inserting insn reload after:
  858: [r168:DI+0x10]=r582:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 858:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 252:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 253:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 262:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=583 from oldreg=171, assigning class GENERAL_REGS to r583
  262: {r583:DI=r583:DI<<0x9;clobber flags:CC;}
      REG_DEAD r170:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  859: r583:DI=r170:DI
    Inserting insn reload after:
  860: r171:DI=r583:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 263:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 267:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 268:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 276:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=584 from oldreg=174, assigning class GENERAL_REGS to r584
  276: {r584:DI=r584:DI<<0x9;clobber flags:CC;}
      REG_DEAD r173:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  861: r584:DI=r173:DI
    Inserting insn reload after:
  862: r174:DI=r584:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 277:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 278
	 Choosing alt 0 in insn 278:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 279:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 280:  (0) r  (1) i {*movdi_internal}
      Creating newreg=585, assigning class GENERAL_REGS to r585
  280: r585:DI=0x6569746150206f4e
    Inserting insn reload after:
  863: [r176:DI]=r585:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 863:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 281:  (0) r  (1) i {*movdi_internal}
      Creating newreg=586, assigning class GENERAL_REGS to r586
  281: r586:DI=0x20656d614e20746e
    Inserting insn reload after:
  864: [r176:DI+0x8]=r586:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 864:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 282:  (0) r  (1) i {*movdi_internal}
      Creating newreg=587, assigning class GENERAL_REGS to r587
  282: r587:DI=0x6c62616c69617641
    Inserting insn reload after:
  865: [r176:DI+0x10]=r587:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 865:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 283:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 284:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 291:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 293:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=588 from oldreg=179, assigning class GENERAL_REGS to r588
  293: {r588:DI=r588:DI<<0x9;clobber flags:CC;}
      REG_DEAD r178:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  866: r588:DI=r178:DI
    Inserting insn reload after:
  867: r179:DI=r588:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 294:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 298:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 299:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 307:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=589 from oldreg=182, assigning class GENERAL_REGS to r589
  307: {r589:DI=r589:DI<<0x9;clobber flags:CC;}
      REG_DEAD r181:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  868: r589:DI=r181:DI
    Inserting insn reload after:
  869: r182:DI=r589:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 309
	 Choosing alt 0 in insn 309:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 310:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 311:  (0) r  (1) i {*movdi_internal}
      Creating newreg=590, assigning class GENERAL_REGS to r590
  311: r590:DI=0x65736c7550206f4e
    Inserting insn reload after:
  870: [r184:DI]=r590:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 870:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 312:  (0) r  (1) i {*movdi_internal}
      Creating newreg=591, assigning class GENERAL_REGS to r591
  312: r591:DI=0x636e657571655320
    Inserting insn reload after:
  871: [r184:DI+0x8]=r591:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 871:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 313:  (0) r  (1) i {*movdi_internal}
      Creating newreg=592, assigning class GENERAL_REGS to r592
  313: r592:DI=0x4120656d614e2065
    Inserting insn reload after:
  872: [r184:DI+0x10]=r592:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 872:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 314:  (0) r  (1) i {*movdi_internal}
      Creating newreg=593, assigning class GENERAL_REGS to r593
  314: r593:DI=0x656c62616c696176
    Inserting insn reload after:
  873: [r184:DI+0x18]=r593:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 873:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 315:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 317:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 326:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 327
	 Choosing alt 0 in insn 327:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 328:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 330:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 339:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 340
	 Choosing alt 0 in insn 340:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 341:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 342:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 344:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 354
	 Choosing alt 0 in insn 354:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 355:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 357:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 367
	 Choosing alt 0 in insn 367:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 368:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 370:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 372:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 375:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 379:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 380
	 Choosing alt 0 in insn 380:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 381:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 383:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 387:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 392:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 393
	 Choosing alt 0 in insn 393:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 394:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 396:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 400:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 401:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 405:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 406
	 Choosing alt 0 in insn 406:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 407:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 409:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 411:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 412:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 418:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 419
	 Choosing alt 0 in insn 419:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 420:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 421:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 423:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 432:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 433
	 Choosing alt 0 in insn 433:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 434:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 436:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 445:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 446
	 Choosing alt 0 in insn 446:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 447:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 449:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 453:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 458:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 459
	 Choosing alt 0 in insn 459:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 460:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 462:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 472
	 Choosing alt 0 in insn 472:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 473:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 475:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 477:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 485
	 Choosing alt 0 in insn 485:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 486:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 487:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 489:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 498:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 499
	 Choosing alt 0 in insn 499:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 500:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 502:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 507:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 511:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 512
	 Choosing alt 0 in insn 512:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 513:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 515:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 524:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 525
	 Choosing alt 0 in insn 525:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 526:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 527:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 528:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 530:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 531:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 533:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 537:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 538
	 Choosing alt 0 in insn 538:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 539:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 541:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            alt=0,overall=8,losers=1 -- refuse
            1 Matching alt: reject+=2
            alt=1,overall=8,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 550:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 551
	 Choosing alt 0 in insn 551:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 552:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 555:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=594 from oldreg=240, assigning class GENERAL_REGS to r594
  555: {r594:DI=r594:DI<<0x6;clobber flags:CC;}
      REG_DEAD r239:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  874: r594:DI=r239:DI
    Inserting insn reload after:
  875: r240:DI=r594:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 556:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 557
	 Choosing alt 0 in insn 557:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 558:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 561:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=595 from oldreg=243, assigning class GENERAL_REGS to r595
  561: {r595:DI=r595:DI<<0x6;clobber flags:CC;}
      REG_DEAD r242:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  876: r595:DI=r242:DI
    Inserting insn reload after:
  877: r243:DI=r595:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 562:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 563
	 Choosing alt 0 in insn 563:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 564:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 567:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=596 from oldreg=246, assigning class GENERAL_REGS to r596
  567: {r596:DI=r596:DI<<0x6;clobber flags:CC;}
      REG_DEAD r245:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  878: r596:DI=r245:DI
    Inserting insn reload after:
  879: r246:DI=r596:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 568:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 569
	 Choosing alt 0 in insn 569:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 570:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 572:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 573:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=597 from oldreg=249, assigning class GENERAL_REGS to r597
  573: {r597:DI=r597:DI<<0x6;clobber flags:CC;}
      REG_DEAD r248:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  880: r597:DI=r248:DI
    Inserting insn reload after:
  881: r249:DI=r597:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 574:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 575
	 Choosing alt 0 in insn 575:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 576:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 577:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 579:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=598 from oldreg=252, assigning class GENERAL_REGS to r598
  579: {r598:DI=r598:DI<<0x6;clobber flags:CC;}
      REG_DEAD r251:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  882: r598:DI=r251:DI
    Inserting insn reload after:
  883: r252:DI=r598:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 580:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 581
	 Choosing alt 0 in insn 581:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 582:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 585:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=599 from oldreg=255, assigning class GENERAL_REGS to r599
  585: {r599:DI=r599:DI<<0x6;clobber flags:CC;}
      REG_DEAD r254:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  884: r599:DI=r254:DI
    Inserting insn reload after:
  885: r255:DI=r599:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 586:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 587
	 Choosing alt 0 in insn 587:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 588:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 590:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 591:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=600 from oldreg=258, assigning class GENERAL_REGS to r600
  591: {r600:DI=r600:DI<<0x6;clobber flags:CC;}
      REG_DEAD r257:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  886: r600:DI=r257:DI
    Inserting insn reload after:
  887: r258:DI=r600:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 592:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 593
	 Choosing alt 0 in insn 593:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 594:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 596:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 597:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=601 from oldreg=261, assigning class GENERAL_REGS to r601
  597: {r601:DI=r601:DI<<0x6;clobber flags:CC;}
      REG_DEAD r260:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  888: r601:DI=r260:DI
    Inserting insn reload after:
  889: r261:DI=r601:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 598:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 599
	 Choosing alt 0 in insn 599:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 600:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 603:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=602 from oldreg=264, assigning class GENERAL_REGS to r602
  603: {r602:DI=r602:DI<<0x6;clobber flags:CC;}
      REG_DEAD r263:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  890: r602:DI=r263:DI
    Inserting insn reload after:
  891: r264:DI=r602:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 604:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 605
	 Choosing alt 0 in insn 605:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 606:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 609:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=603 from oldreg=267, assigning class GENERAL_REGS to r603
  609: {r603:DI=r603:DI<<0x5;clobber flags:CC;}
      REG_DEAD r266:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  892: r603:DI=r266:DI
    Inserting insn reload after:
  893: r267:DI=r603:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 610:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 611
	 Choosing alt 0 in insn 611:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 612:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 615:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=604 from oldreg=270, assigning class GENERAL_REGS to r604
  615: {r604:DI=r604:DI<<0x5;clobber flags:CC;}
      REG_DEAD r269:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  894: r604:DI=r269:DI
    Inserting insn reload after:
  895: r270:DI=r604:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 616:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 617
	 Choosing alt 0 in insn 617:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 618:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 621:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=605 from oldreg=273, assigning class GENERAL_REGS to r605
  621: {r605:DI=r605:DI<<0x5;clobber flags:CC;}
      REG_DEAD r272:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  896: r605:DI=r272:DI
    Inserting insn reload after:
  897: r273:DI=r605:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 622:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 623
	 Choosing alt 0 in insn 623:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 624:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 625:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 627:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=606 from oldreg=276, assigning class GENERAL_REGS to r606
  627: {r606:DI=r606:DI<<0x5;clobber flags:CC;}
      REG_DEAD r275:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  898: r606:DI=r275:DI
    Inserting insn reload after:
  899: r276:DI=r606:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 628:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 629
	 Choosing alt 0 in insn 629:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 630:  (0) m  (1) rn {*movhi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 632:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 633:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=607 from oldreg=279, assigning class GENERAL_REGS to r607
  633: {r607:DI=r607:DI<<0x5;clobber flags:CC;}
      REG_DEAD r278:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  900: r607:DI=r278:DI
    Inserting insn reload after:
  901: r279:DI=r607:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 634:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 635
	 Choosing alt 0 in insn 635:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 636:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 638:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 639:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=608 from oldreg=282, assigning class GENERAL_REGS to r608
  639: {r608:DI=r608:DI<<0x5;clobber flags:CC;}
      REG_DEAD r281:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  902: r608:DI=r281:DI
    Inserting insn reload after:
  903: r282:DI=r608:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 640:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 641
	 Choosing alt 0 in insn 641:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 642:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 643:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 645:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 646:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=609 from oldreg=285, assigning class GENERAL_REGS to r609
  646: {r609:DI=r609:DI<<0x5;clobber flags:CC;}
      REG_DEAD r284:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  904: r609:DI=r284:DI
    Inserting insn reload after:
  905: r285:DI=r609:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 647:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 648
	 Choosing alt 0 in insn 648:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 649:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 650:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 651:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 652:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 653:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=610 from oldreg=288, assigning class GENERAL_REGS to r610
  653: {r610:DI=r610:DI<<0x5;clobber flags:CC;}
      REG_DEAD r287:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  906: r610:DI=r287:DI
    Inserting insn reload after:
  907: r288:DI=r610:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 654:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 655
	 Choosing alt 0 in insn 655:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 656:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 657:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 659:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 660:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=611 from oldreg=291, assigning class GENERAL_REGS to r611
  660: {r611:DI=r611:DI<<0x5;clobber flags:CC;}
      REG_DEAD r290:DI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  908: r611:DI=r290:DI
    Inserting insn reload after:
  909: r291:DI=r611:DI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 661:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 662
	 Choosing alt 0 in insn 662:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=3,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=625,losers=2 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 663:  (0) v  (1) m {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=0,overall=1223,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=4,overall=612,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=7,overall=18,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 664:  (0) m  (1) v {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 665:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 666:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 673:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 674
	 Choosing alt 0 in insn 674:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 675:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 676:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 677:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 684:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 685
	 Choosing alt 0 in insn 685:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 686:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 688:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 690:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 692:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 695:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 696
	 Choosing alt 0 in insn 696:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 697:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 698:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 699:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 702:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 703:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 706:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 707
	 Choosing alt 0 in insn 707:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 708:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 709:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 711:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 712:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 716:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 717:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 719:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 720:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 721:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 724:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 725:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 726:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 728:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 729:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 735:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 741:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 742:  (0) r  (1) i {*movdi_internal}
      Creating newreg=612, assigning class GENERAL_REGS to r612
  742: r612:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  910: [r309:DI]=r612:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 910:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 743:  (0) r  (1) i {*movdi_internal}
      Creating newreg=613, assigning class GENERAL_REGS to r613
  743: r613:DI=0x6961764120656d61
    Inserting insn reload after:
  911: [r309:DI+0x8]=r613:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 911:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 744:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 745:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 746:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 747:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 748:  (0) r  (1) i {*movdi_internal}
      Creating newreg=614, assigning class GENERAL_REGS to r614
  748: r614:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  912: [r310:DI]=r614:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 912:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 749:  (0) r  (1) i {*movdi_internal}
      Creating newreg=615, assigning class GENERAL_REGS to r615
  749: r615:DI=0x6961764120656d61
    Inserting insn reload after:
  913: [r310:DI+0x8]=r615:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 913:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 750:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 751:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 752:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 753:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 754:  (0) r  (1) i {*movdi_internal}
      Creating newreg=616, assigning class GENERAL_REGS to r616
  754: r616:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  914: [r311:DI]=r616:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 914:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 755:  (0) r  (1) i {*movdi_internal}
      Creating newreg=617, assigning class GENERAL_REGS to r617
  755: r617:DI=0x6961764120656d61
    Inserting insn reload after:
  915: [r311:DI+0x8]=r617:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 915:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 756:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 757:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 758:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 759:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 760:  (0) r  (1) i {*movdi_internal}
      Creating newreg=618, assigning class GENERAL_REGS to r618
  760: r618:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  916: [r312:DI]=r618:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 916:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 761:  (0) r  (1) i {*movdi_internal}
      Creating newreg=619, assigning class GENERAL_REGS to r619
  761: r619:DI=0x6961764120656d61
    Inserting insn reload after:
  917: [r312:DI+0x8]=r619:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 917:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 762:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 763:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 764:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 765:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 766:  (0) r  (1) i {*movdi_internal}
      Creating newreg=620, assigning class GENERAL_REGS to r620
  766: r620:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  918: [r313:DI]=r620:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 918:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 767:  (0) r  (1) i {*movdi_internal}
      Creating newreg=621, assigning class GENERAL_REGS to r621
  767: r621:DI=0x6961764120656d61
    Inserting insn reload after:
  919: [r313:DI+0x8]=r621:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 919:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 768:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 769:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 770:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 771:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 772:  (0) r  (1) i {*movdi_internal}
      Creating newreg=622, assigning class GENERAL_REGS to r622
  772: r622:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  920: [r314:DI]=r622:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 920:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 773:  (0) r  (1) i {*movdi_internal}
      Creating newreg=623, assigning class GENERAL_REGS to r623
  773: r623:DI=0x6961764120656d61
    Inserting insn reload after:
  921: [r314:DI+0x8]=r623:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 921:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 774:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 775:  (0) m  (1) rn {*movhi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 776:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 777:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 778:  (0) r  (1) i {*movdi_internal}
      Creating newreg=624, assigning class GENERAL_REGS to r624
  778: r624:DI=0x6e656c6946206f4e
    Inserting insn reload after:
  922: [r315:DI]=r624:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 922:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 779:  (0) r  (1) i {*movdi_internal}
      Creating newreg=625, assigning class GENERAL_REGS to r625
  779: r625:DI=0x6961764120656d61
    Inserting insn reload after:
  923: [r315:DI+0x8]=r625:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 923:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 780:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 781:  (0) m  (1) rn {*movhi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26

********** Pseudo live ranges #1: **********

  BB 26
   Insn 784: point = 0
   Insn 781: point = 0
   Insn 780: point = 1
   Insn 923: point = 1
   Insn 779: point = 2
   Insn 922: point = 3
   Insn 778: point = 4
   Insn 777: point = 5
   Insn 776: point = 7
   Insn 775: point = 8
   Insn 774: point = 9
   Insn 921: point = 9
   Insn 773: point = 10
   Insn 920: point = 11
   Insn 772: point = 12
   Insn 771: point = 13
   Insn 770: point = 15
   Insn 769: point = 16
   Insn 768: point = 17
   Insn 919: point = 17
   Insn 767: point = 18
   Insn 918: point = 19
   Insn 766: point = 20
   Insn 765: point = 21
   Insn 764: point = 23
   Insn 763: point = 24
   Insn 762: point = 25
   Insn 917: point = 25
   Insn 761: point = 26
   Insn 916: point = 27
   Insn 760: point = 28
   Insn 759: point = 29
   Insn 758: point = 31
   Insn 757: point = 32
   Insn 756: point = 33
   Insn 915: point = 33
   Insn 755: point = 34
   Insn 914: point = 35
   Insn 754: point = 36
   Insn 753: point = 37
   Insn 752: point = 39
   Insn 751: point = 40
   Insn 750: point = 41
   Insn 913: point = 41
   Insn 749: point = 42
   Insn 912: point = 43
   Insn 748: point = 44
   Insn 747: point = 45
   Insn 746: point = 47
   Insn 745: point = 48
   Insn 744: point = 49
   Insn 911: point = 49
   Insn 743: point = 50
   Insn 910: point = 51
   Insn 742: point = 52
   Insn 741: point = 53
  BB 3
   Insn 14: point = 54
   Insn 13: point = 54
  BB 25
   Insn 799: point = 54
   Insn 735: point = 54
  BB 23
   Insn 714: point = 54
   Insn 713: point = 54
   Insn 712: point = 55
   Insn 711: point = 57
  BB 24
   Insn 797: point = 58
   Insn 729: point = 58
   Insn 728: point = 58
   Insn 727: point = 59
   Insn 726: point = 61
   Insn 725: point = 62
   Insn 724: point = 64
   Insn 723: point = 65
   Insn 722: point = 67
   Insn 721: point = 69
   Insn 720: point = 71
   Insn 719: point = 72
   Insn 718: point = 72
   Insn 717: point = 73
   Insn 716: point = 75
  BB 22
   Insn 709: point = 76
   Insn 708: point = 76
   Insn 707: point = 77
   Insn 706: point = 79
   Insn 705: point = 80
   Insn 704: point = 82
   Insn 703: point = 84
   Insn 702: point = 86
   Insn 701: point = 87
   Insn 700: point = 87
   Insn 699: point = 88
   Insn 698: point = 90
   Insn 697: point = 91
   Insn 696: point = 92
   Insn 695: point = 94
   Insn 694: point = 95
   Insn 693: point = 97
   Insn 692: point = 99
   Insn 691: point = 101
   Insn 690: point = 102
   Insn 689: point = 102
   Insn 688: point = 103
   Insn 687: point = 105
   Insn 686: point = 106
   Insn 685: point = 107
   Insn 684: point = 109
   Insn 683: point = 110
   Insn 682: point = 112
   Insn 681: point = 114
   Insn 680: point = 116
   Insn 679: point = 117
   Insn 678: point = 117
   Insn 677: point = 118
   Insn 676: point = 120
   Insn 675: point = 121
   Insn 674: point = 122
   Insn 673: point = 124
   Insn 672: point = 125
   Insn 671: point = 127
   Insn 670: point = 129
   Insn 669: point = 131
   Insn 668: point = 132
   Insn 667: point = 132
   Insn 666: point = 133
   Insn 665: point = 135
   Insn 664: point = 136
   Insn 663: point = 137
   Insn 662: point = 138
   Insn 661: point = 140
   Insn 909: point = 141
	Hard reg 1 is preferable by r611 with profit 1
   Insn 660: point = 143
   Insn 908: point = 143
	Hard reg 1 is preferable by r611 with profit 1
	Hard reg 0 is preferable by r611 with profit 1
   Insn 659: point = 145
   Insn 658: point = 147
   Insn 657: point = 148
   Insn 656: point = 149
   Insn 655: point = 150
   Insn 654: point = 152
   Insn 907: point = 153
	Hard reg 1 is preferable by r610 with profit 1
   Insn 653: point = 155
   Insn 906: point = 155
	Hard reg 1 is preferable by r610 with profit 1
	Hard reg 0 is preferable by r610 with profit 1
   Insn 652: point = 157
   Insn 651: point = 159
   Insn 650: point = 160
   Insn 649: point = 161
   Insn 648: point = 162
   Insn 647: point = 164
   Insn 905: point = 165
	Hard reg 1 is preferable by r609 with profit 1
   Insn 646: point = 167
   Insn 904: point = 167
	Hard reg 1 is preferable by r609 with profit 1
	Hard reg 0 is preferable by r609 with profit 1
   Insn 645: point = 169
   Insn 644: point = 171
   Insn 643: point = 172
   Insn 642: point = 173
   Insn 641: point = 174
   Insn 640: point = 176
   Insn 903: point = 177
	Hard reg 1 is preferable by r608 with profit 1
   Insn 639: point = 179
   Insn 902: point = 179
	Hard reg 1 is preferable by r608 with profit 1
	Hard reg 0 is preferable by r608 with profit 1
   Insn 638: point = 181
   Insn 637: point = 183
   Insn 636: point = 184
   Insn 635: point = 185
   Insn 634: point = 187
   Insn 901: point = 188
	Hard reg 1 is preferable by r607 with profit 1
   Insn 633: point = 190
   Insn 900: point = 190
	Hard reg 1 is preferable by r607 with profit 1
	Hard reg 0 is preferable by r607 with profit 1
   Insn 632: point = 192
   Insn 631: point = 194
   Insn 630: point = 195
   Insn 629: point = 196
   Insn 628: point = 198
   Insn 899: point = 199
	Hard reg 1 is preferable by r606 with profit 1
   Insn 627: point = 201
   Insn 898: point = 201
	Hard reg 1 is preferable by r606 with profit 1
	Hard reg 0 is preferable by r606 with profit 1
   Insn 626: point = 203
   Insn 625: point = 205
   Insn 624: point = 206
   Insn 623: point = 207
   Insn 622: point = 209
   Insn 897: point = 210
	Hard reg 1 is preferable by r605 with profit 1
   Insn 621: point = 212
   Insn 896: point = 212
	Hard reg 1 is preferable by r605 with profit 1
	Hard reg 0 is preferable by r605 with profit 1
   Insn 620: point = 214
   Insn 619: point = 216
   Insn 618: point = 217
   Insn 617: point = 218
   Insn 616: point = 220
   Insn 895: point = 221
	Hard reg 1 is preferable by r604 with profit 1
   Insn 615: point = 223
   Insn 894: point = 223
	Hard reg 1 is preferable by r604 with profit 1
	Hard reg 0 is preferable by r604 with profit 1
   Insn 614: point = 225
   Insn 613: point = 227
   Insn 612: point = 228
   Insn 611: point = 229
   Insn 610: point = 231
   Insn 893: point = 232
	Hard reg 1 is preferable by r603 with profit 1
   Insn 609: point = 234
   Insn 892: point = 234
	Hard reg 1 is preferable by r603 with profit 1
	Hard reg 0 is preferable by r603 with profit 1
   Insn 608: point = 236
   Insn 607: point = 238
   Insn 606: point = 239
   Insn 605: point = 240
   Insn 604: point = 242
   Insn 891: point = 243
	Hard reg 1 is preferable by r602 with profit 1
   Insn 603: point = 245
   Insn 890: point = 245
	Hard reg 1 is preferable by r602 with profit 1
	Hard reg 0 is preferable by r602 with profit 1
   Insn 602: point = 247
   Insn 601: point = 249
   Insn 600: point = 250
   Insn 599: point = 251
   Insn 598: point = 253
   Insn 889: point = 254
	Hard reg 1 is preferable by r601 with profit 1
   Insn 597: point = 256
   Insn 888: point = 256
	Hard reg 1 is preferable by r601 with profit 1
	Hard reg 0 is preferable by r601 with profit 1
   Insn 596: point = 258
   Insn 595: point = 260
   Insn 594: point = 261
   Insn 593: point = 262
   Insn 592: point = 264
   Insn 887: point = 265
	Hard reg 1 is preferable by r600 with profit 1
   Insn 591: point = 267
   Insn 886: point = 267
	Hard reg 1 is preferable by r600 with profit 1
	Hard reg 0 is preferable by r600 with profit 1
   Insn 590: point = 269
   Insn 589: point = 271
   Insn 588: point = 272
   Insn 587: point = 273
   Insn 586: point = 275
   Insn 885: point = 276
	Hard reg 1 is preferable by r599 with profit 1
   Insn 585: point = 278
   Insn 884: point = 278
	Hard reg 1 is preferable by r599 with profit 1
	Hard reg 0 is preferable by r599 with profit 1
   Insn 584: point = 280
   Insn 583: point = 282
   Insn 582: point = 283
   Insn 581: point = 284
   Insn 580: point = 286
   Insn 883: point = 287
	Hard reg 1 is preferable by r598 with profit 1
   Insn 579: point = 289
   Insn 882: point = 289
	Hard reg 1 is preferable by r598 with profit 1
	Hard reg 0 is preferable by r598 with profit 1
   Insn 578: point = 291
   Insn 577: point = 293
   Insn 576: point = 294
   Insn 575: point = 295
   Insn 574: point = 297
   Insn 881: point = 298
	Hard reg 1 is preferable by r597 with profit 1
   Insn 573: point = 300
   Insn 880: point = 300
	Hard reg 1 is preferable by r597 with profit 1
	Hard reg 0 is preferable by r597 with profit 1
   Insn 572: point = 302
   Insn 571: point = 304
   Insn 570: point = 305
   Insn 569: point = 306
   Insn 568: point = 308
   Insn 879: point = 309
	Hard reg 1 is preferable by r596 with profit 1
   Insn 567: point = 311
   Insn 878: point = 311
	Hard reg 1 is preferable by r596 with profit 1
	Hard reg 0 is preferable by r596 with profit 1
   Insn 566: point = 313
   Insn 565: point = 315
   Insn 564: point = 316
   Insn 563: point = 317
   Insn 562: point = 319
   Insn 877: point = 320
	Hard reg 1 is preferable by r595 with profit 1
   Insn 561: point = 322
   Insn 876: point = 322
	Hard reg 1 is preferable by r595 with profit 1
	Hard reg 0 is preferable by r595 with profit 1
   Insn 560: point = 324
   Insn 559: point = 326
   Insn 558: point = 327
   Insn 557: point = 328
   Insn 556: point = 330
   Insn 875: point = 331
	Hard reg 1 is preferable by r594 with profit 1
   Insn 555: point = 333
   Insn 874: point = 333
	Hard reg 1 is preferable by r594 with profit 1
	Hard reg 0 is preferable by r594 with profit 1
   Insn 554: point = 335
   Insn 553: point = 337
   Insn 552: point = 338
   Insn 551: point = 339
   Insn 550: point = 341
   Insn 549: point = 342
   Insn 548: point = 344
   Insn 547: point = 346
   Insn 546: point = 348
   Insn 545: point = 349
   Insn 544: point = 349
   Insn 543: point = 349
   Insn 542: point = 349
   Insn 541: point = 350
   Insn 540: point = 352
   Insn 539: point = 353
   Insn 538: point = 354
   Insn 537: point = 356
   Insn 536: point = 357
   Insn 535: point = 359
   Insn 534: point = 361
   Insn 533: point = 363
   Insn 532: point = 364
   Insn 531: point = 364
   Insn 530: point = 364
   Insn 529: point = 364
   Insn 528: point = 365
   Insn 527: point = 367
   Insn 526: point = 368
   Insn 525: point = 369
   Insn 524: point = 371
   Insn 523: point = 372
   Insn 522: point = 374
   Insn 521: point = 376
   Insn 520: point = 378
   Insn 519: point = 379
   Insn 518: point = 379
   Insn 517: point = 379
   Insn 516: point = 379
   Insn 515: point = 380
   Insn 514: point = 382
   Insn 513: point = 383
   Insn 512: point = 384
   Insn 511: point = 386
   Insn 510: point = 387
   Insn 509: point = 389
   Insn 508: point = 391
   Insn 507: point = 393
   Insn 506: point = 394
   Insn 505: point = 394
   Insn 504: point = 394
   Insn 503: point = 394
   Insn 502: point = 395
   Insn 501: point = 397
   Insn 500: point = 398
   Insn 499: point = 399
   Insn 498: point = 401
   Insn 497: point = 402
   Insn 496: point = 404
   Insn 495: point = 406
   Insn 494: point = 408
   Insn 493: point = 409
   Insn 492: point = 409
   Insn 491: point = 409
   Insn 490: point = 409
   Insn 489: point = 410
   Insn 488: point = 412
   Insn 487: point = 413
   Insn 486: point = 414
   Insn 485: point = 415
   Insn 484: point = 417
   Insn 483: point = 418
   Insn 482: point = 420
   Insn 481: point = 422
   Insn 480: point = 424
   Insn 479: point = 425
   Insn 478: point = 425
   Insn 477: point = 425
   Insn 476: point = 425
   Insn 475: point = 426
   Insn 474: point = 428
   Insn 473: point = 429
   Insn 472: point = 430
   Insn 471: point = 432
   Insn 470: point = 433
   Insn 469: point = 435
   Insn 468: point = 437
   Insn 467: point = 439
   Insn 466: point = 440
   Insn 465: point = 440
   Insn 464: point = 440
   Insn 463: point = 440
   Insn 462: point = 441
   Insn 461: point = 443
   Insn 460: point = 444
   Insn 459: point = 445
   Insn 458: point = 447
   Insn 457: point = 448
   Insn 456: point = 450
   Insn 455: point = 452
   Insn 454: point = 454
   Insn 453: point = 455
   Insn 452: point = 455
   Insn 451: point = 455
   Insn 450: point = 455
   Insn 449: point = 456
   Insn 448: point = 458
   Insn 447: point = 459
   Insn 446: point = 460
   Insn 445: point = 462
   Insn 444: point = 463
   Insn 443: point = 465
   Insn 442: point = 467
   Insn 441: point = 469
   Insn 440: point = 470
   Insn 439: point = 470
   Insn 438: point = 470
   Insn 437: point = 470
   Insn 436: point = 471
   Insn 435: point = 473
   Insn 434: point = 474
   Insn 433: point = 475
   Insn 432: point = 477
   Insn 431: point = 478
   Insn 430: point = 480
   Insn 429: point = 482
   Insn 428: point = 484
   Insn 427: point = 485
   Insn 426: point = 485
   Insn 425: point = 485
   Insn 424: point = 485
   Insn 423: point = 486
   Insn 422: point = 488
   Insn 421: point = 489
   Insn 420: point = 490
   Insn 419: point = 491
   Insn 418: point = 493
   Insn 417: point = 494
   Insn 416: point = 496
   Insn 415: point = 498
   Insn 414: point = 500
   Insn 413: point = 501
   Insn 412: point = 501
   Insn 411: point = 501
   Insn 410: point = 501
   Insn 409: point = 502
   Insn 408: point = 504
   Insn 407: point = 505
   Insn 406: point = 506
   Insn 405: point = 508
   Insn 404: point = 509
   Insn 403: point = 511
   Insn 402: point = 513
   Insn 401: point = 515
   Insn 400: point = 516
   Insn 399: point = 516
   Insn 398: point = 516
   Insn 397: point = 516
   Insn 396: point = 517
   Insn 395: point = 519
   Insn 394: point = 520
   Insn 393: point = 521
   Insn 392: point = 523
   Insn 391: point = 524
   Insn 390: point = 526
   Insn 389: point = 528
   Insn 388: point = 530
   Insn 387: point = 531
   Insn 386: point = 531
   Insn 385: point = 531
   Insn 384: point = 531
   Insn 383: point = 532
   Insn 382: point = 534
   Insn 381: point = 535
   Insn 380: point = 536
   Insn 379: point = 538
   Insn 378: point = 539
   Insn 377: point = 541
   Insn 376: point = 543
   Insn 375: point = 545
   Insn 374: point = 546
   Insn 373: point = 546
   Insn 372: point = 546
   Insn 371: point = 546
   Insn 370: point = 547
   Insn 369: point = 549
   Insn 368: point = 550
   Insn 367: point = 551
   Insn 366: point = 553
   Insn 365: point = 554
   Insn 364: point = 556
   Insn 363: point = 558
   Insn 362: point = 560
   Insn 361: point = 561
   Insn 360: point = 561
   Insn 359: point = 561
   Insn 358: point = 561
   Insn 357: point = 562
   Insn 356: point = 564
   Insn 355: point = 565
   Insn 354: point = 566
   Insn 353: point = 568
   Insn 352: point = 569
   Insn 351: point = 571
   Insn 350: point = 573
   Insn 349: point = 575
   Insn 348: point = 576
   Insn 347: point = 576
   Insn 346: point = 576
   Insn 345: point = 576
   Insn 344: point = 577
   Insn 343: point = 579
   Insn 342: point = 580
   Insn 341: point = 581
   Insn 340: point = 582
   Insn 339: point = 584
   Insn 338: point = 585
   Insn 337: point = 587
   Insn 336: point = 589
   Insn 335: point = 591
   Insn 334: point = 592
   Insn 333: point = 592
   Insn 332: point = 592
   Insn 331: point = 592
   Insn 330: point = 593
   Insn 329: point = 595
   Insn 328: point = 596
   Insn 327: point = 597
   Insn 326: point = 599
   Insn 325: point = 600
   Insn 324: point = 602
   Insn 323: point = 604
   Insn 322: point = 606
   Insn 321: point = 607
   Insn 320: point = 607
   Insn 319: point = 607
   Insn 318: point = 607
   Insn 317: point = 608
   Insn 316: point = 610
   Insn 315: point = 611
   Insn 873: point = 612
   Insn 314: point = 613
   Insn 872: point = 614
   Insn 313: point = 615
   Insn 871: point = 616
   Insn 312: point = 617
   Insn 870: point = 618
   Insn 311: point = 619
   Insn 310: point = 620
   Insn 309: point = 622
   Insn 308: point = 624
   Insn 869: point = 625
	Hard reg 1 is preferable by r589 with profit 1
   Insn 307: point = 627
   Insn 868: point = 627
	Hard reg 1 is preferable by r589 with profit 1
	Hard reg 0 is preferable by r589 with profit 1
   Insn 306: point = 629
   Insn 305: point = 631
  BB 20
   Insn 289: point = 632
   Insn 288: point = 632
   Insn 287: point = 633
   Insn 286: point = 635
  BB 21
   Insn 795: point = 636
   Insn 299: point = 636
   Insn 298: point = 636
   Insn 297: point = 637
   Insn 296: point = 639
   Insn 295: point = 640
   Insn 294: point = 642
   Insn 867: point = 643
	Hard reg 1 is preferable by r588 with profit 1
   Insn 293: point = 645
   Insn 866: point = 645
	Hard reg 1 is preferable by r588 with profit 1
	Hard reg 0 is preferable by r588 with profit 1
   Insn 292: point = 647
   Insn 291: point = 649
  BB 19
   Insn 284: point = 650
   Insn 283: point = 650
   Insn 865: point = 651
   Insn 282: point = 652
   Insn 864: point = 653
   Insn 281: point = 654
   Insn 863: point = 655
   Insn 280: point = 656
   Insn 279: point = 657
   Insn 278: point = 659
   Insn 277: point = 661
   Insn 862: point = 662
	Hard reg 1 is preferable by r584 with profit 1
   Insn 276: point = 664
   Insn 861: point = 664
	Hard reg 1 is preferable by r584 with profit 1
	Hard reg 0 is preferable by r584 with profit 1
   Insn 275: point = 666
   Insn 274: point = 668
  BB 17
   Insn 258: point = 669
   Insn 257: point = 669
   Insn 256: point = 670
   Insn 255: point = 672
  BB 18
   Insn 793: point = 673
   Insn 268: point = 673
   Insn 267: point = 673
   Insn 266: point = 674
   Insn 265: point = 676
   Insn 264: point = 677
   Insn 263: point = 679
   Insn 860: point = 680
	Hard reg 1 is preferable by r583 with profit 1
   Insn 262: point = 682
   Insn 859: point = 682
	Hard reg 1 is preferable by r583 with profit 1
	Hard reg 0 is preferable by r583 with profit 1
   Insn 261: point = 684
   Insn 260: point = 686
  BB 16
   Insn 253: point = 687
   Insn 252: point = 687
   Insn 251: point = 688
   Insn 858: point = 688
   Insn 250: point = 689
   Insn 857: point = 690
   Insn 249: point = 691
   Insn 856: point = 692
   Insn 248: point = 693
   Insn 247: point = 694
   Insn 246: point = 696
   Insn 245: point = 698
   Insn 855: point = 699
	Hard reg 1 is preferable by r579 with profit 1
   Insn 244: point = 701
   Insn 854: point = 701
	Hard reg 1 is preferable by r579 with profit 1
	Hard reg 0 is preferable by r579 with profit 1
   Insn 243: point = 703
   Insn 242: point = 705
  BB 14
   Insn 226: point = 706
   Insn 225: point = 706
   Insn 224: point = 707
   Insn 223: point = 709
  BB 15
   Insn 791: point = 710
   Insn 236: point = 710
   Insn 235: point = 710
   Insn 234: point = 711
   Insn 233: point = 713
   Insn 232: point = 714
   Insn 231: point = 716
   Insn 853: point = 717
	Hard reg 1 is preferable by r578 with profit 1
   Insn 230: point = 719
   Insn 852: point = 719
	Hard reg 1 is preferable by r578 with profit 1
	Hard reg 0 is preferable by r578 with profit 1
   Insn 229: point = 721
   Insn 228: point = 723
  BB 13
   Insn 221: point = 724
   Insn 220: point = 724
   Insn 219: point = 725
   Insn 851: point = 725
   Insn 218: point = 726
   Insn 850: point = 727
   Insn 217: point = 728
   Insn 216: point = 729
   Insn 215: point = 731
   Insn 214: point = 733
   Insn 849: point = 734
	Hard reg 1 is preferable by r575 with profit 1
   Insn 213: point = 736
   Insn 848: point = 736
	Hard reg 1 is preferable by r575 with profit 1
	Hard reg 0 is preferable by r575 with profit 1
   Insn 212: point = 738
   Insn 211: point = 740
  BB 11
   Insn 195: point = 741
   Insn 194: point = 741
   Insn 193: point = 742
   Insn 192: point = 744
  BB 12
   Insn 789: point = 745
   Insn 205: point = 745
   Insn 204: point = 745
   Insn 203: point = 746
   Insn 202: point = 748
   Insn 201: point = 749
   Insn 200: point = 751
   Insn 847: point = 752
	Hard reg 1 is preferable by r574 with profit 1
   Insn 199: point = 754
   Insn 846: point = 754
	Hard reg 1 is preferable by r574 with profit 1
	Hard reg 0 is preferable by r574 with profit 1
   Insn 198: point = 756
   Insn 197: point = 758
  BB 10
   Insn 190: point = 759
   Insn 189: point = 759
   Insn 845: point = 760
   Insn 188: point = 761
   Insn 844: point = 762
   Insn 187: point = 763
   Insn 186: point = 764
   Insn 185: point = 766
   Insn 184: point = 768
   Insn 843: point = 769
	Hard reg 1 is preferable by r571 with profit 1
   Insn 183: point = 771
   Insn 842: point = 771
	Hard reg 1 is preferable by r571 with profit 1
	Hard reg 0 is preferable by r571 with profit 1
   Insn 182: point = 773
   Insn 181: point = 775
  BB 8
   Insn 165: point = 776
   Insn 164: point = 776
   Insn 163: point = 777
   Insn 162: point = 779
  BB 9
   Insn 787: point = 780
   Insn 175: point = 780
   Insn 174: point = 780
   Insn 173: point = 781
   Insn 172: point = 783
   Insn 171: point = 784
   Insn 170: point = 786
   Insn 841: point = 787
	Hard reg 1 is preferable by r570 with profit 1
   Insn 169: point = 789
   Insn 840: point = 789
	Hard reg 1 is preferable by r570 with profit 1
	Hard reg 0 is preferable by r570 with profit 1
   Insn 168: point = 791
   Insn 167: point = 793
  BB 7
   Insn 160: point = 794
  BB 5
   Insn 144: point = 794
   Insn 143: point = 794
   Insn 142: point = 795
   Insn 141: point = 797
  BB 6
   Insn 785: point = 798
   Insn 154: point = 798
   Insn 153: point = 798
   Insn 152: point = 799
   Insn 151: point = 801
   Insn 150: point = 802
   Insn 149: point = 804
   Insn 839: point = 805
	Hard reg 1 is preferable by r569 with profit 1
   Insn 148: point = 807
   Insn 838: point = 807
	Hard reg 1 is preferable by r569 with profit 1
	Hard reg 0 is preferable by r569 with profit 1
   Insn 147: point = 809
   Insn 146: point = 811
  BB 4
   Insn 139: point = 812
   Insn 138: point = 812
   Insn 137: point = 813
   Insn 136: point = 815
   Insn 837: point = 816
	Hard reg 1 is preferable by r568 with profit 1
   Insn 135: point = 818
   Insn 836: point = 818
	Hard reg 1 is preferable by r568 with profit 1
	Hard reg 0 is preferable by r568 with profit 1
   Insn 134: point = 820
   Insn 133: point = 822
   Insn 132: point = 823
   Insn 131: point = 824
   Insn 130: point = 825
   Insn 129: point = 827
   Insn 835: point = 828
	Hard reg 1 is preferable by r567 with profit 1
   Insn 128: point = 830
   Insn 834: point = 830
	Hard reg 1 is preferable by r567 with profit 1
	Hard reg 0 is preferable by r567 with profit 1
   Insn 127: point = 832
   Insn 126: point = 834
   Insn 125: point = 835
   Insn 124: point = 836
   Insn 123: point = 837
   Insn 122: point = 839
   Insn 833: point = 840
	Hard reg 1 is preferable by r566 with profit 1
   Insn 121: point = 842
   Insn 832: point = 842
	Hard reg 1 is preferable by r566 with profit 1
	Hard reg 0 is preferable by r566 with profit 1
   Insn 120: point = 844
   Insn 119: point = 846
   Insn 118: point = 847
   Insn 117: point = 848
   Insn 116: point = 849
   Insn 115: point = 851
   Insn 831: point = 852
	Hard reg 1 is preferable by r565 with profit 1
   Insn 114: point = 854
   Insn 830: point = 854
	Hard reg 1 is preferable by r565 with profit 1
	Hard reg 0 is preferable by r565 with profit 1
   Insn 113: point = 856
   Insn 112: point = 858
   Insn 111: point = 859
   Insn 110: point = 860
   Insn 109: point = 861
   Insn 108: point = 863
   Insn 829: point = 864
	Hard reg 1 is preferable by r564 with profit 1
   Insn 107: point = 866
   Insn 828: point = 866
	Hard reg 1 is preferable by r564 with profit 1
	Hard reg 0 is preferable by r564 with profit 1
   Insn 106: point = 868
   Insn 105: point = 870
   Insn 104: point = 871
   Insn 103: point = 872
   Insn 102: point = 873
   Insn 101: point = 875
   Insn 827: point = 876
	Hard reg 1 is preferable by r563 with profit 1
   Insn 100: point = 878
   Insn 826: point = 878
	Hard reg 1 is preferable by r563 with profit 1
	Hard reg 0 is preferable by r563 with profit 1
   Insn 99: point = 880
   Insn 98: point = 882
   Insn 97: point = 883
   Insn 96: point = 884
   Insn 95: point = 885
   Insn 94: point = 887
   Insn 825: point = 888
	Hard reg 1 is preferable by r562 with profit 1
   Insn 93: point = 890
   Insn 824: point = 890
	Hard reg 1 is preferable by r562 with profit 1
	Hard reg 0 is preferable by r562 with profit 1
   Insn 92: point = 892
   Insn 91: point = 894
   Insn 90: point = 895
   Insn 89: point = 896
   Insn 88: point = 897
   Insn 87: point = 899
   Insn 823: point = 900
	Hard reg 1 is preferable by r561 with profit 1
   Insn 86: point = 902
   Insn 822: point = 902
	Hard reg 1 is preferable by r561 with profit 1
	Hard reg 0 is preferable by r561 with profit 1
   Insn 85: point = 904
   Insn 84: point = 906
   Insn 83: point = 907
   Insn 82: point = 908
   Insn 81: point = 909
   Insn 80: point = 911
   Insn 821: point = 912
	Hard reg 1 is preferable by r560 with profit 1
   Insn 79: point = 914
   Insn 820: point = 914
	Hard reg 1 is preferable by r560 with profit 1
	Hard reg 0 is preferable by r560 with profit 1
   Insn 78: point = 916
   Insn 77: point = 918
   Insn 76: point = 919
   Insn 75: point = 920
   Insn 74: point = 921
   Insn 73: point = 923
   Insn 819: point = 924
	Hard reg 1 is preferable by r559 with profit 1
   Insn 72: point = 926
   Insn 818: point = 926
	Hard reg 1 is preferable by r559 with profit 1
	Hard reg 0 is preferable by r559 with profit 1
   Insn 71: point = 928
   Insn 70: point = 930
   Insn 69: point = 931
   Insn 68: point = 932
   Insn 67: point = 933
   Insn 66: point = 935
   Insn 817: point = 936
	Hard reg 1 is preferable by r558 with profit 1
   Insn 65: point = 938
   Insn 816: point = 938
	Hard reg 1 is preferable by r558 with profit 1
	Hard reg 0 is preferable by r558 with profit 1
   Insn 64: point = 940
   Insn 63: point = 942
   Insn 62: point = 943
   Insn 61: point = 944
   Insn 60: point = 945
   Insn 59: point = 947
   Insn 815: point = 948
	Hard reg 1 is preferable by r557 with profit 1
   Insn 58: point = 950
   Insn 814: point = 950
	Hard reg 1 is preferable by r557 with profit 1
	Hard reg 0 is preferable by r557 with profit 1
   Insn 57: point = 952
   Insn 56: point = 954
   Insn 55: point = 955
   Insn 54: point = 956
   Insn 53: point = 957
   Insn 52: point = 959
   Insn 813: point = 960
	Hard reg 1 is preferable by r556 with profit 1
   Insn 51: point = 962
   Insn 812: point = 962
	Hard reg 1 is preferable by r556 with profit 1
	Hard reg 0 is preferable by r556 with profit 1
   Insn 50: point = 964
   Insn 49: point = 966
   Insn 48: point = 967
   Insn 47: point = 968
   Insn 46: point = 969
   Insn 45: point = 971
   Insn 811: point = 972
	Hard reg 1 is preferable by r555 with profit 1
   Insn 44: point = 974
   Insn 810: point = 974
	Hard reg 1 is preferable by r555 with profit 1
	Hard reg 0 is preferable by r555 with profit 1
   Insn 43: point = 976
   Insn 42: point = 978
   Insn 41: point = 979
   Insn 40: point = 980
   Insn 39: point = 982
   Insn 809: point = 983
	Hard reg 1 is preferable by r554 with profit 1
   Insn 38: point = 985
   Insn 808: point = 985
	Hard reg 1 is preferable by r554 with profit 1
	Hard reg 0 is preferable by r554 with profit 1
   Insn 37: point = 987
   Insn 36: point = 989
   Insn 35: point = 990
   Insn 34: point = 991
   Insn 33: point = 993
   Insn 807: point = 994
	Hard reg 1 is preferable by r553 with profit 1
   Insn 32: point = 996
   Insn 806: point = 996
	Hard reg 1 is preferable by r553 with profit 1
	Hard reg 0 is preferable by r553 with profit 1
   Insn 31: point = 998
   Insn 30: point = 1000
   Insn 29: point = 1001
   Insn 28: point = 1002
   Insn 27: point = 1003
   Insn 26: point = 1005
   Insn 805: point = 1006
	Hard reg 1 is preferable by r552 with profit 1
   Insn 25: point = 1008
   Insn 804: point = 1008
	Hard reg 1 is preferable by r552 with profit 1
	Hard reg 0 is preferable by r552 with profit 1
   Insn 24: point = 1010
   Insn 23: point = 1012
   Insn 22: point = 1013
   Insn 21: point = 1014
   Insn 20: point = 1015
   Insn 19: point = 1017
   Insn 803: point = 1018
	Hard reg 1 is preferable by r551 with profit 1
   Insn 18: point = 1020
   Insn 802: point = 1020
	Hard reg 1 is preferable by r551 with profit 1
	Hard reg 0 is preferable by r551 with profit 1
   Insn 17: point = 1022
   Insn 16: point = 1024
  BB 2
   Insn 11: point = 1025
   Insn 7: point = 1025
   Insn 6: point = 1025
   Insn 5: point = 1025
   Insn 4: point = 1025
   Insn 3: point = 1025
   Insn 2: point = 1025
 r87: [1021..1022]
 r88: [1016..1018]
 r89: [1013..1015]
 r90: [1009..1010]
 r91: [1004..1006]
 r92: [1001..1003]
 r93: [997..998]
 r94: [992..994]
 r95: [990..991]
 r96: [986..987]
 r97: [981..983]
 r98: [979..980]
 r99: [975..976]
 r100: [970..972]
 r101: [967..969]
 r102: [963..964]
 r103: [958..960]
 r104: [955..957]
 r105: [951..952]
 r106: [946..948]
 r107: [943..945]
 r108: [939..940]
 r109: [934..936]
 r110: [931..933]
 r111: [927..928]
 r112: [922..924]
 r113: [919..921]
 r114: [915..916]
 r115: [910..912]
 r116: [907..909]
 r117: [903..904]
 r118: [898..900]
 r119: [895..897]
 r120: [891..892]
 r121: [886..888]
 r122: [883..885]
 r123: [879..880]
 r124: [874..876]
 r125: [871..873]
 r126: [867..868]
 r127: [862..864]
 r128: [859..861]
 r129: [855..856]
 r130: [850..852]
 r131: [847..849]
 r132: [843..844]
 r133: [838..840]
 r134: [835..837]
 r135: [831..832]
 r136: [826..828]
 r137: [823..825]
 r138: [819..820]
 r139: [814..816]
 r140: [812..813]
 r141: [794..795]
 r142: [808..809]
 r143: [803..805]
 r144: [798..802]
 r145: [776..777]
 r146: [790..791]
 r147: [785..787]
 r148: [780..784]
 r149: [772..773]
 r150: [767..769]
 r151: [765..766]
 r152: [759..764]
 r153: [741..742]
 r154: [755..756]
 r155: [750..752]
 r156: [745..749]
 r157: [737..738]
 r158: [732..734]
 r159: [730..731]
 r160: [724..729]
 r161: [706..707]
 r162: [720..721]
 r163: [715..717]
 r164: [710..714]
 r165: [702..703]
 r166: [697..699]
 r167: [695..696]
 r168: [687..694]
 r169: [669..670]
 r170: [683..684]
 r171: [678..680]
 r172: [673..677]
 r173: [665..666]
 r174: [660..662]
 r175: [658..659]
 r176: [650..657]
 r177: [632..633]
 r178: [646..647]
 r179: [641..643]
 r180: [636..640]
 r181: [628..629]
 r182: [623..625]
 r183: [621..622]
 r184: [611..620]
 r185: [606..608]
 r186: [598..600]
 r187: [596..597]
 r188: [591..593]
 r189: [583..585]
 r190: [580..582]
 r191: [575..577]
 r192: [567..569]
 r193: [565..566]
 r194: [560..562]
 r195: [552..554]
 r196: [550..551]
 r197: [545..547]
 r198: [537..539]
 r199: [535..536]
 r200: [530..532]
 r201: [522..524]
 r202: [520..521]
 r203: [515..517]
 r204: [507..509]
 r205: [505..506]
 r206: [500..502]
 r207: [492..494]
 r208: [489..491]
 r209: [484..486]
 r210: [476..478]
 r211: [474..475]
 r212: [469..471]
 r213: [461..463]
 r214: [459..460]
 r215: [454..456]
 r216: [446..448]
 r217: [444..445]
 r218: [439..441]
 r219: [431..433]
 r220: [429..430]
 r221: [424..426]
 r222: [416..418]
 r223: [413..415]
 r224: [408..410]
 r225: [400..402]
 r226: [398..399]
 r227: [393..395]
 r228: [385..387]
 r229: [383..384]
 r230: [378..380]
 r231: [370..372]
 r232: [368..369]
 r233: [363..365]
 r234: [355..357]
 r235: [353..354]
 r236: [348..350]
 r237: [340..342]
 r238: [338..339]
 r239: [334..335]
 r240: [329..331]
 r241: [327..328]
 r242: [323..324]
 r243: [318..320]
 r244: [316..317]
 r245: [312..313]
 r246: [307..309]
 r247: [305..306]
 r248: [301..302]
 r249: [296..298]
 r250: [294..295]
 r251: [290..291]
 r252: [285..287]
 r253: [283..284]
 r254: [279..280]
 r255: [274..276]
 r256: [272..273]
 r257: [268..269]
 r258: [263..265]
 r259: [261..262]
 r260: [257..258]
 r261: [252..254]
 r262: [250..251]
 r263: [246..247]
 r264: [241..243]
 r265: [239..240]
 r266: [235..236]
 r267: [230..232]
 r268: [228..229]
 r269: [224..225]
 r270: [219..221]
 r271: [217..218]
 r272: [213..214]
 r273: [208..210]
 r274: [206..207]
 r275: [202..203]
 r276: [197..199]
 r277: [195..196]
 r278: [191..192]
 r279: [186..188]
 r280: [184..185]
 r281: [180..181]
 r282: [175..177]
 r283: [172..174]
 r284: [168..169]
 r285: [163..165]
 r286: [160..162]
 r287: [156..157]
 r288: [151..153]
 r289: [148..150]
 r290: [144..145]
 r291: [139..141]
 r292: [136..138]
 r293: [131..133]
 r294: [123..125]
 r295: [121..122]
 r296: [116..118]
 r297: [108..110]
 r298: [106..107]
 r299: [101..103]
 r300: [93..95]
 r301: [91..92]
 r302: [86..88]
 r303: [78..80]
 r304: [76..77]
 r305: [54..55]
 r306: [71..73]
 r307: [63..65]
 r308: [58..62]
 r309: [48..53]
 r310: [40..45]
 r311: [32..37]
 r312: [24..29]
 r313: [16..21]
 r314: [8..13]
 r315: [0..5]
 r316: [1023..1024]
 r317: [1016..1017]
 r318: [1013..1014]
 r319: [1011..1012]
 r320: [1004..1005]
 r321: [1001..1002]
 r322: [999..1000]
 r323: [992..993]
 r324: [988..989]
 r325: [981..982]
 r326: [977..978]
 r327: [970..971]
 r328: [967..968]
 r329: [965..966]
 r330: [958..959]
 r331: [955..956]
 r332: [953..954]
 r333: [946..947]
 r334: [943..944]
 r335: [941..942]
 r336: [934..935]
 r337: [931..932]
 r338: [929..930]
 r339: [922..923]
 r340: [919..920]
 r341: [917..918]
 r342: [910..911]
 r343: [907..908]
 r344: [905..906]
 r345: [898..899]
 r346: [895..896]
 r347: [893..894]
 r348: [886..887]
 r349: [883..884]
 r350: [881..882]
 r351: [874..875]
 r352: [871..872]
 r353: [869..870]
 r354: [862..863]
 r355: [859..860]
 r356: [857..858]
 r357: [850..851]
 r358: [847..848]
 r359: [845..846]
 r360: [838..839]
 r361: [835..836]
 r362: [833..834]
 r363: [826..827]
 r364: [823..824]
 r365: [821..822]
 r366: [814..815]
 r367: [796..797]
 r368: [810..811]
 r369: [803..804]
 r370: [798..799]
 r371: [800..801]
 r372: [778..779]
 r373: [792..793]
 r374: [785..786]
 r375: [780..781]
 r376: [782..783]
 r377: [774..775]
 r378: [767..768]
 r379: [743..744]
 r380: [757..758]
 r381: [750..751]
 r382: [745..746]
 r383: [747..748]
 r384: [739..740]
 r385: [732..733]
 r386: [708..709]
 r387: [722..723]
 r388: [715..716]
 r389: [710..711]
 r390: [712..713]
 r391: [704..705]
 r392: [697..698]
 r393: [671..672]
 r394: [685..686]
 r395: [678..679]
 r396: [673..674]
 r397: [675..676]
 r398: [667..668]
 r399: [660..661]
 r400: [634..635]
 r401: [648..649]
 r402: [641..642]
 r403: [636..637]
 r404: [638..639]
 r405: [630..631]
 r406: [623..624]
 r407: [609..610]
 r408: [605..607] [601..602]
 r409: [603..604]
 r410: [598..599]
 r411: [594..595]
 r412: [590..592] [586..587]
 r413: [588..589]
 r414: [583..584]
 r415: [580..581]
 r416: [578..579]
 r417: [574..576] [570..571]
 r418: [572..573]
 r419: [567..568]
 r420: [563..564]
 r421: [559..561] [555..556]
 r422: [557..558]
 r423: [552..553]
 r424: [548..549]
 r425: [544..546] [540..541]
 r426: [542..543]
 r427: [537..538]
 r428: [533..534]
 r429: [529..531] [525..526]
 r430: [527..528]
 r431: [522..523]
 r432: [518..519]
 r433: [514..516] [510..511]
 r434: [512..513]
 r435: [507..508]
 r436: [503..504]
 r437: [499..501] [495..496]
 r438: [497..498]
 r439: [492..493]
 r440: [489..490]
 r441: [487..488]
 r442: [483..485] [479..480]
 r443: [481..482]
 r444: [476..477]
 r445: [472..473]
 r446: [468..470] [464..465]
 r447: [466..467]
 r448: [461..462]
 r449: [457..458]
 r450: [453..455] [449..450]
 r451: [451..452]
 r452: [446..447]
 r453: [442..443]
 r454: [438..440] [434..435]
 r455: [436..437]
 r456: [431..432]
 r457: [427..428]
 r458: [423..425] [419..420]
 r459: [421..422]
 r460: [416..417]
 r461: [413..414]
 r462: [411..412]
 r463: [407..409] [403..404]
 r464: [405..406]
 r465: [400..401]
 r466: [396..397]
 r467: [392..394] [388..389]
 r468: [390..391]
 r469: [385..386]
 r470: [381..382]
 r471: [377..379] [373..374]
 r472: [375..376]
 r473: [370..371]
 r474: [366..367]
 r475: [362..364] [358..359]
 r476: [360..361]
 r477: [355..356]
 r478: [351..352]
 r479: [347..349] [343..344]
 r480: [345..346]
 r481: [340..341]
 r482: [336..337]
 r483: [329..330]
 r484: [325..326]
 r485: [318..319]
 r486: [314..315]
 r487: [307..308]
 r488: [303..304]
 r489: [296..297]
 r490: [292..293]
 r491: [285..286]
 r492: [281..282]
 r493: [274..275]
 r494: [270..271]
 r495: [263..264]
 r496: [259..260]
 r497: [252..253]
 r498: [248..249]
 r499: [241..242]
 r500: [237..238]
 r501: [230..231]
 r502: [226..227]
 r503: [219..220]
 r504: [215..216]
 r505: [208..209]
 r506: [204..205]
 r507: [197..198]
 r508: [193..194]
 r509: [186..187]
 r510: [182..183]
 r511: [175..176]
 r512: [172..173]
 r513: [170..171]
 r514: [163..164]
 r515: [160..161]
 r516: [158..159]
 r517: [151..152]
 r518: [148..149]
 r519: [146..147]
 r520: [139..140]
 r521: [136..137]
 r522: [134..135]
 r523: [130..132] [126..127]
 r524: [128..129]
 r525: [123..124]
 r526: [119..120]
 r527: [115..117] [111..112]
 r528: [113..114]
 r529: [108..109]
 r530: [104..105]
 r531: [100..102] [96..97]
 r532: [98..99]
 r533: [93..94]
 r534: [89..90]
 r535: [85..87] [81..82]
 r536: [83..84]
 r537: [78..79]
 r538: [56..57]
 r539: [74..75]
 r540: [70..72] [66..67]
 r541: [68..69]
 r542: [63..64]
 r543: [58..59]
 r544: [60..61]
 r545: [46..47]
 r546: [38..39]
 r547: [30..31]
 r548: [22..23]
 r549: [14..15]
 r550: [6..7]
 r551: [1019..1020]
 r552: [1007..1008]
 r553: [995..996]
 r554: [984..985]
 r555: [973..974]
 r556: [961..962]
 r557: [949..950]
 r558: [937..938]
 r559: [925..926]
 r560: [913..914]
 r561: [901..902]
 r562: [889..890]
 r563: [877..878]
 r564: [865..866]
 r565: [853..854]
 r566: [841..842]
 r567: [829..830]
 r568: [817..818]
 r569: [806..807]
 r570: [788..789]
 r571: [770..771]
 r572: [762..763]
 r573: [760..761]
 r574: [753..754]
 r575: [735..736]
 r576: [727..728]
 r577: [725..726]
 r578: [718..719]
 r579: [700..701]
 r580: [692..693]
 r581: [690..691]
 r582: [688..689]
 r583: [681..682]
 r584: [663..664]
 r585: [655..656]
 r586: [653..654]
 r587: [651..652]
 r588: [644..645]
 r589: [626..627]
 r590: [618..619]
 r591: [616..617]
 r592: [614..615]
 r593: [612..613]
 r594: [332..333]
 r595: [321..322]
 r596: [310..311]
 r597: [299..300]
 r598: [288..289]
 r599: [277..278]
 r600: [266..267]
 r601: [255..256]
 r602: [244..245]
 r603: [233..234]
 r604: [222..223]
 r605: [211..212]
 r606: [200..201]
 r607: [189..190]
 r608: [178..179]
 r609: [166..167]
 r610: [154..155]
 r611: [142..143]
 r612: [51..52]
 r613: [49..50]
 r614: [43..44]
 r615: [41..42]
 r616: [35..36]
 r617: [33..34]
 r618: [27..28]
 r619: [25..26]
 r620: [19..20]
 r621: [17..18]
 r622: [11..12]
 r623: [9..10]
 r624: [3..4]
 r625: [1..2]
Compressing live ranges: from 1025 to 856 - 83%
Ranges after the compression:
 r87: [852..853]
 r88: [848..849]
 r89: [846..847]
 r90: [842..843]
 r91: [838..839]
 r92: [836..837]
 r93: [832..833]
 r94: [828..829]
 r95: [826..827]
 r96: [822..823]
 r97: [818..819]
 r98: [816..817]
 r99: [812..813]
 r100: [808..809]
 r101: [806..807]
 r102: [802..803]
 r103: [798..799]
 r104: [796..797]
 r105: [792..793]
 r106: [788..789]
 r107: [786..787]
 r108: [782..783]
 r109: [778..779]
 r110: [776..777]
 r111: [772..773]
 r112: [768..769]
 r113: [766..767]
 r114: [762..763]
 r115: [758..759]
 r116: [756..757]
 r117: [752..753]
 r118: [748..749]
 r119: [746..747]
 r120: [742..743]
 r121: [738..739]
 r122: [736..737]
 r123: [732..733]
 r124: [728..729]
 r125: [726..727]
 r126: [722..723]
 r127: [718..719]
 r128: [716..717]
 r129: [712..713]
 r130: [708..709]
 r131: [706..707]
 r132: [702..703]
 r133: [698..699]
 r134: [696..697]
 r135: [692..693]
 r136: [688..689]
 r137: [686..687]
 r138: [682..683]
 r139: [678..679]
 r140: [676..677]
 r141: [660..661]
 r142: [672..673]
 r143: [668..669]
 r144: [664..667]
 r145: [644..645]
 r146: [656..657]
 r147: [652..653]
 r148: [648..651]
 r149: [640..641]
 r150: [636..637]
 r151: [634..635]
 r152: [630..633]
 r153: [614..615]
 r154: [626..627]
 r155: [622..623]
 r156: [618..621]
 r157: [610..611]
 r158: [606..607]
 r159: [604..605]
 r160: [600..603]
 r161: [584..585]
 r162: [596..597]
 r163: [592..593]
 r164: [588..591]
 r165: [580..581]
 r166: [576..577]
 r167: [574..575]
 r168: [568..573]
 r169: [552..553]
 r170: [564..565]
 r171: [560..561]
 r172: [556..559]
 r173: [548..549]
 r174: [544..545]
 r175: [542..543]
 r176: [536..541]
 r177: [520..521]
 r178: [532..533]
 r179: [528..529]
 r180: [524..527]
 r181: [516..517]
 r182: [512..513]
 r183: [510..511]
 r184: [502..509]
 r185: [498..499]
 r186: [492..493]
 r187: [490..491]
 r188: [486..487]
 r189: [480..481]
 r190: [478..479]
 r191: [474..475]
 r192: [468..469]
 r193: [466..467]
 r194: [462..463]
 r195: [456..457]
 r196: [454..455]
 r197: [450..451]
 r198: [444..445]
 r199: [442..443]
 r200: [438..439]
 r201: [432..433]
 r202: [430..431]
 r203: [426..427]
 r204: [420..421]
 r205: [418..419]
 r206: [414..415]
 r207: [408..409]
 r208: [406..407]
 r209: [402..403]
 r210: [396..397]
 r211: [394..395]
 r212: [390..391]
 r213: [384..385]
 r214: [382..383]
 r215: [378..379]
 r216: [372..373]
 r217: [370..371]
 r218: [366..367]
 r219: [360..361]
 r220: [358..359]
 r221: [354..355]
 r222: [348..349]
 r223: [346..347]
 r224: [342..343]
 r225: [336..337]
 r226: [334..335]
 r227: [330..331]
 r228: [324..325]
 r229: [322..323]
 r230: [318..319]
 r231: [312..313]
 r232: [310..311]
 r233: [306..307]
 r234: [300..301]
 r235: [298..299]
 r236: [294..295]
 r237: [288..289]
 r238: [286..287]
 r239: [282..283]
 r240: [278..279]
 r241: [276..277]
 r242: [272..273]
 r243: [268..269]
 r244: [266..267]
 r245: [262..263]
 r246: [258..259]
 r247: [256..257]
 r248: [252..253]
 r249: [248..249]
 r250: [246..247]
 r251: [242..243]
 r252: [238..239]
 r253: [236..237]
 r254: [232..233]
 r255: [228..229]
 r256: [226..227]
 r257: [222..223]
 r258: [218..219]
 r259: [216..217]
 r260: [212..213]
 r261: [208..209]
 r262: [206..207]
 r263: [202..203]
 r264: [198..199]
 r265: [196..197]
 r266: [192..193]
 r267: [188..189]
 r268: [186..187]
 r269: [182..183]
 r270: [178..179]
 r271: [176..177]
 r272: [172..173]
 r273: [168..169]
 r274: [166..167]
 r275: [162..163]
 r276: [158..159]
 r277: [156..157]
 r278: [152..153]
 r279: [148..149]
 r280: [146..147]
 r281: [142..143]
 r282: [138..139]
 r283: [136..137]
 r284: [132..133]
 r285: [128..129]
 r286: [126..127]
 r287: [122..123]
 r288: [118..119]
 r289: [116..117]
 r290: [112..113]
 r291: [108..109]
 r292: [106..107]
 r293: [102..103]
 r294: [96..97]
 r295: [94..95]
 r296: [90..91]
 r297: [84..85]
 r298: [82..83]
 r299: [78..79]
 r300: [72..73]
 r301: [70..71]
 r302: [66..67]
 r303: [60..61]
 r304: [58..59]
 r305: [40..41]
 r306: [54..55]
 r307: [48..49]
 r308: [44..47]
 r309: [36..39]
 r310: [30..33]
 r311: [24..27]
 r312: [18..21]
 r313: [12..15]
 r314: [6..9]
 r315: [0..3]
 r316: [854..855]
 r317: [848..849]
 r318: [846..847]
 r319: [844..845]
 r320: [838..839]
 r321: [836..837]
 r322: [834..835]
 r323: [828..829]
 r324: [824..825]
 r325: [818..819]
 r326: [814..815]
 r327: [808..809]
 r328: [806..807]
 r329: [804..805]
 r330: [798..799]
 r331: [796..797]
 r332: [794..795]
 r333: [788..789]
 r334: [786..787]
 r335: [784..785]
 r336: [778..779]
 r337: [776..777]
 r338: [774..775]
 r339: [768..769]
 r340: [766..767]
 r341: [764..765]
 r342: [758..759]
 r343: [756..757]
 r344: [754..755]
 r345: [748..749]
 r346: [746..747]
 r347: [744..745]
 r348: [738..739]
 r349: [736..737]
 r350: [734..735]
 r351: [728..729]
 r352: [726..727]
 r353: [724..725]
 r354: [718..719]
 r355: [716..717]
 r356: [714..715]
 r357: [708..709]
 r358: [706..707]
 r359: [704..705]
 r360: [698..699]
 r361: [696..697]
 r362: [694..695]
 r363: [688..689]
 r364: [686..687]
 r365: [684..685]
 r366: [678..679]
 r367: [662..663]
 r368: [674..675]
 r369: [668..669]
 r370: [664..665]
 r371: [666..667]
 r372: [646..647]
 r373: [658..659]
 r374: [652..653]
 r375: [648..649]
 r376: [650..651]
 r377: [642..643]
 r378: [636..637]
 r379: [616..617]
 r380: [628..629]
 r381: [622..623]
 r382: [618..619]
 r383: [620..621]
 r384: [612..613]
 r385: [606..607]
 r386: [586..587]
 r387: [598..599]
 r388: [592..593]
 r389: [588..589]
 r390: [590..591]
 r391: [582..583]
 r392: [576..577]
 r393: [554..555]
 r394: [566..567]
 r395: [560..561]
 r396: [556..557]
 r397: [558..559]
 r398: [550..551]
 r399: [544..545]
 r400: [522..523]
 r401: [534..535]
 r402: [528..529]
 r403: [524..525]
 r404: [526..527]
 r405: [518..519]
 r406: [512..513]
 r407: [500..501]
 r408: [498..499] [494..495]
 r409: [496..497]
 r410: [492..493]
 r411: [488..489]
 r412: [486..487] [482..483]
 r413: [484..485]
 r414: [480..481]
 r415: [478..479]
 r416: [476..477]
 r417: [474..475] [470..471]
 r418: [472..473]
 r419: [468..469]
 r420: [464..465]
 r421: [462..463] [458..459]
 r422: [460..461]
 r423: [456..457]
 r424: [452..453]
 r425: [450..451] [446..447]
 r426: [448..449]
 r427: [444..445]
 r428: [440..441]
 r429: [438..439] [434..435]
 r430: [436..437]
 r431: [432..433]
 r432: [428..429]
 r433: [426..427] [422..423]
 r434: [424..425]
 r435: [420..421]
 r436: [416..417]
 r437: [414..415] [410..411]
 r438: [412..413]
 r439: [408..409]
 r440: [406..407]
 r441: [404..405]
 r442: [402..403] [398..399]
 r443: [400..401]
 r444: [396..397]
 r445: [392..393]
 r446: [390..391] [386..387]
 r447: [388..389]
 r448: [384..385]
 r449: [380..381]
 r450: [378..379] [374..375]
 r451: [376..377]
 r452: [372..373]
 r453: [368..369]
 r454: [366..367] [362..363]
 r455: [364..365]
 r456: [360..361]
 r457: [356..357]
 r458: [354..355] [350..351]
 r459: [352..353]
 r460: [348..349]
 r461: [346..347]
 r462: [344..345]
 r463: [342..343] [338..339]
 r464: [340..341]
 r465: [336..337]
 r466: [332..333]
 r467: [330..331] [326..327]
 r468: [328..329]
 r469: [324..325]
 r470: [320..321]
 r471: [318..319] [314..315]
 r472: [316..317]
 r473: [312..313]
 r474: [308..309]
 r475: [306..307] [302..303]
 r476: [304..305]
 r477: [300..301]
 r478: [296..297]
 r479: [294..295] [290..291]
 r480: [292..293]
 r481: [288..289]
 r482: [284..285]
 r483: [278..279]
 r484: [274..275]
 r485: [268..269]
 r486: [264..265]
 r487: [258..259]
 r488: [254..255]
 r489: [248..249]
 r490: [244..245]
 r491: [238..239]
 r492: [234..235]
 r493: [228..229]
 r494: [224..225]
 r495: [218..219]
 r496: [214..215]
 r497: [208..209]
 r498: [204..205]
 r499: [198..199]
 r500: [194..195]
 r501: [188..189]
 r502: [184..185]
 r503: [178..179]
 r504: [174..175]
 r505: [168..169]
 r506: [164..165]
 r507: [158..159]
 r508: [154..155]
 r509: [148..149]
 r510: [144..145]
 r511: [138..139]
 r512: [136..137]
 r513: [134..135]
 r514: [128..129]
 r515: [126..127]
 r516: [124..125]
 r517: [118..119]
 r518: [116..117]
 r519: [114..115]
 r520: [108..109]
 r521: [106..107]
 r522: [104..105]
 r523: [102..103] [98..99]
 r524: [100..101]
 r525: [96..97]
 r526: [92..93]
 r527: [90..91] [86..87]
 r528: [88..89]
 r529: [84..85]
 r530: [80..81]
 r531: [78..79] [74..75]
 r532: [76..77]
 r533: [72..73]
 r534: [68..69]
 r535: [66..67] [62..63]
 r536: [64..65]
 r537: [60..61]
 r538: [42..43]
 r539: [56..57]
 r540: [54..55] [50..51]
 r541: [52..53]
 r542: [48..49]
 r543: [44..45]
 r544: [46..47]
 r545: [34..35]
 r546: [28..29]
 r547: [22..23]
 r548: [16..17]
 r549: [10..11]
 r550: [4..5]
 r551: [850..851]
 r552: [840..841]
 r553: [830..831]
 r554: [820..821]
 r555: [810..811]
 r556: [800..801]
 r557: [790..791]
 r558: [780..781]
 r559: [770..771]
 r560: [760..761]
 r561: [750..751]
 r562: [740..741]
 r563: [730..731]
 r564: [720..721]
 r565: [710..711]
 r566: [700..701]
 r567: [690..691]
 r568: [680..681]
 r569: [670..671]
 r570: [654..655]
 r571: [638..639]
 r572: [632..633]
 r573: [630..631]
 r574: [624..625]
 r575: [608..609]
 r576: [602..603]
 r577: [600..601]
 r578: [594..595]
 r579: [578..579]
 r580: [572..573]
 r581: [570..571]
 r582: [568..569]
 r583: [562..563]
 r584: [546..547]
 r585: [540..541]
 r586: [538..539]
 r587: [536..537]
 r588: [530..531]
 r589: [514..515]
 r590: [508..509]
 r591: [506..507]
 r592: [504..505]
 r593: [502..503]
 r594: [280..281]
 r595: [270..271]
 r596: [260..261]
 r597: [250..251]
 r598: [240..241]
 r599: [230..231]
 r600: [220..221]
 r601: [210..211]
 r602: [200..201]
 r603: [190..191]
 r604: [180..181]
 r605: [170..171]
 r606: [160..161]
 r607: [150..151]
 r608: [140..141]
 r609: [130..131]
 r610: [120..121]
 r611: [110..111]
 r612: [38..39]
 r613: [36..37]
 r614: [32..33]
 r615: [30..31]
 r616: [26..27]
 r617: [24..25]
 r618: [20..21]
 r619: [18..19]
 r620: [14..15]
 r621: [12..13]
 r622: [8..9]
 r623: [6..7]
 r624: [2..3]
 r625: [0..1]

********** Assignment #1: **********

	 Assigning to 551 (cl=GENERAL_REGS, orig=88, freq=3, tfirst=551, tfreq=3)...
	   Assign 0 to reload r551 (freq=3)
	 Assigning to 552 (cl=GENERAL_REGS, orig=91, freq=3, tfirst=552, tfreq=3)...
	   Assign 0 to reload r552 (freq=3)
	 Assigning to 553 (cl=GENERAL_REGS, orig=94, freq=3, tfirst=553, tfreq=3)...
	   Assign 0 to reload r553 (freq=3)
	 Assigning to 554 (cl=GENERAL_REGS, orig=97, freq=3, tfirst=554, tfreq=3)...
	   Assign 0 to reload r554 (freq=3)
	 Assigning to 555 (cl=GENERAL_REGS, orig=100, freq=3, tfirst=555, tfreq=3)...
	   Assign 0 to reload r555 (freq=3)
	 Assigning to 556 (cl=GENERAL_REGS, orig=103, freq=3, tfirst=556, tfreq=3)...
	   Assign 0 to reload r556 (freq=3)
	 Assigning to 557 (cl=GENERAL_REGS, orig=106, freq=3, tfirst=557, tfreq=3)...
	   Assign 0 to reload r557 (freq=3)
	 Assigning to 558 (cl=GENERAL_REGS, orig=109, freq=3, tfirst=558, tfreq=3)...
	   Assign 0 to reload r558 (freq=3)
	 Assigning to 559 (cl=GENERAL_REGS, orig=112, freq=3, tfirst=559, tfreq=3)...
	   Assign 0 to reload r559 (freq=3)
	 Assigning to 560 (cl=GENERAL_REGS, orig=115, freq=3, tfirst=560, tfreq=3)...
	   Assign 0 to reload r560 (freq=3)
	 Assigning to 561 (cl=GENERAL_REGS, orig=118, freq=3, tfirst=561, tfreq=3)...
	   Assign 0 to reload r561 (freq=3)
	 Assigning to 562 (cl=GENERAL_REGS, orig=121, freq=3, tfirst=562, tfreq=3)...
	   Assign 0 to reload r562 (freq=3)
	 Assigning to 563 (cl=GENERAL_REGS, orig=124, freq=3, tfirst=563, tfreq=3)...
	   Assign 0 to reload r563 (freq=3)
	 Assigning to 564 (cl=GENERAL_REGS, orig=127, freq=3, tfirst=564, tfreq=3)...
	   Assign 0 to reload r564 (freq=3)
	 Assigning to 565 (cl=GENERAL_REGS, orig=130, freq=3, tfirst=565, tfreq=3)...
	   Assign 0 to reload r565 (freq=3)
	 Assigning to 566 (cl=GENERAL_REGS, orig=133, freq=3, tfirst=566, tfreq=3)...
	   Assign 0 to reload r566 (freq=3)
	 Assigning to 567 (cl=GENERAL_REGS, orig=136, freq=3, tfirst=567, tfreq=3)...
	   Assign 0 to reload r567 (freq=3)
	 Assigning to 568 (cl=GENERAL_REGS, orig=139, freq=3, tfirst=568, tfreq=3)...
	   Assign 0 to reload r568 (freq=3)
	 Assigning to 569 (cl=GENERAL_REGS, orig=143, freq=3, tfirst=569, tfreq=3)...
	   Assign 0 to reload r569 (freq=3)
	 Assigning to 570 (cl=GENERAL_REGS, orig=147, freq=3, tfirst=570, tfreq=3)...
	   Assign 0 to reload r570 (freq=3)
	 Assigning to 571 (cl=GENERAL_REGS, orig=150, freq=3, tfirst=571, tfreq=3)...
	   Assign 0 to reload r571 (freq=3)
	 Assigning to 574 (cl=GENERAL_REGS, orig=155, freq=3, tfirst=574, tfreq=3)...
	   Assign 0 to reload r574 (freq=3)
	 Assigning to 575 (cl=GENERAL_REGS, orig=158, freq=3, tfirst=575, tfreq=3)...
	   Assign 0 to reload r575 (freq=3)
	 Assigning to 578 (cl=GENERAL_REGS, orig=163, freq=3, tfirst=578, tfreq=3)...
	   Assign 0 to reload r578 (freq=3)
	 Assigning to 579 (cl=GENERAL_REGS, orig=166, freq=3, tfirst=579, tfreq=3)...
	   Assign 0 to reload r579 (freq=3)
	 Assigning to 583 (cl=GENERAL_REGS, orig=171, freq=3, tfirst=583, tfreq=3)...
	   Assign 0 to reload r583 (freq=3)
	 Assigning to 584 (cl=GENERAL_REGS, orig=174, freq=3, tfirst=584, tfreq=3)...
	   Assign 0 to reload r584 (freq=3)
	 Assigning to 588 (cl=GENERAL_REGS, orig=179, freq=3, tfirst=588, tfreq=3)...
	   Assign 0 to reload r588 (freq=3)
	 Assigning to 589 (cl=GENERAL_REGS, orig=182, freq=3, tfirst=589, tfreq=3)...
	   Assign 0 to reload r589 (freq=3)
	 Assigning to 594 (cl=GENERAL_REGS, orig=240, freq=3, tfirst=594, tfreq=3)...
	   Assign 0 to reload r594 (freq=3)
	 Assigning to 595 (cl=GENERAL_REGS, orig=243, freq=3, tfirst=595, tfreq=3)...
	   Assign 0 to reload r595 (freq=3)
	 Assigning to 596 (cl=GENERAL_REGS, orig=246, freq=3, tfirst=596, tfreq=3)...
	   Assign 0 to reload r596 (freq=3)
	 Assigning to 597 (cl=GENERAL_REGS, orig=249, freq=3, tfirst=597, tfreq=3)...
	   Assign 0 to reload r597 (freq=3)
	 Assigning to 598 (cl=GENERAL_REGS, orig=252, freq=3, tfirst=598, tfreq=3)...
	   Assign 0 to reload r598 (freq=3)
	 Assigning to 599 (cl=GENERAL_REGS, orig=255, freq=3, tfirst=599, tfreq=3)...
	   Assign 0 to reload r599 (freq=3)
	 Assigning to 600 (cl=GENERAL_REGS, orig=258, freq=3, tfirst=600, tfreq=3)...
	   Assign 0 to reload r600 (freq=3)
	 Assigning to 601 (cl=GENERAL_REGS, orig=261, freq=3, tfirst=601, tfreq=3)...
	   Assign 0 to reload r601 (freq=3)
	 Assigning to 602 (cl=GENERAL_REGS, orig=264, freq=3, tfirst=602, tfreq=3)...
	   Assign 0 to reload r602 (freq=3)
	 Assigning to 603 (cl=GENERAL_REGS, orig=267, freq=3, tfirst=603, tfreq=3)...
	   Assign 0 to reload r603 (freq=3)
	 Assigning to 604 (cl=GENERAL_REGS, orig=270, freq=3, tfirst=604, tfreq=3)...
	   Assign 0 to reload r604 (freq=3)
	 Assigning to 605 (cl=GENERAL_REGS, orig=273, freq=3, tfirst=605, tfreq=3)...
	   Assign 0 to reload r605 (freq=3)
	 Assigning to 606 (cl=GENERAL_REGS, orig=276, freq=3, tfirst=606, tfreq=3)...
	   Assign 0 to reload r606 (freq=3)
	 Assigning to 607 (cl=GENERAL_REGS, orig=279, freq=3, tfirst=607, tfreq=3)...
	   Assign 0 to reload r607 (freq=3)
	 Assigning to 608 (cl=GENERAL_REGS, orig=282, freq=3, tfirst=608, tfreq=3)...
	   Assign 0 to reload r608 (freq=3)
	 Assigning to 609 (cl=GENERAL_REGS, orig=285, freq=3, tfirst=609, tfreq=3)...
	   Assign 0 to reload r609 (freq=3)
	 Assigning to 610 (cl=GENERAL_REGS, orig=288, freq=3, tfirst=610, tfreq=3)...
	   Assign 0 to reload r610 (freq=3)
	 Assigning to 611 (cl=GENERAL_REGS, orig=291, freq=3, tfirst=611, tfreq=3)...
	   Assign 0 to reload r611 (freq=3)
	 Assigning to 572 (cl=GENERAL_REGS, orig=572, freq=2, tfirst=572, tfreq=2)...
	   Assign 2 to reload r572 (freq=2)
	 Assigning to 573 (cl=GENERAL_REGS, orig=573, freq=2, tfirst=573, tfreq=2)...
	   Assign 4 to reload r573 (freq=2)
	 Assigning to 576 (cl=GENERAL_REGS, orig=576, freq=2, tfirst=576, tfreq=2)...
	   Assign 5 to reload r576 (freq=2)
	 Assigning to 577 (cl=GENERAL_REGS, orig=577, freq=2, tfirst=577, tfreq=2)...
	   Assign 2 to reload r577 (freq=2)
	 Assigning to 580 (cl=GENERAL_REGS, orig=580, freq=2, tfirst=580, tfreq=2)...
	   Assign 4 to reload r580 (freq=2)
	 Assigning to 581 (cl=GENERAL_REGS, orig=581, freq=2, tfirst=581, tfreq=2)...
	   Assign 5 to reload r581 (freq=2)
	 Assigning to 582 (cl=GENERAL_REGS, orig=582, freq=2, tfirst=582, tfreq=2)...
	   Assign 2 to reload r582 (freq=2)
	 Assigning to 585 (cl=GENERAL_REGS, orig=585, freq=2, tfirst=585, tfreq=2)...
	   Assign 4 to reload r585 (freq=2)
	 Assigning to 586 (cl=GENERAL_REGS, orig=586, freq=2, tfirst=586, tfreq=2)...
	   Assign 5 to reload r586 (freq=2)
	 Assigning to 587 (cl=GENERAL_REGS, orig=587, freq=2, tfirst=587, tfreq=2)...
	   Assign 2 to reload r587 (freq=2)
	 Assigning to 590 (cl=GENERAL_REGS, orig=590, freq=2, tfirst=590, tfreq=2)...
	   Assign 4 to reload r590 (freq=2)
	 Assigning to 591 (cl=GENERAL_REGS, orig=591, freq=2, tfirst=591, tfreq=2)...
	   Assign 5 to reload r591 (freq=2)
	 Assigning to 592 (cl=GENERAL_REGS, orig=592, freq=2, tfirst=592, tfreq=2)...
	   Assign 2 to reload r592 (freq=2)
	 Assigning to 593 (cl=GENERAL_REGS, orig=593, freq=2, tfirst=593, tfreq=2)...
	   Assign 4 to reload r593 (freq=2)
	 Assigning to 612 (cl=GENERAL_REGS, orig=612, freq=2, tfirst=612, tfreq=2)...
	   Assign 5 to reload r612 (freq=2)
	 Assigning to 613 (cl=GENERAL_REGS, orig=613, freq=2, tfirst=613, tfreq=2)...
	   Assign 2 to reload r613 (freq=2)
	 Assigning to 614 (cl=GENERAL_REGS, orig=614, freq=2, tfirst=614, tfreq=2)...
	   Assign 4 to reload r614 (freq=2)
	 Assigning to 615 (cl=GENERAL_REGS, orig=615, freq=2, tfirst=615, tfreq=2)...
	   Assign 5 to reload r615 (freq=2)
	 Assigning to 616 (cl=GENERAL_REGS, orig=616, freq=2, tfirst=616, tfreq=2)...
	   Assign 2 to reload r616 (freq=2)
	 Assigning to 617 (cl=GENERAL_REGS, orig=617, freq=2, tfirst=617, tfreq=2)...
	   Assign 4 to reload r617 (freq=2)
	 Assigning to 618 (cl=GENERAL_REGS, orig=618, freq=2, tfirst=618, tfreq=2)...
	   Assign 5 to reload r618 (freq=2)
	 Assigning to 619 (cl=GENERAL_REGS, orig=619, freq=2, tfirst=619, tfreq=2)...
	   Assign 2 to reload r619 (freq=2)
	 Assigning to 620 (cl=GENERAL_REGS, orig=620, freq=2, tfirst=620, tfreq=2)...
	   Assign 4 to reload r620 (freq=2)
	 Assigning to 621 (cl=GENERAL_REGS, orig=621, freq=2, tfirst=621, tfreq=2)...
	   Assign 5 to reload r621 (freq=2)
	 Assigning to 622 (cl=GENERAL_REGS, orig=622, freq=2, tfirst=622, tfreq=2)...
	   Assign 2 to reload r622 (freq=2)
	 Assigning to 623 (cl=GENERAL_REGS, orig=623, freq=2, tfirst=623, tfreq=2)...
	   Assign 4 to reload r623 (freq=2)
	 Assigning to 624 (cl=GENERAL_REGS, orig=624, freq=2, tfirst=624, tfreq=2)...
	   Assign 5 to reload r624 (freq=2)
	 Assigning to 625 (cl=GENERAL_REGS, orig=625, freq=2, tfirst=625, tfreq=2)...
	   Assign 2 to reload r625 (freq=2)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 24
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 31
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 57
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 67
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 78
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 85
changing reg in insn 88
changing reg in insn 88
changing reg in insn 90
changing reg in insn 92
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 99
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 106
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 113
changing reg in insn 116
changing reg in insn 116
changing reg in insn 118
changing reg in insn 120
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 127
changing reg in insn 130
changing reg in insn 130
changing reg in insn 132
changing reg in insn 134
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 142
changing reg in insn 143
changing reg in insn 147
changing reg in insn 150
changing reg in insn 150
changing reg in insn 150
changing reg in insn 153
changing reg in insn 163
changing reg in insn 164
changing reg in insn 168
changing reg in insn 171
changing reg in insn 171
changing reg in insn 171
changing reg in insn 174
changing reg in insn 182
changing reg in insn 185
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 189
changing reg in insn 188
changing reg in insn 187
changing reg in insn 193
changing reg in insn 194
changing reg in insn 198
changing reg in insn 201
changing reg in insn 201
changing reg in insn 201
changing reg in insn 204
changing reg in insn 212
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 216
changing reg in insn 220
changing reg in insn 219
changing reg in insn 218
changing reg in insn 217
changing reg in insn 224
changing reg in insn 225
changing reg in insn 229
changing reg in insn 232
changing reg in insn 232
changing reg in insn 232
changing reg in insn 235
changing reg in insn 243
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 252
changing reg in insn 251
changing reg in insn 250
changing reg in insn 249
changing reg in insn 248
changing reg in insn 256
changing reg in insn 257
changing reg in insn 261
changing reg in insn 264
changing reg in insn 264
changing reg in insn 264
changing reg in insn 267
changing reg in insn 275
changing reg in insn 278
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 283
changing reg in insn 282
changing reg in insn 281
changing reg in insn 280
changing reg in insn 287
changing reg in insn 288
changing reg in insn 292
changing reg in insn 295
changing reg in insn 295
changing reg in insn 295
changing reg in insn 298
changing reg in insn 306
changing reg in insn 309
changing reg in insn 309
changing reg in insn 310
changing reg in insn 310
changing reg in insn 315
changing reg in insn 314
changing reg in insn 313
changing reg in insn 312
changing reg in insn 311
changing reg in insn 317
changing reg in insn 322
changing reg in insn 320
changing reg in insn 318
changing reg in insn 322
changing reg in insn 320
changing reg in insn 325
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 330
changing reg in insn 335
changing reg in insn 333
changing reg in insn 331
changing reg in insn 335
changing reg in insn 333
changing reg in insn 338
changing reg in insn 340
changing reg in insn 340
changing reg in insn 342
changing reg in insn 344
changing reg in insn 349
changing reg in insn 347
changing reg in insn 345
changing reg in insn 349
changing reg in insn 347
changing reg in insn 352
changing reg in insn 354
changing reg in insn 354
changing reg in insn 355
changing reg in insn 357
changing reg in insn 362
changing reg in insn 360
changing reg in insn 358
changing reg in insn 362
changing reg in insn 360
changing reg in insn 365
changing reg in insn 367
changing reg in insn 367
changing reg in insn 368
changing reg in insn 370
changing reg in insn 375
changing reg in insn 373
changing reg in insn 371
changing reg in insn 375
changing reg in insn 373
changing reg in insn 378
changing reg in insn 380
changing reg in insn 380
changing reg in insn 381
changing reg in insn 383
changing reg in insn 388
changing reg in insn 386
changing reg in insn 384
changing reg in insn 388
changing reg in insn 386
changing reg in insn 391
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 396
changing reg in insn 401
changing reg in insn 399
changing reg in insn 397
changing reg in insn 401
changing reg in insn 399
changing reg in insn 404
changing reg in insn 406
changing reg in insn 406
changing reg in insn 407
changing reg in insn 409
changing reg in insn 414
changing reg in insn 412
changing reg in insn 410
changing reg in insn 414
changing reg in insn 412
changing reg in insn 417
changing reg in insn 419
changing reg in insn 419
changing reg in insn 421
changing reg in insn 423
changing reg in insn 428
changing reg in insn 426
changing reg in insn 424
changing reg in insn 428
changing reg in insn 426
changing reg in insn 431
changing reg in insn 433
changing reg in insn 433
changing reg in insn 434
changing reg in insn 436
changing reg in insn 441
changing reg in insn 439
changing reg in insn 437
changing reg in insn 441
changing reg in insn 439
changing reg in insn 444
changing reg in insn 446
changing reg in insn 446
changing reg in insn 447
changing reg in insn 449
changing reg in insn 454
changing reg in insn 452
changing reg in insn 450
changing reg in insn 454
changing reg in insn 452
changing reg in insn 457
changing reg in insn 459
changing reg in insn 459
changing reg in insn 460
changing reg in insn 462
changing reg in insn 467
changing reg in insn 465
changing reg in insn 463
changing reg in insn 467
changing reg in insn 465
changing reg in insn 470
changing reg in insn 472
changing reg in insn 472
changing reg in insn 473
changing reg in insn 475
changing reg in insn 480
changing reg in insn 478
changing reg in insn 476
changing reg in insn 480
changing reg in insn 478
changing reg in insn 483
changing reg in insn 485
changing reg in insn 485
changing reg in insn 487
changing reg in insn 489
changing reg in insn 494
changing reg in insn 492
changing reg in insn 490
changing reg in insn 494
changing reg in insn 492
changing reg in insn 497
changing reg in insn 499
changing reg in insn 499
changing reg in insn 500
changing reg in insn 502
changing reg in insn 507
changing reg in insn 505
changing reg in insn 503
changing reg in insn 507
changing reg in insn 505
changing reg in insn 510
changing reg in insn 512
changing reg in insn 512
changing reg in insn 513
changing reg in insn 515
changing reg in insn 520
changing reg in insn 518
changing reg in insn 516
changing reg in insn 520
changing reg in insn 518
changing reg in insn 523
changing reg in insn 525
changing reg in insn 525
changing reg in insn 526
changing reg in insn 528
changing reg in insn 533
changing reg in insn 531
changing reg in insn 529
changing reg in insn 533
changing reg in insn 531
changing reg in insn 536
changing reg in insn 538
changing reg in insn 538
changing reg in insn 539
changing reg in insn 541
changing reg in insn 546
changing reg in insn 544
changing reg in insn 542
changing reg in insn 546
changing reg in insn 544
changing reg in insn 549
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 554
changing reg in insn 557
changing reg in insn 557
changing reg in insn 558
changing reg in insn 560
changing reg in insn 563
changing reg in insn 563
changing reg in insn 564
changing reg in insn 566
changing reg in insn 569
changing reg in insn 569
changing reg in insn 570
changing reg in insn 572
changing reg in insn 575
changing reg in insn 575
changing reg in insn 576
changing reg in insn 578
changing reg in insn 581
changing reg in insn 581
changing reg in insn 582
changing reg in insn 584
changing reg in insn 587
changing reg in insn 587
changing reg in insn 588
changing reg in insn 590
changing reg in insn 593
changing reg in insn 593
changing reg in insn 594
changing reg in insn 596
changing reg in insn 599
changing reg in insn 599
changing reg in insn 600
changing reg in insn 602
changing reg in insn 605
changing reg in insn 605
changing reg in insn 606
changing reg in insn 608
changing reg in insn 611
changing reg in insn 611
changing reg in insn 612
changing reg in insn 614
changing reg in insn 617
changing reg in insn 617
changing reg in insn 618
changing reg in insn 620
changing reg in insn 623
changing reg in insn 623
changing reg in insn 624
changing reg in insn 626
changing reg in insn 629
changing reg in insn 629
changing reg in insn 630
changing reg in insn 632
changing reg in insn 635
changing reg in insn 635
changing reg in insn 636
changing reg in insn 638
changing reg in insn 641
changing reg in insn 641
changing reg in insn 643
changing reg in insn 645
changing reg in insn 648
changing reg in insn 648
changing reg in insn 650
changing reg in insn 652
changing reg in insn 655
changing reg in insn 655
changing reg in insn 657
changing reg in insn 659
changing reg in insn 662
changing reg in insn 662
changing reg in insn 664
changing reg in insn 666
changing reg in insn 669
changing reg in insn 667
changing reg in insn 669
changing reg in insn 672
changing reg in insn 674
changing reg in insn 674
changing reg in insn 675
changing reg in insn 677
changing reg in insn 680
changing reg in insn 678
changing reg in insn 680
changing reg in insn 683
changing reg in insn 685
changing reg in insn 685
changing reg in insn 686
changing reg in insn 688
changing reg in insn 691
changing reg in insn 689
changing reg in insn 691
changing reg in insn 694
changing reg in insn 696
changing reg in insn 696
changing reg in insn 697
changing reg in insn 699
changing reg in insn 702
changing reg in insn 700
changing reg in insn 702
changing reg in insn 705
changing reg in insn 707
changing reg in insn 707
changing reg in insn 708
changing reg in insn 712
changing reg in insn 713
changing reg in insn 717
changing reg in insn 720
changing reg in insn 718
changing reg in insn 720
changing reg in insn 723
changing reg in insn 725
changing reg in insn 725
changing reg in insn 725
changing reg in insn 728
changing reg in insn 741
changing reg in insn 745
changing reg in insn 744
changing reg in insn 743
changing reg in insn 742
changing reg in insn 747
changing reg in insn 751
changing reg in insn 750
changing reg in insn 749
changing reg in insn 748
changing reg in insn 753
changing reg in insn 757
changing reg in insn 756
changing reg in insn 755
changing reg in insn 754
changing reg in insn 759
changing reg in insn 763
changing reg in insn 762
changing reg in insn 761
changing reg in insn 760
changing reg in insn 765
changing reg in insn 769
changing reg in insn 768
changing reg in insn 767
changing reg in insn 766
changing reg in insn 771
changing reg in insn 775
changing reg in insn 774
changing reg in insn 773
changing reg in insn 772
changing reg in insn 777
changing reg in insn 781
changing reg in insn 780
changing reg in insn 779
changing reg in insn 778
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 136
changing reg in insn 141
changing reg in insn 142
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 151
changing reg in insn 152
changing reg in insn 162
changing reg in insn 163
changing reg in insn 167
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 173
changing reg in insn 174
changing reg in insn 172
changing reg in insn 173
changing reg in insn 181
changing reg in insn 182
changing reg in insn 184
changing reg in insn 192
changing reg in insn 193
changing reg in insn 197
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 204
changing reg in insn 202
changing reg in insn 203
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 223
changing reg in insn 224
changing reg in insn 228
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 234
changing reg in insn 235
changing reg in insn 233
changing reg in insn 234
changing reg in insn 242
changing reg in insn 243
changing reg in insn 245
changing reg in insn 255
changing reg in insn 256
changing reg in insn 260
changing reg in insn 261
changing reg in insn 263
changing reg in insn 264
changing reg in insn 266
changing reg in insn 267
changing reg in insn 265
changing reg in insn 266
changing reg in insn 274
changing reg in insn 275
changing reg in insn 277
changing reg in insn 286
changing reg in insn 287
changing reg in insn 291
changing reg in insn 292
changing reg in insn 294
changing reg in insn 295
changing reg in insn 297
changing reg in insn 298
changing reg in insn 296
changing reg in insn 297
changing reg in insn 305
changing reg in insn 306
changing reg in insn 308
changing reg in insn 316
changing reg in insn 317
changing reg in insn 324
changing reg in insn 322
changing reg in insn 321
changing reg in insn 320
changing reg in insn 319
changing reg in insn 318
changing reg in insn 325
changing reg in insn 323
changing reg in insn 322
changing reg in insn 321
changing reg in insn 320
changing reg in insn 319
changing reg in insn 323
changing reg in insn 324
changing reg in insn 326
changing reg in insn 329
changing reg in insn 330
changing reg in insn 337
changing reg in insn 335
changing reg in insn 334
changing reg in insn 333
changing reg in insn 332
changing reg in insn 331
changing reg in insn 338
changing reg in insn 336
changing reg in insn 335
changing reg in insn 334
changing reg in insn 333
changing reg in insn 332
changing reg in insn 336
changing reg in insn 337
changing reg in insn 339
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 344
changing reg in insn 351
changing reg in insn 349
changing reg in insn 348
changing reg in insn 347
changing reg in insn 346
changing reg in insn 345
changing reg in insn 352
changing reg in insn 350
changing reg in insn 349
changing reg in insn 348
changing reg in insn 347
changing reg in insn 346
changing reg in insn 350
changing reg in insn 351
changing reg in insn 353
changing reg in insn 356
changing reg in insn 357
changing reg in insn 364
changing reg in insn 362
changing reg in insn 361
changing reg in insn 360
changing reg in insn 359
changing reg in insn 358
changing reg in insn 365
changing reg in insn 363
changing reg in insn 362
changing reg in insn 361
changing reg in insn 360
changing reg in insn 359
changing reg in insn 363
changing reg in insn 364
changing reg in insn 366
changing reg in insn 369
changing reg in insn 370
changing reg in insn 377
changing reg in insn 375
changing reg in insn 374
changing reg in insn 373
changing reg in insn 372
changing reg in insn 371
changing reg in insn 378
changing reg in insn 376
changing reg in insn 375
changing reg in insn 374
changing reg in insn 373
changing reg in insn 372
changing reg in insn 376
changing reg in insn 377
changing reg in insn 379
changing reg in insn 382
changing reg in insn 383
changing reg in insn 390
changing reg in insn 388
changing reg in insn 387
changing reg in insn 386
changing reg in insn 385
changing reg in insn 384
changing reg in insn 391
changing reg in insn 389
changing reg in insn 388
changing reg in insn 387
changing reg in insn 386
changing reg in insn 385
changing reg in insn 389
changing reg in insn 390
changing reg in insn 392
changing reg in insn 395
changing reg in insn 396
changing reg in insn 403
changing reg in insn 401
changing reg in insn 400
changing reg in insn 399
changing reg in insn 398
changing reg in insn 397
changing reg in insn 404
changing reg in insn 402
changing reg in insn 401
changing reg in insn 400
changing reg in insn 399
changing reg in insn 398
changing reg in insn 402
changing reg in insn 403
changing reg in insn 405
changing reg in insn 408
changing reg in insn 409
changing reg in insn 416
changing reg in insn 414
changing reg in insn 413
changing reg in insn 412
changing reg in insn 411
changing reg in insn 410
changing reg in insn 417
changing reg in insn 415
changing reg in insn 414
changing reg in insn 413
changing reg in insn 412
changing reg in insn 411
changing reg in insn 415
changing reg in insn 416
changing reg in insn 418
changing reg in insn 420
changing reg in insn 421
changing reg in insn 422
changing reg in insn 423
changing reg in insn 430
changing reg in insn 428
changing reg in insn 427
changing reg in insn 426
changing reg in insn 425
changing reg in insn 424
changing reg in insn 431
changing reg in insn 429
changing reg in insn 428
changing reg in insn 427
changing reg in insn 426
changing reg in insn 425
changing reg in insn 429
changing reg in insn 430
changing reg in insn 432
changing reg in insn 435
changing reg in insn 436
changing reg in insn 443
changing reg in insn 441
changing reg in insn 440
changing reg in insn 439
changing reg in insn 438
changing reg in insn 437
changing reg in insn 444
changing reg in insn 442
changing reg in insn 441
changing reg in insn 440
changing reg in insn 439
changing reg in insn 438
changing reg in insn 442
changing reg in insn 443
changing reg in insn 445
changing reg in insn 448
changing reg in insn 449
changing reg in insn 456
changing reg in insn 454
changing reg in insn 453
changing reg in insn 452
changing reg in insn 451
changing reg in insn 450
changing reg in insn 457
changing reg in insn 455
changing reg in insn 454
changing reg in insn 453
changing reg in insn 452
changing reg in insn 451
changing reg in insn 455
changing reg in insn 456
changing reg in insn 458
changing reg in insn 461
changing reg in insn 462
changing reg in insn 469
changing reg in insn 467
changing reg in insn 466
changing reg in insn 465
changing reg in insn 464
changing reg in insn 463
changing reg in insn 470
changing reg in insn 468
changing reg in insn 467
changing reg in insn 466
changing reg in insn 465
changing reg in insn 464
changing reg in insn 468
changing reg in insn 469
changing reg in insn 471
changing reg in insn 474
changing reg in insn 475
changing reg in insn 482
changing reg in insn 480
changing reg in insn 479
changing reg in insn 478
changing reg in insn 477
changing reg in insn 476
changing reg in insn 483
changing reg in insn 481
changing reg in insn 480
changing reg in insn 479
changing reg in insn 478
changing reg in insn 477
changing reg in insn 481
changing reg in insn 482
changing reg in insn 484
changing reg in insn 486
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 496
changing reg in insn 494
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 490
changing reg in insn 497
changing reg in insn 495
changing reg in insn 494
changing reg in insn 493
changing reg in insn 492
changing reg in insn 491
changing reg in insn 495
changing reg in insn 496
changing reg in insn 498
changing reg in insn 501
changing reg in insn 502
changing reg in insn 509
changing reg in insn 507
changing reg in insn 506
changing reg in insn 505
changing reg in insn 504
changing reg in insn 503
changing reg in insn 510
changing reg in insn 508
changing reg in insn 507
changing reg in insn 506
changing reg in insn 505
changing reg in insn 504
changing reg in insn 508
changing reg in insn 509
changing reg in insn 511
changing reg in insn 514
changing reg in insn 515
changing reg in insn 522
changing reg in insn 520
changing reg in insn 519
changing reg in insn 518
changing reg in insn 517
changing reg in insn 516
changing reg in insn 523
changing reg in insn 521
changing reg in insn 520
changing reg in insn 519
changing reg in insn 518
changing reg in insn 517
changing reg in insn 521
changing reg in insn 522
changing reg in insn 524
changing reg in insn 527
changing reg in insn 528
changing reg in insn 535
changing reg in insn 533
changing reg in insn 532
changing reg in insn 531
changing reg in insn 530
changing reg in insn 529
changing reg in insn 536
changing reg in insn 534
changing reg in insn 533
changing reg in insn 532
changing reg in insn 531
changing reg in insn 530
changing reg in insn 534
changing reg in insn 535
changing reg in insn 537
changing reg in insn 540
changing reg in insn 541
changing reg in insn 548
changing reg in insn 546
changing reg in insn 545
changing reg in insn 544
changing reg in insn 543
changing reg in insn 542
changing reg in insn 549
changing reg in insn 547
changing reg in insn 546
changing reg in insn 545
changing reg in insn 544
changing reg in insn 543
changing reg in insn 547
changing reg in insn 548
changing reg in insn 550
changing reg in insn 553
changing reg in insn 554
changing reg in insn 556
changing reg in insn 559
changing reg in insn 560
changing reg in insn 562
changing reg in insn 565
changing reg in insn 566
changing reg in insn 568
changing reg in insn 571
changing reg in insn 572
changing reg in insn 574
changing reg in insn 577
changing reg in insn 578
changing reg in insn 580
changing reg in insn 583
changing reg in insn 584
changing reg in insn 586
changing reg in insn 589
changing reg in insn 590
changing reg in insn 592
changing reg in insn 595
changing reg in insn 596
changing reg in insn 598
changing reg in insn 601
changing reg in insn 602
changing reg in insn 604
changing reg in insn 607
changing reg in insn 608
changing reg in insn 610
changing reg in insn 613
changing reg in insn 614
changing reg in insn 616
changing reg in insn 619
changing reg in insn 620
changing reg in insn 622
changing reg in insn 625
changing reg in insn 626
changing reg in insn 628
changing reg in insn 631
changing reg in insn 632
changing reg in insn 634
changing reg in insn 637
changing reg in insn 638
changing reg in insn 640
changing reg in insn 642
changing reg in insn 643
changing reg in insn 644
changing reg in insn 645
changing reg in insn 647
changing reg in insn 649
changing reg in insn 650
changing reg in insn 651
changing reg in insn 652
changing reg in insn 654
changing reg in insn 656
changing reg in insn 657
changing reg in insn 658
changing reg in insn 659
changing reg in insn 661
changing reg in insn 663
changing reg in insn 664
changing reg in insn 665
changing reg in insn 666
changing reg in insn 671
changing reg in insn 669
changing reg in insn 668
changing reg in insn 667
changing reg in insn 672
changing reg in insn 670
changing reg in insn 669
changing reg in insn 668
changing reg in insn 670
changing reg in insn 671
changing reg in insn 673
changing reg in insn 676
changing reg in insn 677
changing reg in insn 682
changing reg in insn 680
changing reg in insn 679
changing reg in insn 678
changing reg in insn 683
changing reg in insn 681
changing reg in insn 680
changing reg in insn 679
changing reg in insn 681
changing reg in insn 682
changing reg in insn 684
changing reg in insn 687
changing reg in insn 688
changing reg in insn 693
changing reg in insn 691
changing reg in insn 690
changing reg in insn 689
changing reg in insn 694
changing reg in insn 692
changing reg in insn 691
changing reg in insn 690
changing reg in insn 692
changing reg in insn 693
changing reg in insn 695
changing reg in insn 698
changing reg in insn 699
changing reg in insn 704
changing reg in insn 702
changing reg in insn 701
changing reg in insn 700
changing reg in insn 705
changing reg in insn 703
changing reg in insn 702
changing reg in insn 701
changing reg in insn 703
changing reg in insn 704
changing reg in insn 706
changing reg in insn 711
changing reg in insn 712
changing reg in insn 716
changing reg in insn 717
changing reg in insn 722
changing reg in insn 720
changing reg in insn 719
changing reg in insn 718
changing reg in insn 723
changing reg in insn 721
changing reg in insn 720
changing reg in insn 719
changing reg in insn 721
changing reg in insn 722
changing reg in insn 724
changing reg in insn 725
changing reg in insn 727
changing reg in insn 728
changing reg in insn 726
changing reg in insn 727
changing reg in insn 746
changing reg in insn 747
changing reg in insn 752
changing reg in insn 753
changing reg in insn 758
changing reg in insn 759
changing reg in insn 764
changing reg in insn 765
changing reg in insn 770
changing reg in insn 771
changing reg in insn 776
changing reg in insn 777
deleting insn with uid = 802.
deleting insn with uid = 804.
deleting insn with uid = 806.
deleting insn with uid = 808.
deleting insn with uid = 810.
deleting insn with uid = 812.
deleting insn with uid = 814.
deleting insn with uid = 816.
deleting insn with uid = 818.
deleting insn with uid = 820.
deleting insn with uid = 822.
deleting insn with uid = 824.
deleting insn with uid = 826.
deleting insn with uid = 828.
deleting insn with uid = 830.
deleting insn with uid = 832.
deleting insn with uid = 834.
deleting insn with uid = 836.
deleting insn with uid = 838.
deleting insn with uid = 840.
deleting insn with uid = 842.
deleting insn with uid = 846.
deleting insn with uid = 848.
deleting insn with uid = 852.
deleting insn with uid = 854.
deleting insn with uid = 859.
deleting insn with uid = 861.
deleting insn with uid = 866.
deleting insn with uid = 868.
deleting insn with uid = 324.
deleting insn with uid = 337.
deleting insn with uid = 351.
deleting insn with uid = 364.
deleting insn with uid = 377.
deleting insn with uid = 390.
deleting insn with uid = 403.
deleting insn with uid = 416.
deleting insn with uid = 430.
deleting insn with uid = 443.
deleting insn with uid = 456.
deleting insn with uid = 469.
deleting insn with uid = 482.
deleting insn with uid = 496.
deleting insn with uid = 509.
deleting insn with uid = 522.
deleting insn with uid = 535.
deleting insn with uid = 548.
deleting insn with uid = 874.
deleting insn with uid = 876.
deleting insn with uid = 878.
deleting insn with uid = 880.
deleting insn with uid = 882.
deleting insn with uid = 884.
deleting insn with uid = 886.
deleting insn with uid = 888.
deleting insn with uid = 890.
deleting insn with uid = 892.
deleting insn with uid = 894.
deleting insn with uid = 896.
deleting insn with uid = 898.
deleting insn with uid = 900.
deleting insn with uid = 902.
deleting insn with uid = 904.
deleting insn with uid = 906.
deleting insn with uid = 908.
deleting insn with uid = 671.
deleting insn with uid = 682.
deleting insn with uid = 693.
deleting insn with uid = 704.
deleting insn with uid = 722.
starting the processing of deferred insns
ending the processing of deferred insns


void init(Data_file_header*, Data_block_header*, Procpar_info*, Preprocess*, IOFiles*, InFile_struct*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 17[flags] 21[xmm0] 37[r8] 38[r9]
;;  ref usage 	r0={472d,508u} r1={101d,142u,111e} r2={11d,11u} r4={10d,10u} r5={10d,10u} r6={1d,218u} r7={1d,26u} r17={249d,8u} r20={1d,1u,76e} r21={23d,22u} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d,1u} r38={1d,1u} 
;;    total ref usage 2033{888d,958u,187e} in 782{782 regular + 0 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
;; lr  def 	
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
        (reg:DI 5 di [ main_header ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
        (reg:DI 4 si [ block_header ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 1 dx [ procpar_info ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
        (reg:DI 2 cx [ preprocess ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
        (reg:DI 37 r8 [ io_filenames ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
        (reg:DI 38 r9 [ infile_struct ])) ge2fitman_sup.cpp:270 89 {*movdi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 736 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:274 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              25 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 736 11 12 3 79 "" [1 uses])
(note 12 736 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:274 7 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 739)
            (pc))) ge2fitman_sup.cpp:274 612 {*jcc_1}
     (nil)
 -> 739)
;;  succ:       26
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 ax [316])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:277 90 {*movsi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 0 ax [orig:87 D.25534 ] [87])
        (sign_extend:DI (reg:SI 0 ax [316]))) ge2fitman_sup.cpp:277 142 {*extendsidi2_rex64}
     (nil))
(insn 18 17 803 4 (parallel [
            (set (reg:DI 0 ax [orig:88 D.25534 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:88 D.25534 ] [88])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:277 512 {*ashldi3_1}
     (nil))
(insn 803 18 19 4 (set (reg:DI 1 dx [orig:88 D.25534 ] [88])
        (reg:DI 0 ax [orig:88 D.25534 ] [88])) ge2fitman_sup.cpp:277 89 {*movdi_internal}
     (nil))
(insn 19 803 20 4 (set (reg/f:DI 0 ax [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:277 89 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.25535 ] [89])
                (plus:DI (reg/f:DI 0 ax [317])
                    (reg:DI 1 dx [orig:88 D.25534 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:277 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.25534 ] [88]))
        (nil)))
(insn 21 20 22 4 (set (reg:SF 21 xmm0 [318])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:277 129 {*movsf_internal}
     (nil))
(insn 22 21 23 4 (set (mem/j:SF (reg/f:DI 0 ax [orig:89 D.25535 ] [89]) [0 _22->acquision_time+0 S4 A64])
        (reg:SF 21 xmm0 [318])) ge2fitman_sup.cpp:277 129 {*movsf_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 0 ax [319])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:278 90 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 0 ax [orig:90 D.25534 ] [90])
        (sign_extend:DI (reg:SI 0 ax [319]))) ge2fitman_sup.cpp:278 142 {*extendsidi2_rex64}
     (nil))
(insn 25 24 805 4 (parallel [
            (set (reg:DI 0 ax [orig:91 D.25534 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:91 D.25534 ] [91])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:278 512 {*ashldi3_1}
     (nil))
(insn 805 25 26 4 (set (reg:DI 1 dx [orig:91 D.25534 ] [91])
        (reg:DI 0 ax [orig:91 D.25534 ] [91])) ge2fitman_sup.cpp:278 89 {*movdi_internal}
     (nil))
(insn 26 805 27 4 (set (reg/f:DI 0 ax [320])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:278 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg/f:DI 0 ax [orig:92 D.25535 ] [92])
                (plus:DI (reg/f:DI 0 ax [320])
                    (reg:DI 1 dx [orig:91 D.25534 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:278 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:91 D.25534 ] [91]))
        (nil)))
(insn 28 27 29 4 (set (reg:SF 21 xmm0 [321])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:278 129 {*movsf_internal}
     (nil))
(insn 29 28 30 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:92 D.25535 ] [92])
                (const_int 316 [0x13c])) [0 _26->filter+0 S4 A32])
        (reg:SF 21 xmm0 [321])) ge2fitman_sup.cpp:278 129 {*movsf_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SI 0 ax [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:279 90 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 0 ax [orig:93 D.25534 ] [93])
        (sign_extend:DI (reg:SI 0 ax [322]))) ge2fitman_sup.cpp:279 142 {*extendsidi2_rex64}
     (nil))
(insn 32 31 807 4 (parallel [
            (set (reg:DI 0 ax [orig:94 D.25534 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:94 D.25534 ] [94])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:279 512 {*ashldi3_1}
     (nil))
(insn 807 32 33 4 (set (reg:DI 1 dx [orig:94 D.25534 ] [94])
        (reg:DI 0 ax [orig:94 D.25534 ] [94])) ge2fitman_sup.cpp:279 89 {*movdi_internal}
     (nil))
(insn 33 807 34 4 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:279 89 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (parallel [
            (set (reg/f:DI 0 ax [orig:95 D.25535 ] [95])
                (plus:DI (reg/f:DI 0 ax [323])
                    (reg:DI 1 dx [orig:94 D.25534 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:279 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:94 D.25534 ] [94]))
        (nil)))
(insn 35 34 36 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:95 D.25535 ] [95])
                (const_int 320 [0x140])) [0 _30->num_transients+0 S4 A64])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:279 90 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:SI 0 ax [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:280 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:DI 0 ax [orig:96 D.25534 ] [96])
        (sign_extend:DI (reg:SI 0 ax [324]))) ge2fitman_sup.cpp:280 142 {*extendsidi2_rex64}
     (nil))
(insn 38 37 809 4 (parallel [
            (set (reg:DI 0 ax [orig:97 D.25534 ] [97])
                (ashift:DI (reg:DI 0 ax [orig:97 D.25534 ] [97])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:280 512 {*ashldi3_1}
     (nil))
(insn 809 38 39 4 (set (reg:DI 1 dx [orig:97 D.25534 ] [97])
        (reg:DI 0 ax [orig:97 D.25534 ] [97])) ge2fitman_sup.cpp:280 89 {*movdi_internal}
     (nil))
(insn 39 809 40 4 (set (reg/f:DI 0 ax [325])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:280 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 0 ax [orig:98 D.25535 ] [98])
                (plus:DI (reg/f:DI 0 ax [325])
                    (reg:DI 1 dx [orig:97 D.25534 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:280 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:97 D.25534 ] [97]))
        (nil)))
(insn 41 40 42 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:98 D.25535 ] [98])
                (const_int 324 [0x144])) [0 _34->num_points+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:280 90 {*movsi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:SI 0 ax [326])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:281 90 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:DI 0 ax [orig:99 D.25534 ] [99])
        (sign_extend:DI (reg:SI 0 ax [326]))) ge2fitman_sup.cpp:281 142 {*extendsidi2_rex64}
     (nil))
(insn 44 43 811 4 (parallel [
            (set (reg:DI 0 ax [orig:100 D.25534 ] [100])
                (ashift:DI (reg:DI 0 ax [orig:100 D.25534 ] [100])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:281 512 {*ashldi3_1}
     (nil))
(insn 811 44 45 4 (set (reg:DI 1 dx [orig:100 D.25534 ] [100])
        (reg:DI 0 ax [orig:100 D.25534 ] [100])) ge2fitman_sup.cpp:281 89 {*movdi_internal}
     (nil))
(insn 45 811 46 4 (set (reg/f:DI 0 ax [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:281 89 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:101 D.25535 ] [101])
                (plus:DI (reg/f:DI 0 ax [327])
                    (reg:DI 1 dx [orig:100 D.25534 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:281 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:100 D.25534 ] [100]))
        (nil)))
(insn 47 46 48 4 (set (reg:DF 21 xmm0 [328])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S8 A64])) ge2fitman_sup.cpp:281 128 {*movdf_internal}
     (nil))
(insn 48 47 49 4 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [orig:101 D.25535 ] [101])
                (const_int 328 [0x148])) [0 _38->main_frequency+0 S8 A64])
        (reg:DF 21 xmm0 [328])) ge2fitman_sup.cpp:281 128 {*movdf_internal}
     (nil))
(insn 49 48 50 4 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:282 90 {*movsi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 0 ax [orig:102 D.25534 ] [102])
        (sign_extend:DI (reg:SI 0 ax [329]))) ge2fitman_sup.cpp:282 142 {*extendsidi2_rex64}
     (nil))
(insn 51 50 813 4 (parallel [
            (set (reg:DI 0 ax [orig:103 D.25534 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:103 D.25534 ] [103])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:282 512 {*ashldi3_1}
     (nil))
(insn 813 51 52 4 (set (reg:DI 1 dx [orig:103 D.25534 ] [103])
        (reg:DI 0 ax [orig:103 D.25534 ] [103])) ge2fitman_sup.cpp:282 89 {*movdi_internal}
     (nil))
(insn 52 813 53 4 (set (reg/f:DI 0 ax [330])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:282 89 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg/f:DI 0 ax [orig:104 D.25535 ] [104])
                (plus:DI (reg/f:DI 0 ax [330])
                    (reg:DI 1 dx [orig:103 D.25534 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:282 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:103 D.25534 ] [103]))
        (nil)))
(insn 54 53 55 4 (set (reg:DF 21 xmm0 [331])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S8 A64])) ge2fitman_sup.cpp:282 128 {*movdf_internal}
     (nil))
(insn 55 54 56 4 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [orig:104 D.25535 ] [104])
                (const_int 336 [0x150])) [0 _42->offset_frequency+0 S8 A64])
        (reg:DF 21 xmm0 [331])) ge2fitman_sup.cpp:282 128 {*movdf_internal}
     (nil))
(insn 56 55 57 4 (set (reg:SI 0 ax [332])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:283 90 {*movsi_internal}
     (nil))
(insn 57 56 58 4 (set (reg:DI 0 ax [orig:105 D.25534 ] [105])
        (sign_extend:DI (reg:SI 0 ax [332]))) ge2fitman_sup.cpp:283 142 {*extendsidi2_rex64}
     (nil))
(insn 58 57 815 4 (parallel [
            (set (reg:DI 0 ax [orig:106 D.25534 ] [106])
                (ashift:DI (reg:DI 0 ax [orig:106 D.25534 ] [106])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:283 512 {*ashldi3_1}
     (nil))
(insn 815 58 59 4 (set (reg:DI 1 dx [orig:106 D.25534 ] [106])
        (reg:DI 0 ax [orig:106 D.25534 ] [106])) ge2fitman_sup.cpp:283 89 {*movdi_internal}
     (nil))
(insn 59 815 60 4 (set (reg/f:DI 0 ax [333])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:283 89 {*movdi_internal}
     (nil))
(insn 60 59 61 4 (parallel [
            (set (reg/f:DI 0 ax [orig:107 D.25535 ] [107])
                (plus:DI (reg/f:DI 0 ax [333])
                    (reg:DI 1 dx [orig:106 D.25534 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:283 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:106 D.25534 ] [106]))
        (nil)))
(insn 61 60 62 4 (set (reg:SF 21 xmm0 [334])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:283 129 {*movsf_internal}
     (nil))
(insn 62 61 63 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:107 D.25535 ] [107])
                (const_int 344 [0x158])) [0 _46->te+0 S4 A64])
        (reg:SF 21 xmm0 [334])) ge2fitman_sup.cpp:283 129 {*movsf_internal}
     (nil))
(insn 63 62 64 4 (set (reg:SI 0 ax [335])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:284 90 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:DI 0 ax [orig:108 D.25534 ] [108])
        (sign_extend:DI (reg:SI 0 ax [335]))) ge2fitman_sup.cpp:284 142 {*extendsidi2_rex64}
     (nil))
(insn 65 64 817 4 (parallel [
            (set (reg:DI 0 ax [orig:109 D.25534 ] [109])
                (ashift:DI (reg:DI 0 ax [orig:109 D.25534 ] [109])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:284 512 {*ashldi3_1}
     (nil))
(insn 817 65 66 4 (set (reg:DI 1 dx [orig:109 D.25534 ] [109])
        (reg:DI 0 ax [orig:109 D.25534 ] [109])) ge2fitman_sup.cpp:284 89 {*movdi_internal}
     (nil))
(insn 66 817 67 4 (set (reg/f:DI 0 ax [336])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:284 89 {*movdi_internal}
     (nil))
(insn 67 66 68 4 (parallel [
            (set (reg/f:DI 0 ax [orig:110 D.25535 ] [110])
                (plus:DI (reg/f:DI 0 ax [336])
                    (reg:DI 1 dx [orig:109 D.25534 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:284 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:109 D.25534 ] [109]))
        (nil)))
(insn 68 67 69 4 (set (reg:SF 21 xmm0 [337])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:284 129 {*movsf_internal}
     (nil))
(insn 69 68 70 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:110 D.25535 ] [110])
                (const_int 348 [0x15c])) [0 _50->tr+0 S4 A32])
        (reg:SF 21 xmm0 [337])) ge2fitman_sup.cpp:284 129 {*movsf_internal}
     (nil))
(insn 70 69 71 4 (set (reg:SI 0 ax [338])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:285 90 {*movsi_internal}
     (nil))
(insn 71 70 72 4 (set (reg:DI 0 ax [orig:111 D.25534 ] [111])
        (sign_extend:DI (reg:SI 0 ax [338]))) ge2fitman_sup.cpp:285 142 {*extendsidi2_rex64}
     (nil))
(insn 72 71 819 4 (parallel [
            (set (reg:DI 0 ax [orig:112 D.25534 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:112 D.25534 ] [112])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:285 512 {*ashldi3_1}
     (nil))
(insn 819 72 73 4 (set (reg:DI 1 dx [orig:112 D.25534 ] [112])
        (reg:DI 0 ax [orig:112 D.25534 ] [112])) ge2fitman_sup.cpp:285 89 {*movdi_internal}
     (nil))
(insn 73 819 74 4 (set (reg/f:DI 0 ax [339])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:285 89 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (parallel [
            (set (reg/f:DI 0 ax [orig:113 D.25535 ] [113])
                (plus:DI (reg/f:DI 0 ax [339])
                    (reg:DI 1 dx [orig:112 D.25534 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:285 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:112 D.25534 ] [112]))
        (nil)))
(insn 75 74 76 4 (set (reg:SF 21 xmm0 [340])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:285 129 {*movsf_internal}
     (nil))
(insn 76 75 77 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:113 D.25535 ] [113])
                (const_int 360 [0x168])) [0 _54->gain+0 S4 A64])
        (reg:SF 21 xmm0 [340])) ge2fitman_sup.cpp:285 129 {*movsf_internal}
     (nil))
(insn 77 76 78 4 (set (reg:SI 0 ax [341])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:286 90 {*movsi_internal}
     (nil))
(insn 78 77 79 4 (set (reg:DI 0 ax [orig:114 D.25534 ] [114])
        (sign_extend:DI (reg:SI 0 ax [341]))) ge2fitman_sup.cpp:286 142 {*extendsidi2_rex64}
     (nil))
(insn 79 78 821 4 (parallel [
            (set (reg:DI 0 ax [orig:115 D.25534 ] [115])
                (ashift:DI (reg:DI 0 ax [orig:115 D.25534 ] [115])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:286 512 {*ashldi3_1}
     (nil))
(insn 821 79 80 4 (set (reg:DI 1 dx [orig:115 D.25534 ] [115])
        (reg:DI 0 ax [orig:115 D.25534 ] [115])) ge2fitman_sup.cpp:286 89 {*movdi_internal}
     (nil))
(insn 80 821 81 4 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:286 89 {*movdi_internal}
     (nil))
(insn 81 80 82 4 (parallel [
            (set (reg/f:DI 0 ax [orig:116 D.25535 ] [116])
                (plus:DI (reg/f:DI 0 ax [342])
                    (reg:DI 1 dx [orig:115 D.25534 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:286 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:115 D.25534 ] [115]))
        (nil)))
(insn 82 81 83 4 (set (reg:SF 21 xmm0 [343])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:286 129 {*movsf_internal}
     (nil))
(insn 83 82 84 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:116 D.25535 ] [116])
                (const_int 364 [0x16c])) [0 _58->pos1+0 S4 A32])
        (reg:SF 21 xmm0 [343])) ge2fitman_sup.cpp:286 129 {*movsf_internal}
     (nil))
(insn 84 83 85 4 (set (reg:SI 0 ax [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:287 90 {*movsi_internal}
     (nil))
(insn 85 84 86 4 (set (reg:DI 0 ax [orig:117 D.25534 ] [117])
        (sign_extend:DI (reg:SI 0 ax [344]))) ge2fitman_sup.cpp:287 142 {*extendsidi2_rex64}
     (nil))
(insn 86 85 823 4 (parallel [
            (set (reg:DI 0 ax [orig:118 D.25534 ] [118])
                (ashift:DI (reg:DI 0 ax [orig:118 D.25534 ] [118])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:287 512 {*ashldi3_1}
     (nil))
(insn 823 86 87 4 (set (reg:DI 1 dx [orig:118 D.25534 ] [118])
        (reg:DI 0 ax [orig:118 D.25534 ] [118])) ge2fitman_sup.cpp:287 89 {*movdi_internal}
     (nil))
(insn 87 823 88 4 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:287 89 {*movdi_internal}
     (nil))
(insn 88 87 89 4 (parallel [
            (set (reg/f:DI 0 ax [orig:119 D.25535 ] [119])
                (plus:DI (reg/f:DI 0 ax [345])
                    (reg:DI 1 dx [orig:118 D.25534 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:287 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:118 D.25534 ] [118]))
        (nil)))
(insn 89 88 90 4 (set (reg:SF 21 xmm0 [346])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:287 129 {*movsf_internal}
     (nil))
(insn 90 89 91 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:119 D.25535 ] [119])
                (const_int 368 [0x170])) [0 _62->pos2+0 S4 A64])
        (reg:SF 21 xmm0 [346])) ge2fitman_sup.cpp:287 129 {*movsf_internal}
     (nil))
(insn 91 90 92 4 (set (reg:SI 0 ax [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:288 90 {*movsi_internal}
     (nil))
(insn 92 91 93 4 (set (reg:DI 0 ax [orig:120 D.25534 ] [120])
        (sign_extend:DI (reg:SI 0 ax [347]))) ge2fitman_sup.cpp:288 142 {*extendsidi2_rex64}
     (nil))
(insn 93 92 825 4 (parallel [
            (set (reg:DI 0 ax [orig:121 D.25534 ] [121])
                (ashift:DI (reg:DI 0 ax [orig:121 D.25534 ] [121])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:288 512 {*ashldi3_1}
     (nil))
(insn 825 93 94 4 (set (reg:DI 1 dx [orig:121 D.25534 ] [121])
        (reg:DI 0 ax [orig:121 D.25534 ] [121])) ge2fitman_sup.cpp:288 89 {*movdi_internal}
     (nil))
(insn 94 825 95 4 (set (reg/f:DI 0 ax [348])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:288 89 {*movdi_internal}
     (nil))
(insn 95 94 96 4 (parallel [
            (set (reg/f:DI 0 ax [orig:122 D.25535 ] [122])
                (plus:DI (reg/f:DI 0 ax [348])
                    (reg:DI 1 dx [orig:121 D.25534 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:288 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:121 D.25534 ] [121]))
        (nil)))
(insn 96 95 97 4 (set (reg:SF 21 xmm0 [349])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:288 129 {*movsf_internal}
     (nil))
(insn 97 96 98 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:122 D.25535 ] [122])
                (const_int 372 [0x174])) [0 _66->pos3+0 S4 A32])
        (reg:SF 21 xmm0 [349])) ge2fitman_sup.cpp:288 129 {*movsf_internal}
     (nil))
(insn 98 97 99 4 (set (reg:SI 0 ax [350])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:289 90 {*movsi_internal}
     (nil))
(insn 99 98 100 4 (set (reg:DI 0 ax [orig:123 D.25534 ] [123])
        (sign_extend:DI (reg:SI 0 ax [350]))) ge2fitman_sup.cpp:289 142 {*extendsidi2_rex64}
     (nil))
(insn 100 99 827 4 (parallel [
            (set (reg:DI 0 ax [orig:124 D.25534 ] [124])
                (ashift:DI (reg:DI 0 ax [orig:124 D.25534 ] [124])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:289 512 {*ashldi3_1}
     (nil))
(insn 827 100 101 4 (set (reg:DI 1 dx [orig:124 D.25534 ] [124])
        (reg:DI 0 ax [orig:124 D.25534 ] [124])) ge2fitman_sup.cpp:289 89 {*movdi_internal}
     (nil))
(insn 101 827 102 4 (set (reg/f:DI 0 ax [351])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:289 89 {*movdi_internal}
     (nil))
(insn 102 101 103 4 (parallel [
            (set (reg/f:DI 0 ax [orig:125 D.25535 ] [125])
                (plus:DI (reg/f:DI 0 ax [351])
                    (reg:DI 1 dx [orig:124 D.25534 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:289 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:124 D.25534 ] [124]))
        (nil)))
(insn 103 102 104 4 (set (reg:SF 21 xmm0 [352])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:289 129 {*movsf_internal}
     (nil))
(insn 104 103 105 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:125 D.25535 ] [125])
                (const_int 376 [0x178])) [0 _70->vox1+0 S4 A64])
        (reg:SF 21 xmm0 [352])) ge2fitman_sup.cpp:289 129 {*movsf_internal}
     (nil))
(insn 105 104 106 4 (set (reg:SI 0 ax [353])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:290 90 {*movsi_internal}
     (nil))
(insn 106 105 107 4 (set (reg:DI 0 ax [orig:126 D.25534 ] [126])
        (sign_extend:DI (reg:SI 0 ax [353]))) ge2fitman_sup.cpp:290 142 {*extendsidi2_rex64}
     (nil))
(insn 107 106 829 4 (parallel [
            (set (reg:DI 0 ax [orig:127 D.25534 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:127 D.25534 ] [127])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:290 512 {*ashldi3_1}
     (nil))
(insn 829 107 108 4 (set (reg:DI 1 dx [orig:127 D.25534 ] [127])
        (reg:DI 0 ax [orig:127 D.25534 ] [127])) ge2fitman_sup.cpp:290 89 {*movdi_internal}
     (nil))
(insn 108 829 109 4 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:290 89 {*movdi_internal}
     (nil))
(insn 109 108 110 4 (parallel [
            (set (reg/f:DI 0 ax [orig:128 D.25535 ] [128])
                (plus:DI (reg/f:DI 0 ax [354])
                    (reg:DI 1 dx [orig:127 D.25534 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:290 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:127 D.25534 ] [127]))
        (nil)))
(insn 110 109 111 4 (set (reg:SF 21 xmm0 [355])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:290 129 {*movsf_internal}
     (nil))
(insn 111 110 112 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:128 D.25535 ] [128])
                (const_int 380 [0x17c])) [0 _74->vox2+0 S4 A32])
        (reg:SF 21 xmm0 [355])) ge2fitman_sup.cpp:290 129 {*movsf_internal}
     (nil))
(insn 112 111 113 4 (set (reg:SI 0 ax [356])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:291 90 {*movsi_internal}
     (nil))
(insn 113 112 114 4 (set (reg:DI 0 ax [orig:129 D.25534 ] [129])
        (sign_extend:DI (reg:SI 0 ax [356]))) ge2fitman_sup.cpp:291 142 {*extendsidi2_rex64}
     (nil))
(insn 114 113 831 4 (parallel [
            (set (reg:DI 0 ax [orig:130 D.25534 ] [130])
                (ashift:DI (reg:DI 0 ax [orig:130 D.25534 ] [130])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:291 512 {*ashldi3_1}
     (nil))
(insn 831 114 115 4 (set (reg:DI 1 dx [orig:130 D.25534 ] [130])
        (reg:DI 0 ax [orig:130 D.25534 ] [130])) ge2fitman_sup.cpp:291 89 {*movdi_internal}
     (nil))
(insn 115 831 116 4 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:291 89 {*movdi_internal}
     (nil))
(insn 116 115 117 4 (parallel [
            (set (reg/f:DI 0 ax [orig:131 D.25535 ] [131])
                (plus:DI (reg/f:DI 0 ax [357])
                    (reg:DI 1 dx [orig:130 D.25534 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:291 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:130 D.25534 ] [130]))
        (nil)))
(insn 117 116 118 4 (set (reg:SF 21 xmm0 [358])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:291 129 {*movsf_internal}
     (nil))
(insn 118 117 119 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:131 D.25535 ] [131])
                (const_int 384 [0x180])) [0 _78->vox3+0 S4 A64])
        (reg:SF 21 xmm0 [358])) ge2fitman_sup.cpp:291 129 {*movsf_internal}
     (nil))
(insn 119 118 120 4 (set (reg:SI 0 ax [359])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:292 90 {*movsi_internal}
     (nil))
(insn 120 119 121 4 (set (reg:DI 0 ax [orig:132 D.25534 ] [132])
        (sign_extend:DI (reg:SI 0 ax [359]))) ge2fitman_sup.cpp:292 142 {*extendsidi2_rex64}
     (nil))
(insn 121 120 833 4 (parallel [
            (set (reg:DI 0 ax [orig:133 D.25534 ] [133])
                (ashift:DI (reg:DI 0 ax [orig:133 D.25534 ] [133])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:292 512 {*ashldi3_1}
     (nil))
(insn 833 121 122 4 (set (reg:DI 1 dx [orig:133 D.25534 ] [133])
        (reg:DI 0 ax [orig:133 D.25534 ] [133])) ge2fitman_sup.cpp:292 89 {*movdi_internal}
     (nil))
(insn 122 833 123 4 (set (reg/f:DI 0 ax [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:292 89 {*movdi_internal}
     (nil))
(insn 123 122 124 4 (parallel [
            (set (reg/f:DI 0 ax [orig:134 D.25535 ] [134])
                (plus:DI (reg/f:DI 0 ax [360])
                    (reg:DI 1 dx [orig:133 D.25534 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:292 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:133 D.25534 ] [133]))
        (nil)))
(insn 124 123 125 4 (set (reg:DF 21 xmm0 [361])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0  S8 A64])) ge2fitman_sup.cpp:292 128 {*movdf_internal}
     (nil))
(insn 125 124 126 4 (set (mem/j:DF (plus:DI (reg/f:DI 0 ax [orig:134 D.25535 ] [134])
                (const_int 392 [0x188])) [0 _82->span+0 S8 A64])
        (reg:DF 21 xmm0 [361])) ge2fitman_sup.cpp:292 128 {*movdf_internal}
     (nil))
(insn 126 125 127 4 (set (reg:SI 0 ax [362])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:293 90 {*movsi_internal}
     (nil))
(insn 127 126 128 4 (set (reg:DI 0 ax [orig:135 D.25534 ] [135])
        (sign_extend:DI (reg:SI 0 ax [362]))) ge2fitman_sup.cpp:293 142 {*extendsidi2_rex64}
     (nil))
(insn 128 127 835 4 (parallel [
            (set (reg:DI 0 ax [orig:136 D.25534 ] [136])
                (ashift:DI (reg:DI 0 ax [orig:136 D.25534 ] [136])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:293 512 {*ashldi3_1}
     (nil))
(insn 835 128 129 4 (set (reg:DI 1 dx [orig:136 D.25534 ] [136])
        (reg:DI 0 ax [orig:136 D.25534 ] [136])) ge2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 129 835 130 4 (set (reg/f:DI 0 ax [363])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:293 89 {*movdi_internal}
     (nil))
(insn 130 129 131 4 (parallel [
            (set (reg/f:DI 0 ax [orig:137 D.25535 ] [137])
                (plus:DI (reg/f:DI 0 ax [363])
                    (reg:DI 1 dx [orig:136 D.25534 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:293 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:136 D.25534 ] [136]))
        (nil)))
(insn 131 130 132 4 (set (reg:SF 21 xmm0 [364])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:293 129 {*movsf_internal}
     (nil))
(insn 132 131 133 4 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:137 D.25535 ] [137])
                (const_int 400 [0x190])) [0 _86->vtheta+0 S4 A64])
        (reg:SF 21 xmm0 [364])) ge2fitman_sup.cpp:293 129 {*movsf_internal}
     (nil))
(insn 133 132 134 4 (set (reg:SI 0 ax [365])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:294 90 {*movsi_internal}
     (nil))
(insn 134 133 135 4 (set (reg:DI 0 ax [orig:138 D.25534 ] [138])
        (sign_extend:DI (reg:SI 0 ax [365]))) ge2fitman_sup.cpp:294 142 {*extendsidi2_rex64}
     (nil))
(insn 135 134 837 4 (parallel [
            (set (reg:DI 0 ax [orig:139 D.25534 ] [139])
                (ashift:DI (reg:DI 0 ax [orig:139 D.25534 ] [139])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:294 512 {*ashldi3_1}
     (nil))
(insn 837 135 136 4 (set (reg:DI 1 dx [orig:139 D.25534 ] [139])
        (reg:DI 0 ax [orig:139 D.25534 ] [139])) ge2fitman_sup.cpp:294 89 {*movdi_internal}
     (nil))
(insn 136 837 137 4 (set (reg/f:DI 0 ax [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:294 89 {*movdi_internal}
     (nil))
(insn 137 136 138 4 (parallel [
            (set (reg/f:DI 0 ax [orig:140 D.25535 ] [140])
                (plus:DI (reg/f:DI 0 ax [366])
                    (reg:DI 1 dx [orig:139 D.25534 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:294 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:139 D.25534 ] [139]))
        (nil)))
(insn 138 137 139 4 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:140 D.25535 ] [140])
                (const_int 508 [0x1fc])) [0 _90->num_channels+0 S4 A32])
        (const_int 1 [0x1])) ge2fitman_sup.cpp:294 90 {*movsi_internal}
     (nil))
(insn 139 138 155 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:299 90 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              6 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 367
(code_label 155 139 140 5 66 "" [1 uses])
(note 140 155 141 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 5 (set (reg:SI 0 ax [367])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:299 90 {*movsi_internal}
     (nil))
(insn 142 141 143 5 (set (reg:DI 0 ax [orig:141 D.25534 ] [141])
        (sign_extend:DI (reg:SI 0 ax [367]))) ge2fitman_sup.cpp:299 142 {*extendsidi2_rex64}
     (nil))
(insn 143 142 144 5 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:141 D.25534 ] [141])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:299 8 {*cmpdi_1}
     (nil))
(jump_insn 144 143 145 5 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) ge2fitman_sup.cpp:299 612 {*jcc_1}
     (nil)
 -> 158)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 144 368 369 370 371
(note 145 144 146 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 6 (set (reg:SI 0 ax [368])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:300 90 {*movsi_internal}
     (nil))
(insn 147 146 148 6 (set (reg:DI 0 ax [orig:142 D.25534 ] [142])
        (sign_extend:DI (reg:SI 0 ax [368]))) ge2fitman_sup.cpp:300 142 {*extendsidi2_rex64}
     (nil))
(insn 148 147 839 6 (parallel [
            (set (reg:DI 0 ax [orig:143 D.25534 ] [143])
                (ashift:DI (reg:DI 0 ax [orig:143 D.25534 ] [143])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:300 512 {*ashldi3_1}
     (nil))
(insn 839 148 149 6 (set (reg:DI 1 dx [orig:143 D.25534 ] [143])
        (reg:DI 0 ax [orig:143 D.25534 ] [143])) ge2fitman_sup.cpp:300 89 {*movdi_internal}
     (nil))
(insn 149 839 150 6 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:300 89 {*movdi_internal}
     (nil))
(insn 150 149 151 6 (parallel [
            (set (reg/f:DI 1 dx [orig:144 D.25535 ] [144])
                (plus:DI (reg:DI 1 dx [orig:143 D.25534 ] [143])
                    (reg/f:DI 0 ax [369])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:300 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:143 D.25534 ] [143]))
        (nil)))
(insn 151 150 152 6 (set (reg:SI 0 ax [371])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:300 90 {*movsi_internal}
     (nil))
(insn 152 151 153 6 (set (reg:DI 0 ax [370])
        (sign_extend:DI (reg:SI 0 ax [371]))) ge2fitman_sup.cpp:300 142 {*extendsidi2_rex64}
     (nil))
(insn 153 152 154 6 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:144 D.25535 ] [144])
                    (reg:DI 0 ax [370]))
                (const_int 388 [0x184])) [0 _96->padding_1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:300 93 {*movqi_internal}
     (nil))
(insn 154 153 785 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:299 217 {*addsi_1}
     (nil))
(jump_insn 785 154 786 6 (set (pc)
        (label_ref 155)) ge2fitman_sup.cpp:299 654 {jump}
     (nil)
 -> 155)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 786 785 158)
;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 158 786 159 7 65 "" [1 uses])
(note 159 158 160 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 176 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:304 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              9 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 145 372
(code_label 176 160 161 8 68 "" [1 uses])
(note 161 176 162 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 8 (set (reg:SI 0 ax [372])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:304 90 {*movsi_internal}
     (nil))
(insn 163 162 164 8 (set (reg:DI 0 ax [orig:145 D.25534 ] [145])
        (sign_extend:DI (reg:SI 0 ax [372]))) ge2fitman_sup.cpp:304 142 {*extendsidi2_rex64}
     (nil))
(insn 164 163 165 8 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:145 D.25534 ] [145])
            (const_int 52 [0x34]))) ge2fitman_sup.cpp:304 8 {*cmpdi_1}
     (nil))
(jump_insn 165 164 166 8 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 179)
            (pc))) ge2fitman_sup.cpp:304 612 {*jcc_1}
     (nil)
 -> 179)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 148 373 374 375 376
(note 166 165 167 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 167 166 168 9 (set (reg:SI 0 ax [373])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:305 90 {*movsi_internal}
     (nil))
(insn 168 167 169 9 (set (reg:DI 0 ax [orig:146 D.25534 ] [146])
        (sign_extend:DI (reg:SI 0 ax [373]))) ge2fitman_sup.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 169 168 841 9 (parallel [
            (set (reg:DI 0 ax [orig:147 D.25534 ] [147])
                (ashift:DI (reg:DI 0 ax [orig:147 D.25534 ] [147])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:305 512 {*ashldi3_1}
     (nil))
(insn 841 169 170 9 (set (reg:DI 1 dx [orig:147 D.25534 ] [147])
        (reg:DI 0 ax [orig:147 D.25534 ] [147])) ge2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 170 841 171 9 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:305 89 {*movdi_internal}
     (nil))
(insn 171 170 172 9 (parallel [
            (set (reg/f:DI 1 dx [orig:148 D.25535 ] [148])
                (plus:DI (reg:DI 1 dx [orig:147 D.25534 ] [147])
                    (reg/f:DI 0 ax [374])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:305 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:147 D.25534 ] [147]))
        (nil)))
(insn 172 171 173 9 (set (reg:SI 0 ax [376])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:305 90 {*movsi_internal}
     (nil))
(insn 173 172 174 9 (set (reg:DI 0 ax [375])
        (sign_extend:DI (reg:SI 0 ax [376]))) ge2fitman_sup.cpp:305 142 {*extendsidi2_rex64}
     (nil))
(insn 174 173 175 9 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:148 D.25535 ] [148])
                    (reg:DI 0 ax [375]))
                (const_int 4 [0x4])) [0 _103->ex_datetime S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:305 93 {*movqi_internal}
     (nil))
(insn 175 174 787 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:304 217 {*addsi_1}
     (nil))
(jump_insn 787 175 788 9 (set (pc)
        (label_ref 176)) ge2fitman_sup.cpp:304 654 {jump}
     (nil)
 -> 176)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 788 787 179)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 149 150 151 152 377 378
(code_label 179 788 180 10 67 "" [1 uses])
(note 180 179 181 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 181 180 182 10 (set (reg:SI 0 ax [377])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:307 90 {*movsi_internal}
     (nil))
(insn 182 181 183 10 (set (reg:DI 0 ax [orig:149 D.25534 ] [149])
        (sign_extend:DI (reg:SI 0 ax [377]))) ge2fitman_sup.cpp:307 142 {*extendsidi2_rex64}
     (nil))
(insn 183 182 843 10 (parallel [
            (set (reg:DI 0 ax [orig:150 D.25534 ] [150])
                (ashift:DI (reg:DI 0 ax [orig:150 D.25534 ] [150])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:307 512 {*ashldi3_1}
     (nil))
(insn 843 183 184 10 (set (reg:DI 1 dx [orig:150 D.25534 ] [150])
        (reg:DI 0 ax [orig:150 D.25534 ] [150])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 184 843 185 10 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 185 184 186 10 (parallel [
            (set (reg/f:DI 0 ax [orig:151 D.25535 ] [151])
                (plus:DI (reg/f:DI 0 ax [378])
                    (reg:DI 1 dx [orig:150 D.25534 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:307 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:150 D.25534 ] [150]))
        (nil)))
(insn 186 185 187 10 (parallel [
            (set (reg/f:DI 0 ax [orig:152 D.25536 ] [152])
                (plus:DI (reg/f:DI 0 ax [orig:151 D.25535 ] [151])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:307 218 {*adddi_1}
     (nil))
(insn 187 186 844 10 (set (reg:DI 2 cx [572])
        (const_int 2334399942965096270 [0x2065746144206f4e])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 844 187 188 10 (set (mem:DI (reg/f:DI 0 ax [orig:152 D.25536 ] [152]) [0 MEM[(void *)_109]+0 S8 A8])
        (reg:DI 2 cx [572])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 188 844 845 10 (set (reg:DI 4 si [573])
        (const_int 7809911822066218561 [0x6c62616c69617641])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 845 188 189 10 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:152 D.25536 ] [152])
                (const_int 8 [0x8])) [0 MEM[(void *)_109]+8 S8 A8])
        (reg:DI 4 si [573])) ge2fitman_sup.cpp:307 89 {*movdi_internal}
     (nil))
(insn 189 845 190 10 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:152 D.25536 ] [152])
                (const_int 16 [0x10])) [0 MEM[(void *)_109]+16 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:307 92 {*movhi_internal}
     (nil))
(insn 190 189 206 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:310 90 {*movsi_internal}
     (nil))
;;  succ:       11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;;              12 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 379
(code_label 206 190 191 11 70 "" [1 uses])
(note 191 206 192 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 11 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:310 90 {*movsi_internal}
     (nil))
(insn 193 192 194 11 (set (reg:DI 0 ax [orig:153 D.25534 ] [153])
        (sign_extend:DI (reg:SI 0 ax [379]))) ge2fitman_sup.cpp:310 142 {*extendsidi2_rex64}
     (nil))
(insn 194 193 195 11 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:153 D.25534 ] [153])
            (const_int 260 [0x104]))) ge2fitman_sup.cpp:310 8 {*cmpdi_1}
     (nil))
(jump_insn 195 194 196 11 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 209)
            (pc))) ge2fitman_sup.cpp:310 612 {*jcc_1}
     (nil)
 -> 209)
;;  succ:       13
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 380 381 382 383
(note 196 195 197 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 197 196 198 12 (set (reg:SI 0 ax [380])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:311 90 {*movsi_internal}
     (nil))
(insn 198 197 199 12 (set (reg:DI 0 ax [orig:154 D.25534 ] [154])
        (sign_extend:DI (reg:SI 0 ax [380]))) ge2fitman_sup.cpp:311 142 {*extendsidi2_rex64}
     (nil))
(insn 199 198 847 12 (parallel [
            (set (reg:DI 0 ax [orig:155 D.25534 ] [155])
                (ashift:DI (reg:DI 0 ax [orig:155 D.25534 ] [155])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:311 512 {*ashldi3_1}
     (nil))
(insn 847 199 200 12 (set (reg:DI 1 dx [orig:155 D.25534 ] [155])
        (reg:DI 0 ax [orig:155 D.25534 ] [155])) ge2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 200 847 201 12 (set (reg/f:DI 0 ax [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:311 89 {*movdi_internal}
     (nil))
(insn 201 200 202 12 (parallel [
            (set (reg/f:DI 1 dx [orig:156 D.25535 ] [156])
                (plus:DI (reg:DI 1 dx [orig:155 D.25534 ] [155])
                    (reg/f:DI 0 ax [381])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:311 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:155 D.25534 ] [155]))
        (nil)))
(insn 202 201 203 12 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:311 90 {*movsi_internal}
     (nil))
(insn 203 202 204 12 (set (reg:DI 0 ax [382])
        (sign_extend:DI (reg:SI 0 ax [383]))) ge2fitman_sup.cpp:311 142 {*extendsidi2_rex64}
     (nil))
(insn 204 203 205 12 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:156 D.25535 ] [156])
                    (reg:DI 0 ax [382]))
                (const_int 56 [0x38])) [0 _115->file_name S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:311 93 {*movqi_internal}
     (nil))
(insn 205 204 789 12 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:310 217 {*addsi_1}
     (nil))
(jump_insn 789 205 790 12 (set (pc)
        (label_ref 206)) ge2fitman_sup.cpp:310 654 {jump}
     (nil)
 -> 206)
;;  succ:       11 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 790 789 209)
;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 160 384 385
(code_label 209 790 210 13 69 "" [1 uses])
(note 210 209 211 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 13 (set (reg:SI 0 ax [384])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:313 90 {*movsi_internal}
     (nil))
(insn 212 211 213 13 (set (reg:DI 0 ax [orig:157 D.25534 ] [157])
        (sign_extend:DI (reg:SI 0 ax [384]))) ge2fitman_sup.cpp:313 142 {*extendsidi2_rex64}
     (nil))
(insn 213 212 849 13 (parallel [
            (set (reg:DI 0 ax [orig:158 D.25534 ] [158])
                (ashift:DI (reg:DI 0 ax [orig:158 D.25534 ] [158])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:313 512 {*ashldi3_1}
     (nil))
(insn 849 213 214 13 (set (reg:DI 1 dx [orig:158 D.25534 ] [158])
        (reg:DI 0 ax [orig:158 D.25534 ] [158])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 214 849 215 13 (set (reg/f:DI 0 ax [385])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 215 214 216 13 (parallel [
            (set (reg/f:DI 0 ax [orig:159 D.25535 ] [159])
                (plus:DI (reg/f:DI 0 ax [385])
                    (reg:DI 1 dx [orig:158 D.25534 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:313 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:158 D.25534 ] [158]))
        (nil)))
(insn 216 215 217 13 (parallel [
            (set (reg/f:DI 0 ax [orig:160 D.25537 ] [160])
                (plus:DI (reg/f:DI 0 ax [orig:159 D.25535 ] [159])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:313 218 {*adddi_1}
     (nil))
(insn 217 216 850 13 (set (reg:DI 5 di [576])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 850 217 218 13 (set (mem:DI (reg/f:DI 0 ax [orig:160 D.25537 ] [160]) [0 MEM[(void *)_121]+0 S8 A8])
        (reg:DI 5 di [576])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 218 850 851 13 (set (reg:DI 2 cx [577])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 851 218 219 13 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:160 D.25537 ] [160])
                (const_int 8 [0x8])) [0 MEM[(void *)_121]+8 S8 A8])
        (reg:DI 2 cx [577])) ge2fitman_sup.cpp:313 89 {*movdi_internal}
     (nil))
(insn 219 851 220 13 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:160 D.25537 ] [160])
                (const_int 16 [0x10])) [0 MEM[(void *)_121]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:313 90 {*movsi_internal}
     (nil))
(insn 220 219 221 13 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:160 D.25537 ] [160])
                (const_int 20 [0x14])) [0 MEM[(void *)_121]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:313 92 {*movhi_internal}
     (nil))
(insn 221 220 237 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:316 90 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              15 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 161 386
(code_label 237 221 222 14 72 "" [1 uses])
(note 222 237 223 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 223 222 224 14 (set (reg:SI 0 ax [386])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:316 90 {*movsi_internal}
     (nil))
(insn 224 223 225 14 (set (reg:DI 0 ax [orig:161 D.25534 ] [161])
        (sign_extend:DI (reg:SI 0 ax [386]))) ge2fitman_sup.cpp:316 142 {*extendsidi2_rex64}
     (nil))
(insn 225 224 226 14 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:161 D.25534 ] [161])
            (const_int 36 [0x24]))) ge2fitman_sup.cpp:316 8 {*cmpdi_1}
     (nil))
(jump_insn 226 225 227 14 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 240)
            (pc))) ge2fitman_sup.cpp:316 612 {*jcc_1}
     (nil)
 -> 240)
;;  succ:       16
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 163 164 387 388 389 390
(note 227 226 228 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 15 (set (reg:SI 0 ax [387])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:317 90 {*movsi_internal}
     (nil))
(insn 229 228 230 15 (set (reg:DI 0 ax [orig:162 D.25534 ] [162])
        (sign_extend:DI (reg:SI 0 ax [387]))) ge2fitman_sup.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 230 229 853 15 (parallel [
            (set (reg:DI 0 ax [orig:163 D.25534 ] [163])
                (ashift:DI (reg:DI 0 ax [orig:163 D.25534 ] [163])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:317 512 {*ashldi3_1}
     (nil))
(insn 853 230 231 15 (set (reg:DI 1 dx [orig:163 D.25534 ] [163])
        (reg:DI 0 ax [orig:163 D.25534 ] [163])) ge2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 231 853 232 15 (set (reg/f:DI 0 ax [388])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:317 89 {*movdi_internal}
     (nil))
(insn 232 231 233 15 (parallel [
            (set (reg/f:DI 1 dx [orig:164 D.25535 ] [164])
                (plus:DI (reg:DI 1 dx [orig:163 D.25534 ] [163])
                    (reg/f:DI 0 ax [388])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:317 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:163 D.25534 ] [163]))
        (nil)))
(insn 233 232 234 15 (set (reg:SI 0 ax [390])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:317 90 {*movsi_internal}
     (nil))
(insn 234 233 235 15 (set (reg:DI 0 ax [389])
        (sign_extend:DI (reg:SI 0 ax [390]))) ge2fitman_sup.cpp:317 142 {*extendsidi2_rex64}
     (nil))
(insn 235 234 236 15 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:164 D.25535 ] [164])
                    (reg:DI 0 ax [389]))
                (const_int 404 [0x194])) [0 _127->hospname S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:317 93 {*movqi_internal}
     (nil))
(insn 236 235 791 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:316 217 {*addsi_1}
     (nil))
(jump_insn 791 236 792 15 (set (pc)
        (label_ref 237)) ge2fitman_sup.cpp:316 654 {jump}
     (nil)
 -> 237)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 792 791 240)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165 166 167 168 391 392
(code_label 240 792 241 16 71 "" [1 uses])
(note 241 240 242 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 16 (set (reg:SI 0 ax [391])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:319 90 {*movsi_internal}
     (nil))
(insn 243 242 244 16 (set (reg:DI 0 ax [orig:165 D.25534 ] [165])
        (sign_extend:DI (reg:SI 0 ax [391]))) ge2fitman_sup.cpp:319 142 {*extendsidi2_rex64}
     (nil))
(insn 244 243 855 16 (parallel [
            (set (reg:DI 0 ax [orig:166 D.25534 ] [166])
                (ashift:DI (reg:DI 0 ax [orig:166 D.25534 ] [166])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:319 512 {*ashldi3_1}
     (nil))
(insn 855 244 245 16 (set (reg:DI 1 dx [orig:166 D.25534 ] [166])
        (reg:DI 0 ax [orig:166 D.25534 ] [166])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 245 855 246 16 (set (reg/f:DI 0 ax [392])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 246 245 247 16 (parallel [
            (set (reg/f:DI 0 ax [orig:167 D.25535 ] [167])
                (plus:DI (reg/f:DI 0 ax [392])
                    (reg:DI 1 dx [orig:166 D.25534 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:319 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:166 D.25534 ] [166]))
        (nil)))
(insn 247 246 248 16 (parallel [
            (set (reg/f:DI 0 ax [orig:168 D.25538 ] [168])
                (plus:DI (reg/f:DI 0 ax [orig:167 D.25535 ] [167])
                    (const_int 404 [0x194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:319 218 {*adddi_1}
     (nil))
(insn 248 247 856 16 (set (reg:DI 4 si [580])
        (const_int 7597699493162676046 [0x6970736f48206f4e])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 856 248 249 16 (set (mem:DI (reg/f:DI 0 ax [orig:168 D.25538 ] [168]) [0 MEM[(void *)_133]+0 S8 A8])
        (reg:DI 4 si [580])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 249 856 857 16 (set (reg:DI 5 di [581])
        (const_int 7308604758471500148 [0x656d614e206c6174])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 857 249 250 16 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:168 D.25538 ] [168])
                (const_int 8 [0x8])) [0 MEM[(void *)_133]+8 S8 A8])
        (reg:DI 5 di [581])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 250 857 858 16 (set (reg:DI 2 cx [582])
        (const_int 7089066488320377120 [0x62616c6961764120])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 858 250 251 16 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:168 D.25538 ] [168])
                (const_int 16 [0x10])) [0 MEM[(void *)_133]+16 S8 A8])
        (reg:DI 2 cx [582])) ge2fitman_sup.cpp:319 89 {*movdi_internal}
     (nil))
(insn 251 858 252 16 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:168 D.25538 ] [168])
                (const_int 24 [0x18])) [0 MEM[(void *)_133]+24 S2 A8])
        (const_int 25964 [0x656c])) ge2fitman_sup.cpp:319 92 {*movhi_internal}
     (nil))
(insn 252 251 253 16 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:168 D.25538 ] [168])
                (const_int 26 [0x1a])) [0 MEM[(void *)_133]+26 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:319 93 {*movqi_internal}
     (nil))
(insn 253 252 269 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:322 90 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              18 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169 393
(code_label 269 253 254 17 74 "" [1 uses])
(note 254 269 255 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 17 (set (reg:SI 0 ax [393])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:322 90 {*movsi_internal}
     (nil))
(insn 256 255 257 17 (set (reg:DI 0 ax [orig:169 D.25534 ] [169])
        (sign_extend:DI (reg:SI 0 ax [393]))) ge2fitman_sup.cpp:322 142 {*extendsidi2_rex64}
     (nil))
(insn 257 256 258 17 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:169 D.25534 ] [169])
            (const_int 28 [0x1c]))) ge2fitman_sup.cpp:322 8 {*cmpdi_1}
     (nil))
(jump_insn 258 257 259 17 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 272)
            (pc))) ge2fitman_sup.cpp:322 612 {*jcc_1}
     (nil)
 -> 272)
;;  succ:       19
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 170 171 172 394 395 396 397
(note 259 258 260 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 18 (set (reg:SI 0 ax [394])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:323 90 {*movsi_internal}
     (nil))
(insn 261 260 262 18 (set (reg:DI 0 ax [orig:170 D.25534 ] [170])
        (sign_extend:DI (reg:SI 0 ax [394]))) ge2fitman_sup.cpp:323 142 {*extendsidi2_rex64}
     (nil))
(insn 262 261 860 18 (parallel [
            (set (reg:DI 0 ax [orig:171 D.25534 ] [171])
                (ashift:DI (reg:DI 0 ax [orig:171 D.25534 ] [171])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:323 512 {*ashldi3_1}
     (nil))
(insn 860 262 263 18 (set (reg:DI 1 dx [orig:171 D.25534 ] [171])
        (reg:DI 0 ax [orig:171 D.25534 ] [171])) ge2fitman_sup.cpp:323 89 {*movdi_internal}
     (nil))
(insn 263 860 264 18 (set (reg/f:DI 0 ax [395])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:323 89 {*movdi_internal}
     (nil))
(insn 264 263 265 18 (parallel [
            (set (reg/f:DI 1 dx [orig:172 D.25535 ] [172])
                (plus:DI (reg:DI 1 dx [orig:171 D.25534 ] [171])
                    (reg/f:DI 0 ax [395])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:323 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:171 D.25534 ] [171]))
        (nil)))
(insn 265 264 266 18 (set (reg:SI 0 ax [397])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:323 90 {*movsi_internal}
     (nil))
(insn 266 265 267 18 (set (reg:DI 0 ax [396])
        (sign_extend:DI (reg:SI 0 ax [397]))) ge2fitman_sup.cpp:323 142 {*extendsidi2_rex64}
     (nil))
(insn 267 266 268 18 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:172 D.25535 ] [172])
                    (reg:DI 0 ax [396]))
                (const_int 440 [0x1b8])) [0 _139->patname S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:323 93 {*movqi_internal}
     (nil))
(insn 268 267 793 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:322 217 {*addsi_1}
     (nil))
(jump_insn 793 268 794 18 (set (pc)
        (label_ref 269)) ge2fitman_sup.cpp:322 654 {jump}
     (nil)
 -> 269)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 794 793 272)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 173 174 175 176 398 399
(code_label 272 794 273 19 73 "" [1 uses])
(note 273 272 274 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 19 (set (reg:SI 0 ax [398])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:325 90 {*movsi_internal}
     (nil))
(insn 275 274 276 19 (set (reg:DI 0 ax [orig:173 D.25534 ] [173])
        (sign_extend:DI (reg:SI 0 ax [398]))) ge2fitman_sup.cpp:325 142 {*extendsidi2_rex64}
     (nil))
(insn 276 275 862 19 (parallel [
            (set (reg:DI 0 ax [orig:174 D.25534 ] [174])
                (ashift:DI (reg:DI 0 ax [orig:174 D.25534 ] [174])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:325 512 {*ashldi3_1}
     (nil))
(insn 862 276 277 19 (set (reg:DI 1 dx [orig:174 D.25534 ] [174])
        (reg:DI 0 ax [orig:174 D.25534 ] [174])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 277 862 278 19 (set (reg/f:DI 0 ax [399])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 278 277 279 19 (parallel [
            (set (reg/f:DI 0 ax [orig:175 D.25535 ] [175])
                (plus:DI (reg/f:DI 0 ax [399])
                    (reg:DI 1 dx [orig:174 D.25534 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:325 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:174 D.25534 ] [174]))
        (nil)))
(insn 279 278 280 19 (parallel [
            (set (reg/f:DI 0 ax [orig:176 D.25539 ] [176])
                (plus:DI (reg/f:DI 0 ax [orig:175 D.25535 ] [175])
                    (const_int 440 [0x1b8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:325 218 {*adddi_1}
     (nil))
(insn 280 279 863 19 (set (reg:DI 4 si [585])
        (const_int 7307499831690293070 [0x6569746150206f4e])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 863 280 281 19 (set (mem:DI (reg/f:DI 0 ax [orig:176 D.25539 ] [176]) [0 MEM[(void *)_145]+0 S8 A8])
        (reg:DI 4 si [585])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 281 863 864 19 (set (reg:DI 5 di [586])
        (const_int 2334392246551475310 [0x20656d614e20746e])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 864 281 282 19 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:176 D.25539 ] [176])
                (const_int 8 [0x8])) [0 MEM[(void *)_145]+8 S8 A8])
        (reg:DI 5 di [586])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 282 864 865 19 (set (reg:DI 2 cx [587])
        (const_int 7809911822066218561 [0x6c62616c69617641])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 865 282 283 19 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:176 D.25539 ] [176])
                (const_int 16 [0x10])) [0 MEM[(void *)_145]+16 S8 A8])
        (reg:DI 2 cx [587])) ge2fitman_sup.cpp:325 89 {*movdi_internal}
     (nil))
(insn 283 865 284 19 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:176 D.25539 ] [176])
                (const_int 24 [0x18])) [0 MEM[(void *)_145]+24 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:325 92 {*movhi_internal}
     (nil))
(insn 284 283 300 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:328 90 {*movsi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              21 [100.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 177 400
(code_label 300 284 285 20 76 "" [1 uses])
(note 285 300 286 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 286 285 287 20 (set (reg:SI 0 ax [400])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:328 90 {*movsi_internal}
     (nil))
(insn 287 286 288 20 (set (reg:DI 0 ax [orig:177 D.25534 ] [177])
        (sign_extend:DI (reg:SI 0 ax [400]))) ge2fitman_sup.cpp:328 142 {*extendsidi2_rex64}
     (nil))
(insn 288 287 289 20 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:177 D.25534 ] [177])
            (const_int 40 [0x28]))) ge2fitman_sup.cpp:328 8 {*cmpdi_1}
     (nil))
(jump_insn 289 288 290 20 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 303)
            (pc))) ge2fitman_sup.cpp:328 612 {*jcc_1}
     (nil)
 -> 303)
;;  succ:       22
;;              21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 178 179 180 401 402 403 404
(note 290 289 291 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 291 290 292 21 (set (reg:SI 0 ax [401])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:329 90 {*movsi_internal}
     (nil))
(insn 292 291 293 21 (set (reg:DI 0 ax [orig:178 D.25534 ] [178])
        (sign_extend:DI (reg:SI 0 ax [401]))) ge2fitman_sup.cpp:329 142 {*extendsidi2_rex64}
     (nil))
(insn 293 292 867 21 (parallel [
            (set (reg:DI 0 ax [orig:179 D.25534 ] [179])
                (ashift:DI (reg:DI 0 ax [orig:179 D.25534 ] [179])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:329 512 {*ashldi3_1}
     (nil))
(insn 867 293 294 21 (set (reg:DI 1 dx [orig:179 D.25534 ] [179])
        (reg:DI 0 ax [orig:179 D.25534 ] [179])) ge2fitman_sup.cpp:329 89 {*movdi_internal}
     (nil))
(insn 294 867 295 21 (set (reg/f:DI 0 ax [402])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:329 89 {*movdi_internal}
     (nil))
(insn 295 294 296 21 (parallel [
            (set (reg/f:DI 1 dx [orig:180 D.25535 ] [180])
                (plus:DI (reg:DI 1 dx [orig:179 D.25534 ] [179])
                    (reg/f:DI 0 ax [402])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:329 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:179 D.25534 ] [179]))
        (nil)))
(insn 296 295 297 21 (set (reg:SI 0 ax [404])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:329 90 {*movsi_internal}
     (nil))
(insn 297 296 298 21 (set (reg:DI 0 ax [403])
        (sign_extend:DI (reg:SI 0 ax [404]))) ge2fitman_sup.cpp:329 142 {*extendsidi2_rex64}
     (nil))
(insn 298 297 299 21 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:180 D.25535 ] [180])
                    (reg:DI 0 ax [403]))
                (const_int 468 [0x1d4])) [0 _151->psdname S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:329 93 {*movqi_internal}
     (nil))
(insn 299 298 795 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:328 217 {*addsi_1}
     (nil))
(jump_insn 795 299 796 21 (set (pc)
        (label_ref 300)) ge2fitman_sup.cpp:328 654 {jump}
     (nil)
 -> 300)
;;  succ:       20 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 796 795 303)
;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags
(code_label 303 796 304 22 75 "" [1 uses])
(note 304 303 305 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 305 304 306 22 (set (reg:SI 0 ax [405])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:331 90 {*movsi_internal}
     (nil))
(insn 306 305 307 22 (set (reg:DI 0 ax [orig:181 D.25534 ] [181])
        (sign_extend:DI (reg:SI 0 ax [405]))) ge2fitman_sup.cpp:331 142 {*extendsidi2_rex64}
     (nil))
(insn 307 306 869 22 (parallel [
            (set (reg:DI 0 ax [orig:182 D.25534 ] [182])
                (ashift:DI (reg:DI 0 ax [orig:182 D.25534 ] [182])
                    (const_int 9 [0x9])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:331 512 {*ashldi3_1}
     (nil))
(insn 869 307 308 22 (set (reg:DI 1 dx [orig:182 D.25534 ] [182])
        (reg:DI 0 ax [orig:182 D.25534 ] [182])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 308 869 309 22 (set (reg/f:DI 0 ax [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 309 308 310 22 (parallel [
            (set (reg/f:DI 0 ax [orig:183 D.25535 ] [183])
                (plus:DI (reg/f:DI 0 ax [406])
                    (reg:DI 1 dx [orig:182 D.25534 ] [182])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:331 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (reg:DI 1 dx [orig:182 D.25534 ] [182]))
        (nil)))
(insn 310 309 311 22 (parallel [
            (set (reg/f:DI 0 ax [orig:184 D.25540 ] [184])
                (plus:DI (reg/f:DI 0 ax [orig:183 D.25535 ] [183])
                    (const_int 468 [0x1d4])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:331 218 {*adddi_1}
     (nil))
(insn 311 310 870 22 (set (reg:DI 4 si [590])
        (const_int 7310305871263723342 [0x65736c7550206f4e])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 870 311 312 22 (set (mem:DI (reg/f:DI 0 ax [orig:184 D.25540 ] [184]) [0 MEM[(void *)_157]+0 S8 A8])
        (reg:DI 4 si [590])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 312 870 871 22 (set (reg:DI 5 di [591])
        (const_int 7164775612281082656 [0x636e657571655320])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 871 312 313 22 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:184 D.25540 ] [184])
                (const_int 8 [0x8])) [0 MEM[(void *)_157]+8 S8 A8])
        (reg:DI 5 di [591])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 313 871 872 22 (set (reg:DI 2 cx [592])
        (const_int 4692862332178407525 [0x4120656d614e2065])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 872 313 314 22 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:184 D.25540 ] [184])
                (const_int 16 [0x10])) [0 MEM[(void *)_157]+16 S8 A8])
        (reg:DI 2 cx [592])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 314 872 873 22 (set (reg:DI 4 si [593])
        (const_int 7308324465885667702 [0x656c62616c696176])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 873 314 315 22 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:184 D.25540 ] [184])
                (const_int 24 [0x18])) [0 MEM[(void *)_157]+24 S8 A8])
        (reg:DI 4 si [593])) ge2fitman_sup.cpp:331 89 {*movdi_internal}
     (nil))
(insn 315 873 316 22 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:184 D.25540 ] [184])
                (const_int 32 [0x20])) [0 MEM[(void *)_157]+32 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:331 93 {*movqi_internal}
     (nil))
(insn 316 315 317 22 (set (reg:SI 0 ax [407])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:335 90 {*movsi_internal}
     (nil))
(insn 317 316 318 22 (set (reg:DI 1 dx [orig:185 D.25534 ] [185])
        (sign_extend:DI (reg:SI 0 ax [407]))) ge2fitman_sup.cpp:335 142 {*extendsidi2_rex64}
     (nil))
(insn 318 317 319 22 (set (reg:DI 0 ax [408])
        (reg:DI 1 dx [orig:185 D.25534 ] [185])) ge2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 319 318 320 22 (parallel [
            (set (reg:DI 0 ax [408])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 512 {*ashldi3_1}
     (nil))
(insn 320 319 321 22 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg:DI 0 ax [408])
                    (reg:DI 1 dx [orig:185 D.25534 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:185 D.25534 ] [185])
            (const_int 9 [0x9]))
        (nil)))
(insn 321 320 322 22 (parallel [
            (set (reg:DI 0 ax [408])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 512 {*ashldi3_1}
     (nil))
(insn 322 321 323 22 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg:DI 0 ax [408])
                    (reg:DI 1 dx [orig:185 D.25534 ] [185])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:185 D.25534 ] [185])
            (const_int 19 [0x13]))
        (nil)))
(insn 323 322 325 22 (parallel [
            (set (reg:DI 0 ax [409])
                (ashift:DI (reg:DI 0 ax [408])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 512 {*ashldi3_1}
     (nil))
(insn 325 323 326 22 (set (reg:DI 1 dx [orig:186 D.25534 ] [186])
        (reg:DI 0 ax [408])) ge2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 326 325 327 22 (set (reg/f:DI 0 ax [410])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:335 89 {*movdi_internal}
     (nil))
(insn 327 326 328 22 (parallel [
            (set (reg/f:DI 0 ax [orig:187 D.25541 ] [187])
                (plus:DI (reg/f:DI 0 ax [410])
                    (reg:DI 1 dx [orig:186 D.25534 ] [186])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:335 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:186 D.25534 ] [186]))
        (nil)))
(insn 328 327 329 22 (set (mem/j:SI (reg/f:DI 0 ax [orig:187 D.25541 ] [187]) [0 _162->fid_scale+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:335 90 {*movsi_internal}
     (nil))
(insn 329 328 330 22 (set (reg:SI 0 ax [411])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:336 90 {*movsi_internal}
     (nil))
(insn 330 329 331 22 (set (reg:DI 1 dx [orig:188 D.25534 ] [188])
        (sign_extend:DI (reg:SI 0 ax [411]))) ge2fitman_sup.cpp:336 142 {*extendsidi2_rex64}
     (nil))
(insn 331 330 332 22 (set (reg:DI 0 ax [412])
        (reg:DI 1 dx [orig:188 D.25534 ] [188])) ge2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 332 331 333 22 (parallel [
            (set (reg:DI 0 ax [412])
                (ashift:DI (reg:DI 0 ax [412])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 512 {*ashldi3_1}
     (nil))
(insn 333 332 334 22 (parallel [
            (set (reg:DI 0 ax [412])
                (plus:DI (reg:DI 0 ax [412])
                    (reg:DI 1 dx [orig:188 D.25534 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:188 D.25534 ] [188])
            (const_int 9 [0x9]))
        (nil)))
(insn 334 333 335 22 (parallel [
            (set (reg:DI 0 ax [412])
                (ashift:DI (reg:DI 0 ax [412])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 512 {*ashldi3_1}
     (nil))
(insn 335 334 336 22 (parallel [
            (set (reg:DI 0 ax [412])
                (plus:DI (reg:DI 0 ax [412])
                    (reg:DI 1 dx [orig:188 D.25534 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:188 D.25534 ] [188])
            (const_int 19 [0x13]))
        (nil)))
(insn 336 335 338 22 (parallel [
            (set (reg:DI 0 ax [413])
                (ashift:DI (reg:DI 0 ax [412])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 512 {*ashldi3_1}
     (nil))
(insn 338 336 339 22 (set (reg:DI 1 dx [orig:189 D.25534 ] [189])
        (reg:DI 0 ax [412])) ge2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 339 338 340 22 (set (reg/f:DI 0 ax [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:336 89 {*movdi_internal}
     (nil))
(insn 340 339 341 22 (parallel [
            (set (reg/f:DI 0 ax [orig:190 D.25541 ] [190])
                (plus:DI (reg/f:DI 0 ax [414])
                    (reg:DI 1 dx [orig:189 D.25534 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:336 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:189 D.25534 ] [189]))
        (nil)))
(insn 341 340 342 22 (set (reg:SF 21 xmm0 [415])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:336 129 {*movsf_internal}
     (nil))
(insn 342 341 343 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:190 D.25541 ] [190])
                (const_int 4 [0x4])) [0 _166->scale_factor+0 S4 A32])
        (reg:SF 21 xmm0 [415])) ge2fitman_sup.cpp:336 129 {*movsf_internal}
     (nil))
(insn 343 342 344 22 (set (reg:SI 0 ax [416])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:337 90 {*movsi_internal}
     (nil))
(insn 344 343 345 22 (set (reg:DI 1 dx [orig:191 D.25534 ] [191])
        (sign_extend:DI (reg:SI 0 ax [416]))) ge2fitman_sup.cpp:337 142 {*extendsidi2_rex64}
     (nil))
(insn 345 344 346 22 (set (reg:DI 0 ax [417])
        (reg:DI 1 dx [orig:191 D.25534 ] [191])) ge2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 346 345 347 22 (parallel [
            (set (reg:DI 0 ax [417])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 512 {*ashldi3_1}
     (nil))
(insn 347 346 348 22 (parallel [
            (set (reg:DI 0 ax [417])
                (plus:DI (reg:DI 0 ax [417])
                    (reg:DI 1 dx [orig:191 D.25534 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:191 D.25534 ] [191])
            (const_int 9 [0x9]))
        (nil)))
(insn 348 347 349 22 (parallel [
            (set (reg:DI 0 ax [417])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 512 {*ashldi3_1}
     (nil))
(insn 349 348 350 22 (parallel [
            (set (reg:DI 0 ax [417])
                (plus:DI (reg:DI 0 ax [417])
                    (reg:DI 1 dx [orig:191 D.25534 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:191 D.25534 ] [191])
            (const_int 19 [0x13]))
        (nil)))
(insn 350 349 352 22 (parallel [
            (set (reg:DI 0 ax [418])
                (ashift:DI (reg:DI 0 ax [417])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 512 {*ashldi3_1}
     (nil))
(insn 352 350 353 22 (set (reg:DI 1 dx [orig:192 D.25534 ] [192])
        (reg:DI 0 ax [417])) ge2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 353 352 354 22 (set (reg/f:DI 0 ax [419])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:337 89 {*movdi_internal}
     (nil))
(insn 354 353 355 22 (parallel [
            (set (reg/f:DI 0 ax [orig:193 D.25541 ] [193])
                (plus:DI (reg/f:DI 0 ax [419])
                    (reg:DI 1 dx [orig:192 D.25534 ] [192])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:337 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:192 D.25534 ] [192]))
        (nil)))
(insn 355 354 356 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:193 D.25541 ] [193])
                (const_int 8 [0x8])) [0 _170->scaleby+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:337 90 {*movsi_internal}
     (nil))
(insn 356 355 357 22 (set (reg:SI 0 ax [420])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:338 90 {*movsi_internal}
     (nil))
(insn 357 356 358 22 (set (reg:DI 1 dx [orig:194 D.25534 ] [194])
        (sign_extend:DI (reg:SI 0 ax [420]))) ge2fitman_sup.cpp:338 142 {*extendsidi2_rex64}
     (nil))
(insn 358 357 359 22 (set (reg:DI 0 ax [421])
        (reg:DI 1 dx [orig:194 D.25534 ] [194])) ge2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 359 358 360 22 (parallel [
            (set (reg:DI 0 ax [421])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 512 {*ashldi3_1}
     (nil))
(insn 360 359 361 22 (parallel [
            (set (reg:DI 0 ax [421])
                (plus:DI (reg:DI 0 ax [421])
                    (reg:DI 1 dx [orig:194 D.25534 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:194 D.25534 ] [194])
            (const_int 9 [0x9]))
        (nil)))
(insn 361 360 362 22 (parallel [
            (set (reg:DI 0 ax [421])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 512 {*ashldi3_1}
     (nil))
(insn 362 361 363 22 (parallel [
            (set (reg:DI 0 ax [421])
                (plus:DI (reg:DI 0 ax [421])
                    (reg:DI 1 dx [orig:194 D.25534 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:194 D.25534 ] [194])
            (const_int 19 [0x13]))
        (nil)))
(insn 363 362 365 22 (parallel [
            (set (reg:DI 0 ax [422])
                (ashift:DI (reg:DI 0 ax [421])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 512 {*ashldi3_1}
     (nil))
(insn 365 363 366 22 (set (reg:DI 1 dx [orig:195 D.25534 ] [195])
        (reg:DI 0 ax [421])) ge2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 366 365 367 22 (set (reg/f:DI 0 ax [423])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:338 89 {*movdi_internal}
     (nil))
(insn 367 366 368 22 (parallel [
            (set (reg/f:DI 0 ax [orig:196 D.25541 ] [196])
                (plus:DI (reg/f:DI 0 ax [423])
                    (reg:DI 1 dx [orig:195 D.25534 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:338 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:195 D.25534 ] [195]))
        (nil)))
(insn 368 367 369 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:196 D.25541 ] [196])
                (const_int 12 [0xc])) [0 _174->pre_ecc+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:338 90 {*movsi_internal}
     (nil))
(insn 369 368 370 22 (set (reg:SI 0 ax [424])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:339 90 {*movsi_internal}
     (nil))
(insn 370 369 371 22 (set (reg:DI 1 dx [orig:197 D.25534 ] [197])
        (sign_extend:DI (reg:SI 0 ax [424]))) ge2fitman_sup.cpp:339 142 {*extendsidi2_rex64}
     (nil))
(insn 371 370 372 22 (set (reg:DI 0 ax [425])
        (reg:DI 1 dx [orig:197 D.25534 ] [197])) ge2fitman_sup.cpp:339 89 {*movdi_internal}
     (nil))
(insn 372 371 373 22 (parallel [
            (set (reg:DI 0 ax [425])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 512 {*ashldi3_1}
     (nil))
(insn 373 372 374 22 (parallel [
            (set (reg:DI 0 ax [425])
                (plus:DI (reg:DI 0 ax [425])
                    (reg:DI 1 dx [orig:197 D.25534 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:197 D.25534 ] [197])
            (const_int 9 [0x9]))
        (nil)))
(insn 374 373 375 22 (parallel [
            (set (reg:DI 0 ax [425])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 512 {*ashldi3_1}
     (nil))
(insn 375 374 376 22 (parallel [
            (set (reg:DI 0 ax [425])
                (plus:DI (reg:DI 0 ax [425])
                    (reg:DI 1 dx [orig:197 D.25534 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:197 D.25534 ] [197])
            (const_int 19 [0x13]))
        (nil)))
(insn 376 375 378 22 (parallel [
            (set (reg:DI 0 ax [426])
                (ashift:DI (reg:DI 0 ax [425])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 512 {*ashldi3_1}
     (nil))
(insn 378 376 379 22 (set (reg:DI 1 dx [orig:198 D.25534 ] [198])
        (reg:DI 0 ax [425])) ge2fitman_sup.cpp:339 89 {*movdi_internal}
     (nil))
(insn 379 378 380 22 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:339 89 {*movdi_internal}
     (nil))
(insn 380 379 381 22 (parallel [
            (set (reg/f:DI 0 ax [orig:199 D.25541 ] [199])
                (plus:DI (reg/f:DI 0 ax [427])
                    (reg:DI 1 dx [orig:198 D.25534 ] [198])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:339 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:198 D.25534 ] [198]))
        (nil)))
(insn 381 380 382 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:199 D.25541 ] [199])
                (const_int 16 [0x10])) [0 _178->bc+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:339 90 {*movsi_internal}
     (nil))
(insn 382 381 383 22 (set (reg:SI 0 ax [428])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:340 90 {*movsi_internal}
     (nil))
(insn 383 382 384 22 (set (reg:DI 1 dx [orig:200 D.25534 ] [200])
        (sign_extend:DI (reg:SI 0 ax [428]))) ge2fitman_sup.cpp:340 142 {*extendsidi2_rex64}
     (nil))
(insn 384 383 385 22 (set (reg:DI 0 ax [429])
        (reg:DI 1 dx [orig:200 D.25534 ] [200])) ge2fitman_sup.cpp:340 89 {*movdi_internal}
     (nil))
(insn 385 384 386 22 (parallel [
            (set (reg:DI 0 ax [429])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 512 {*ashldi3_1}
     (nil))
(insn 386 385 387 22 (parallel [
            (set (reg:DI 0 ax [429])
                (plus:DI (reg:DI 0 ax [429])
                    (reg:DI 1 dx [orig:200 D.25534 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:200 D.25534 ] [200])
            (const_int 9 [0x9]))
        (nil)))
(insn 387 386 388 22 (parallel [
            (set (reg:DI 0 ax [429])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 512 {*ashldi3_1}
     (nil))
(insn 388 387 389 22 (parallel [
            (set (reg:DI 0 ax [429])
                (plus:DI (reg:DI 0 ax [429])
                    (reg:DI 1 dx [orig:200 D.25534 ] [200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:200 D.25534 ] [200])
            (const_int 19 [0x13]))
        (nil)))
(insn 389 388 391 22 (parallel [
            (set (reg:DI 0 ax [430])
                (ashift:DI (reg:DI 0 ax [429])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 512 {*ashldi3_1}
     (nil))
(insn 391 389 392 22 (set (reg:DI 1 dx [orig:201 D.25534 ] [201])
        (reg:DI 0 ax [429])) ge2fitman_sup.cpp:340 89 {*movdi_internal}
     (nil))
(insn 392 391 393 22 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:340 89 {*movdi_internal}
     (nil))
(insn 393 392 394 22 (parallel [
            (set (reg/f:DI 0 ax [orig:202 D.25541 ] [202])
                (plus:DI (reg/f:DI 0 ax [431])
                    (reg:DI 1 dx [orig:201 D.25534 ] [201])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:340 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:201 D.25534 ] [201]))
        (nil)))
(insn 394 393 395 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:202 D.25541 ] [202])
                (const_int 20 [0x14])) [0 _182->file_type+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:340 90 {*movsi_internal}
     (nil))
(insn 395 394 396 22 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:341 90 {*movsi_internal}
     (nil))
(insn 396 395 397 22 (set (reg:DI 1 dx [orig:203 D.25534 ] [203])
        (sign_extend:DI (reg:SI 0 ax [432]))) ge2fitman_sup.cpp:341 142 {*extendsidi2_rex64}
     (nil))
(insn 397 396 398 22 (set (reg:DI 0 ax [433])
        (reg:DI 1 dx [orig:203 D.25534 ] [203])) ge2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 398 397 399 22 (parallel [
            (set (reg:DI 0 ax [433])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 512 {*ashldi3_1}
     (nil))
(insn 399 398 400 22 (parallel [
            (set (reg:DI 0 ax [433])
                (plus:DI (reg:DI 0 ax [433])
                    (reg:DI 1 dx [orig:203 D.25534 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:203 D.25534 ] [203])
            (const_int 9 [0x9]))
        (nil)))
(insn 400 399 401 22 (parallel [
            (set (reg:DI 0 ax [433])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 512 {*ashldi3_1}
     (nil))
(insn 401 400 402 22 (parallel [
            (set (reg:DI 0 ax [433])
                (plus:DI (reg:DI 0 ax [433])
                    (reg:DI 1 dx [orig:203 D.25534 ] [203])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:203 D.25534 ] [203])
            (const_int 19 [0x13]))
        (nil)))
(insn 402 401 404 22 (parallel [
            (set (reg:DI 0 ax [434])
                (ashift:DI (reg:DI 0 ax [433])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 512 {*ashldi3_1}
     (nil))
(insn 404 402 405 22 (set (reg:DI 1 dx [orig:204 D.25534 ] [204])
        (reg:DI 0 ax [433])) ge2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 405 404 406 22 (set (reg/f:DI 0 ax [435])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:341 89 {*movdi_internal}
     (nil))
(insn 406 405 407 22 (parallel [
            (set (reg/f:DI 0 ax [orig:205 D.25541 ] [205])
                (plus:DI (reg/f:DI 0 ax [435])
                    (reg:DI 1 dx [orig:204 D.25534 ] [204])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:341 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:204 D.25534 ] [204]))
        (nil)))
(insn 407 406 408 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:205 D.25541 ] [205])
                (const_int 24 [0x18])) [0 _186->data_zero_fill+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:341 90 {*movsi_internal}
     (nil))
(insn 408 407 409 22 (set (reg:SI 0 ax [436])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:342 90 {*movsi_internal}
     (nil))
(insn 409 408 410 22 (set (reg:DI 1 dx [orig:206 D.25534 ] [206])
        (sign_extend:DI (reg:SI 0 ax [436]))) ge2fitman_sup.cpp:342 142 {*extendsidi2_rex64}
     (nil))
(insn 410 409 411 22 (set (reg:DI 0 ax [437])
        (reg:DI 1 dx [orig:206 D.25534 ] [206])) ge2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 411 410 412 22 (parallel [
            (set (reg:DI 0 ax [437])
                (ashift:DI (reg:DI 0 ax [437])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 512 {*ashldi3_1}
     (nil))
(insn 412 411 413 22 (parallel [
            (set (reg:DI 0 ax [437])
                (plus:DI (reg:DI 0 ax [437])
                    (reg:DI 1 dx [orig:206 D.25534 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:206 D.25534 ] [206])
            (const_int 9 [0x9]))
        (nil)))
(insn 413 412 414 22 (parallel [
            (set (reg:DI 0 ax [437])
                (ashift:DI (reg:DI 0 ax [437])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 512 {*ashldi3_1}
     (nil))
(insn 414 413 415 22 (parallel [
            (set (reg:DI 0 ax [437])
                (plus:DI (reg:DI 0 ax [437])
                    (reg:DI 1 dx [orig:206 D.25534 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:206 D.25534 ] [206])
            (const_int 19 [0x13]))
        (nil)))
(insn 415 414 417 22 (parallel [
            (set (reg:DI 0 ax [438])
                (ashift:DI (reg:DI 0 ax [437])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 512 {*ashldi3_1}
     (nil))
(insn 417 415 418 22 (set (reg:DI 1 dx [orig:207 D.25534 ] [207])
        (reg:DI 0 ax [437])) ge2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 418 417 419 22 (set (reg/f:DI 0 ax [439])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:342 89 {*movdi_internal}
     (nil))
(insn 419 418 420 22 (parallel [
            (set (reg/f:DI 0 ax [orig:208 D.25541 ] [208])
                (plus:DI (reg/f:DI 0 ax [439])
                    (reg:DI 1 dx [orig:207 D.25534 ] [207])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:342 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:207 D.25534 ] [207]))
        (nil)))
(insn 420 419 421 22 (set (reg:SF 21 xmm0 [440])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:342 129 {*movsf_internal}
     (nil))
(insn 421 420 422 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:208 D.25541 ] [208])
                (const_int 28 [0x1c])) [0 _190->comp_filter+0 S4 A32])
        (reg:SF 21 xmm0 [440])) ge2fitman_sup.cpp:342 129 {*movsf_internal}
     (nil))
(insn 422 421 423 22 (set (reg:SI 0 ax [441])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:343 90 {*movsi_internal}
     (nil))
(insn 423 422 424 22 (set (reg:DI 1 dx [orig:209 D.25534 ] [209])
        (sign_extend:DI (reg:SI 0 ax [441]))) ge2fitman_sup.cpp:343 142 {*extendsidi2_rex64}
     (nil))
(insn 424 423 425 22 (set (reg:DI 0 ax [442])
        (reg:DI 1 dx [orig:209 D.25534 ] [209])) ge2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 425 424 426 22 (parallel [
            (set (reg:DI 0 ax [442])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 512 {*ashldi3_1}
     (nil))
(insn 426 425 427 22 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg:DI 0 ax [442])
                    (reg:DI 1 dx [orig:209 D.25534 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:209 D.25534 ] [209])
            (const_int 9 [0x9]))
        (nil)))
(insn 427 426 428 22 (parallel [
            (set (reg:DI 0 ax [442])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 512 {*ashldi3_1}
     (nil))
(insn 428 427 429 22 (parallel [
            (set (reg:DI 0 ax [442])
                (plus:DI (reg:DI 0 ax [442])
                    (reg:DI 1 dx [orig:209 D.25534 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:209 D.25534 ] [209])
            (const_int 19 [0x13]))
        (nil)))
(insn 429 428 431 22 (parallel [
            (set (reg:DI 0 ax [443])
                (ashift:DI (reg:DI 0 ax [442])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 512 {*ashldi3_1}
     (nil))
(insn 431 429 432 22 (set (reg:DI 1 dx [orig:210 D.25534 ] [210])
        (reg:DI 0 ax [442])) ge2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 432 431 433 22 (set (reg/f:DI 0 ax [444])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:343 89 {*movdi_internal}
     (nil))
(insn 433 432 434 22 (parallel [
            (set (reg/f:DI 0 ax [orig:211 D.25541 ] [211])
                (plus:DI (reg/f:DI 0 ax [444])
                    (reg:DI 1 dx [orig:210 D.25534 ] [210])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:343 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:210 D.25534 ] [210]))
        (nil)))
(insn 434 433 435 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:211 D.25541 ] [211])
                (const_int 32 [0x20])) [0 _194->max_normalize+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:343 90 {*movsi_internal}
     (nil))
(insn 435 434 436 22 (set (reg:SI 0 ax [445])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:344 90 {*movsi_internal}
     (nil))
(insn 436 435 437 22 (set (reg:DI 1 dx [orig:212 D.25534 ] [212])
        (sign_extend:DI (reg:SI 0 ax [445]))) ge2fitman_sup.cpp:344 142 {*extendsidi2_rex64}
     (nil))
(insn 437 436 438 22 (set (reg:DI 0 ax [446])
        (reg:DI 1 dx [orig:212 D.25534 ] [212])) ge2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 438 437 439 22 (parallel [
            (set (reg:DI 0 ax [446])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 512 {*ashldi3_1}
     (nil))
(insn 439 438 440 22 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg:DI 0 ax [446])
                    (reg:DI 1 dx [orig:212 D.25534 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:212 D.25534 ] [212])
            (const_int 9 [0x9]))
        (nil)))
(insn 440 439 441 22 (parallel [
            (set (reg:DI 0 ax [446])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 512 {*ashldi3_1}
     (nil))
(insn 441 440 442 22 (parallel [
            (set (reg:DI 0 ax [446])
                (plus:DI (reg:DI 0 ax [446])
                    (reg:DI 1 dx [orig:212 D.25534 ] [212])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:212 D.25534 ] [212])
            (const_int 19 [0x13]))
        (nil)))
(insn 442 441 444 22 (parallel [
            (set (reg:DI 0 ax [447])
                (ashift:DI (reg:DI 0 ax [446])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 512 {*ashldi3_1}
     (nil))
(insn 444 442 445 22 (set (reg:DI 1 dx [orig:213 D.25534 ] [213])
        (reg:DI 0 ax [446])) ge2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 445 444 446 22 (set (reg/f:DI 0 ax [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:344 89 {*movdi_internal}
     (nil))
(insn 446 445 447 22 (parallel [
            (set (reg/f:DI 0 ax [orig:214 D.25541 ] [214])
                (plus:DI (reg/f:DI 0 ax [448])
                    (reg:DI 1 dx [orig:213 D.25534 ] [213])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:344 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:213 D.25534 ] [213]))
        (nil)))
(insn 447 446 448 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:214 D.25541 ] [214])
                (const_int 36 [0x24])) [0 _198->pre_quality+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:344 90 {*movsi_internal}
     (nil))
(insn 448 447 449 22 (set (reg:SI 0 ax [449])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:345 90 {*movsi_internal}
     (nil))
(insn 449 448 450 22 (set (reg:DI 1 dx [orig:215 D.25534 ] [215])
        (sign_extend:DI (reg:SI 0 ax [449]))) ge2fitman_sup.cpp:345 142 {*extendsidi2_rex64}
     (nil))
(insn 450 449 451 22 (set (reg:DI 0 ax [450])
        (reg:DI 1 dx [orig:215 D.25534 ] [215])) ge2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 451 450 452 22 (parallel [
            (set (reg:DI 0 ax [450])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 512 {*ashldi3_1}
     (nil))
(insn 452 451 453 22 (parallel [
            (set (reg:DI 0 ax [450])
                (plus:DI (reg:DI 0 ax [450])
                    (reg:DI 1 dx [orig:215 D.25534 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:215 D.25534 ] [215])
            (const_int 9 [0x9]))
        (nil)))
(insn 453 452 454 22 (parallel [
            (set (reg:DI 0 ax [450])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 512 {*ashldi3_1}
     (nil))
(insn 454 453 455 22 (parallel [
            (set (reg:DI 0 ax [450])
                (plus:DI (reg:DI 0 ax [450])
                    (reg:DI 1 dx [orig:215 D.25534 ] [215])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:215 D.25534 ] [215])
            (const_int 19 [0x13]))
        (nil)))
(insn 455 454 457 22 (parallel [
            (set (reg:DI 0 ax [451])
                (ashift:DI (reg:DI 0 ax [450])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 512 {*ashldi3_1}
     (nil))
(insn 457 455 458 22 (set (reg:DI 1 dx [orig:216 D.25534 ] [216])
        (reg:DI 0 ax [450])) ge2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 458 457 459 22 (set (reg/f:DI 0 ax [452])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:345 89 {*movdi_internal}
     (nil))
(insn 459 458 460 22 (parallel [
            (set (reg/f:DI 0 ax [orig:217 D.25541 ] [217])
                (plus:DI (reg/f:DI 0 ax [452])
                    (reg:DI 1 dx [orig:216 D.25534 ] [216])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:345 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:216 D.25534 ] [216]))
        (nil)))
(insn 460 459 461 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:217 D.25541 ] [217])
                (const_int 40 [0x28])) [0 _202->pre_quecc+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:345 90 {*movsi_internal}
     (nil))
(insn 461 460 462 22 (set (reg:SI 0 ax [453])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:346 90 {*movsi_internal}
     (nil))
(insn 462 461 463 22 (set (reg:DI 1 dx [orig:218 D.25534 ] [218])
        (sign_extend:DI (reg:SI 0 ax [453]))) ge2fitman_sup.cpp:346 142 {*extendsidi2_rex64}
     (nil))
(insn 463 462 464 22 (set (reg:DI 0 ax [454])
        (reg:DI 1 dx [orig:218 D.25534 ] [218])) ge2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 464 463 465 22 (parallel [
            (set (reg:DI 0 ax [454])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 512 {*ashldi3_1}
     (nil))
(insn 465 464 466 22 (parallel [
            (set (reg:DI 0 ax [454])
                (plus:DI (reg:DI 0 ax [454])
                    (reg:DI 1 dx [orig:218 D.25534 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:218 D.25534 ] [218])
            (const_int 9 [0x9]))
        (nil)))
(insn 466 465 467 22 (parallel [
            (set (reg:DI 0 ax [454])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 512 {*ashldi3_1}
     (nil))
(insn 467 466 468 22 (parallel [
            (set (reg:DI 0 ax [454])
                (plus:DI (reg:DI 0 ax [454])
                    (reg:DI 1 dx [orig:218 D.25534 ] [218])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:218 D.25534 ] [218])
            (const_int 19 [0x13]))
        (nil)))
(insn 468 467 470 22 (parallel [
            (set (reg:DI 0 ax [455])
                (ashift:DI (reg:DI 0 ax [454])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 512 {*ashldi3_1}
     (nil))
(insn 470 468 471 22 (set (reg:DI 1 dx [orig:219 D.25534 ] [219])
        (reg:DI 0 ax [454])) ge2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 471 470 472 22 (set (reg/f:DI 0 ax [456])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:346 89 {*movdi_internal}
     (nil))
(insn 472 471 473 22 (parallel [
            (set (reg/f:DI 0 ax [orig:220 D.25541 ] [220])
                (plus:DI (reg/f:DI 0 ax [456])
                    (reg:DI 1 dx [orig:219 D.25534 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:346 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:219 D.25534 ] [219]))
        (nil)))
(insn 473 472 474 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:220 D.25541 ] [220])
                (const_int 44 [0x2c])) [0 _206->pre_quecc_points+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:346 90 {*movsi_internal}
     (nil))
(insn 474 473 475 22 (set (reg:SI 0 ax [457])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:347 90 {*movsi_internal}
     (nil))
(insn 475 474 476 22 (set (reg:DI 1 dx [orig:221 D.25534 ] [221])
        (sign_extend:DI (reg:SI 0 ax [457]))) ge2fitman_sup.cpp:347 142 {*extendsidi2_rex64}
     (nil))
(insn 476 475 477 22 (set (reg:DI 0 ax [458])
        (reg:DI 1 dx [orig:221 D.25534 ] [221])) ge2fitman_sup.cpp:347 89 {*movdi_internal}
     (nil))
(insn 477 476 478 22 (parallel [
            (set (reg:DI 0 ax [458])
                (ashift:DI (reg:DI 0 ax [458])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 512 {*ashldi3_1}
     (nil))
(insn 478 477 479 22 (parallel [
            (set (reg:DI 0 ax [458])
                (plus:DI (reg:DI 0 ax [458])
                    (reg:DI 1 dx [orig:221 D.25534 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:221 D.25534 ] [221])
            (const_int 9 [0x9]))
        (nil)))
(insn 479 478 480 22 (parallel [
            (set (reg:DI 0 ax [458])
                (ashift:DI (reg:DI 0 ax [458])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 512 {*ashldi3_1}
     (nil))
(insn 480 479 481 22 (parallel [
            (set (reg:DI 0 ax [458])
                (plus:DI (reg:DI 0 ax [458])
                    (reg:DI 1 dx [orig:221 D.25534 ] [221])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:221 D.25534 ] [221])
            (const_int 19 [0x13]))
        (nil)))
(insn 481 480 483 22 (parallel [
            (set (reg:DI 0 ax [459])
                (ashift:DI (reg:DI 0 ax [458])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 512 {*ashldi3_1}
     (nil))
(insn 483 481 484 22 (set (reg:DI 1 dx [orig:222 D.25534 ] [222])
        (reg:DI 0 ax [458])) ge2fitman_sup.cpp:347 89 {*movdi_internal}
     (nil))
(insn 484 483 485 22 (set (reg/f:DI 0 ax [460])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:347 89 {*movdi_internal}
     (nil))
(insn 485 484 486 22 (parallel [
            (set (reg/f:DI 0 ax [orig:223 D.25541 ] [223])
                (plus:DI (reg/f:DI 0 ax [460])
                    (reg:DI 1 dx [orig:222 D.25534 ] [222])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:347 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:222 D.25534 ] [222]))
        (nil)))
(insn 486 485 487 22 (set (reg:SF 21 xmm0 [461])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:347 129 {*movsf_internal}
     (nil))
(insn 487 486 488 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:223 D.25541 ] [223])
                (const_int 48 [0x30])) [0 _210->pre_delay_time+0 S4 A32])
        (reg:SF 21 xmm0 [461])) ge2fitman_sup.cpp:347 129 {*movsf_internal}
     (nil))
(insn 488 487 489 22 (set (reg:SI 0 ax [462])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:348 90 {*movsi_internal}
     (nil))
(insn 489 488 490 22 (set (reg:DI 1 dx [orig:224 D.25534 ] [224])
        (sign_extend:DI (reg:SI 0 ax [462]))) ge2fitman_sup.cpp:348 142 {*extendsidi2_rex64}
     (nil))
(insn 490 489 491 22 (set (reg:DI 0 ax [463])
        (reg:DI 1 dx [orig:224 D.25534 ] [224])) ge2fitman_sup.cpp:348 89 {*movdi_internal}
     (nil))
(insn 491 490 492 22 (parallel [
            (set (reg:DI 0 ax [463])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 512 {*ashldi3_1}
     (nil))
(insn 492 491 493 22 (parallel [
            (set (reg:DI 0 ax [463])
                (plus:DI (reg:DI 0 ax [463])
                    (reg:DI 1 dx [orig:224 D.25534 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:224 D.25534 ] [224])
            (const_int 9 [0x9]))
        (nil)))
(insn 493 492 494 22 (parallel [
            (set (reg:DI 0 ax [463])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 512 {*ashldi3_1}
     (nil))
(insn 494 493 495 22 (parallel [
            (set (reg:DI 0 ax [463])
                (plus:DI (reg:DI 0 ax [463])
                    (reg:DI 1 dx [orig:224 D.25534 ] [224])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:224 D.25534 ] [224])
            (const_int 19 [0x13]))
        (nil)))
(insn 495 494 497 22 (parallel [
            (set (reg:DI 0 ax [464])
                (ashift:DI (reg:DI 0 ax [463])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 512 {*ashldi3_1}
     (nil))
(insn 497 495 498 22 (set (reg:DI 1 dx [orig:225 D.25534 ] [225])
        (reg:DI 0 ax [463])) ge2fitman_sup.cpp:348 89 {*movdi_internal}
     (nil))
(insn 498 497 499 22 (set (reg/f:DI 0 ax [465])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:348 89 {*movdi_internal}
     (nil))
(insn 499 498 500 22 (parallel [
            (set (reg/f:DI 0 ax [orig:226 D.25541 ] [226])
                (plus:DI (reg/f:DI 0 ax [465])
                    (reg:DI 1 dx [orig:225 D.25534 ] [225])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:348 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:225 D.25534 ] [225]))
        (nil)))
(insn 500 499 501 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:226 D.25541 ] [226])
                (const_int 52 [0x34])) [0 _214->pre_quecc_if+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:348 90 {*movsi_internal}
     (nil))
(insn 501 500 502 22 (set (reg:SI 0 ax [466])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:349 90 {*movsi_internal}
     (nil))
(insn 502 501 503 22 (set (reg:DI 1 dx [orig:227 D.25534 ] [227])
        (sign_extend:DI (reg:SI 0 ax [466]))) ge2fitman_sup.cpp:349 142 {*extendsidi2_rex64}
     (nil))
(insn 503 502 504 22 (set (reg:DI 0 ax [467])
        (reg:DI 1 dx [orig:227 D.25534 ] [227])) ge2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 504 503 505 22 (parallel [
            (set (reg:DI 0 ax [467])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 512 {*ashldi3_1}
     (nil))
(insn 505 504 506 22 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg:DI 0 ax [467])
                    (reg:DI 1 dx [orig:227 D.25534 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:227 D.25534 ] [227])
            (const_int 9 [0x9]))
        (nil)))
(insn 506 505 507 22 (parallel [
            (set (reg:DI 0 ax [467])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 512 {*ashldi3_1}
     (nil))
(insn 507 506 508 22 (parallel [
            (set (reg:DI 0 ax [467])
                (plus:DI (reg:DI 0 ax [467])
                    (reg:DI 1 dx [orig:227 D.25534 ] [227])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:227 D.25534 ] [227])
            (const_int 19 [0x13]))
        (nil)))
(insn 508 507 510 22 (parallel [
            (set (reg:DI 0 ax [468])
                (ashift:DI (reg:DI 0 ax [467])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 512 {*ashldi3_1}
     (nil))
(insn 510 508 511 22 (set (reg:DI 1 dx [orig:228 D.25534 ] [228])
        (reg:DI 0 ax [467])) ge2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 511 510 512 22 (set (reg/f:DI 0 ax [469])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:349 89 {*movdi_internal}
     (nil))
(insn 512 511 513 22 (parallel [
            (set (reg/f:DI 0 ax [orig:229 D.25541 ] [229])
                (plus:DI (reg/f:DI 0 ax [469])
                    (reg:DI 1 dx [orig:228 D.25534 ] [228])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:349 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:228 D.25534 ] [228]))
        (nil)))
(insn 513 512 514 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:229 D.25541 ] [229])
                (const_int 56 [0x38])) [0 _218->input_file_type+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:349 90 {*movsi_internal}
     (nil))
(insn 514 513 515 22 (set (reg:SI 0 ax [470])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:350 90 {*movsi_internal}
     (nil))
(insn 515 514 516 22 (set (reg:DI 1 dx [orig:230 D.25534 ] [230])
        (sign_extend:DI (reg:SI 0 ax [470]))) ge2fitman_sup.cpp:350 142 {*extendsidi2_rex64}
     (nil))
(insn 516 515 517 22 (set (reg:DI 0 ax [471])
        (reg:DI 1 dx [orig:230 D.25534 ] [230])) ge2fitman_sup.cpp:350 89 {*movdi_internal}
     (nil))
(insn 517 516 518 22 (parallel [
            (set (reg:DI 0 ax [471])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 512 {*ashldi3_1}
     (nil))
(insn 518 517 519 22 (parallel [
            (set (reg:DI 0 ax [471])
                (plus:DI (reg:DI 0 ax [471])
                    (reg:DI 1 dx [orig:230 D.25534 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:230 D.25534 ] [230])
            (const_int 9 [0x9]))
        (nil)))
(insn 519 518 520 22 (parallel [
            (set (reg:DI 0 ax [471])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 512 {*ashldi3_1}
     (nil))
(insn 520 519 521 22 (parallel [
            (set (reg:DI 0 ax [471])
                (plus:DI (reg:DI 0 ax [471])
                    (reg:DI 1 dx [orig:230 D.25534 ] [230])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:230 D.25534 ] [230])
            (const_int 19 [0x13]))
        (nil)))
(insn 521 520 523 22 (parallel [
            (set (reg:DI 0 ax [472])
                (ashift:DI (reg:DI 0 ax [471])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 512 {*ashldi3_1}
     (nil))
(insn 523 521 524 22 (set (reg:DI 1 dx [orig:231 D.25534 ] [231])
        (reg:DI 0 ax [471])) ge2fitman_sup.cpp:350 89 {*movdi_internal}
     (nil))
(insn 524 523 525 22 (set (reg/f:DI 0 ax [473])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:350 89 {*movdi_internal}
     (nil))
(insn 525 524 526 22 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.25541 ] [232])
                (plus:DI (reg/f:DI 0 ax [473])
                    (reg:DI 1 dx [orig:231 D.25534 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:350 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:231 D.25534 ] [231]))
        (nil)))
(insn 526 525 527 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:232 D.25541 ] [232])
                (const_int 60 [0x3c])) [0 _222->ref_file_argument+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:350 90 {*movsi_internal}
     (nil))
(insn 527 526 528 22 (set (reg:SI 0 ax [474])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:351 90 {*movsi_internal}
     (nil))
(insn 528 527 529 22 (set (reg:DI 1 dx [orig:233 D.25534 ] [233])
        (sign_extend:DI (reg:SI 0 ax [474]))) ge2fitman_sup.cpp:351 142 {*extendsidi2_rex64}
     (nil))
(insn 529 528 530 22 (set (reg:DI 0 ax [475])
        (reg:DI 1 dx [orig:233 D.25534 ] [233])) ge2fitman_sup.cpp:351 89 {*movdi_internal}
     (nil))
(insn 530 529 531 22 (parallel [
            (set (reg:DI 0 ax [475])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 512 {*ashldi3_1}
     (nil))
(insn 531 530 532 22 (parallel [
            (set (reg:DI 0 ax [475])
                (plus:DI (reg:DI 0 ax [475])
                    (reg:DI 1 dx [orig:233 D.25534 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:233 D.25534 ] [233])
            (const_int 9 [0x9]))
        (nil)))
(insn 532 531 533 22 (parallel [
            (set (reg:DI 0 ax [475])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 512 {*ashldi3_1}
     (nil))
(insn 533 532 534 22 (parallel [
            (set (reg:DI 0 ax [475])
                (plus:DI (reg:DI 0 ax [475])
                    (reg:DI 1 dx [orig:233 D.25534 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:233 D.25534 ] [233])
            (const_int 19 [0x13]))
        (nil)))
(insn 534 533 536 22 (parallel [
            (set (reg:DI 0 ax [476])
                (ashift:DI (reg:DI 0 ax [475])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 512 {*ashldi3_1}
     (nil))
(insn 536 534 537 22 (set (reg:DI 1 dx [orig:234 D.25534 ] [234])
        (reg:DI 0 ax [475])) ge2fitman_sup.cpp:351 89 {*movdi_internal}
     (nil))
(insn 537 536 538 22 (set (reg/f:DI 0 ax [477])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:351 89 {*movdi_internal}
     (nil))
(insn 538 537 539 22 (parallel [
            (set (reg/f:DI 0 ax [orig:235 D.25541 ] [235])
                (plus:DI (reg/f:DI 0 ax [477])
                    (reg:DI 1 dx [orig:234 D.25534 ] [234])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:351 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:234 D.25534 ] [234]))
        (nil)))
(insn 539 538 540 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:235 D.25541 ] [235])
                (const_int 64 [0x40])) [0 _226->csi_reorder+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:351 90 {*movsi_internal}
     (nil))
(insn 540 539 541 22 (set (reg:SI 0 ax [478])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:352 90 {*movsi_internal}
     (nil))
(insn 541 540 542 22 (set (reg:DI 1 dx [orig:236 D.25534 ] [236])
        (sign_extend:DI (reg:SI 0 ax [478]))) ge2fitman_sup.cpp:352 142 {*extendsidi2_rex64}
     (nil))
(insn 542 541 543 22 (set (reg:DI 0 ax [479])
        (reg:DI 1 dx [orig:236 D.25534 ] [236])) ge2fitman_sup.cpp:352 89 {*movdi_internal}
     (nil))
(insn 543 542 544 22 (parallel [
            (set (reg:DI 0 ax [479])
                (ashift:DI (reg:DI 0 ax [479])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 512 {*ashldi3_1}
     (nil))
(insn 544 543 545 22 (parallel [
            (set (reg:DI 0 ax [479])
                (plus:DI (reg:DI 0 ax [479])
                    (reg:DI 1 dx [orig:236 D.25534 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:236 D.25534 ] [236])
            (const_int 9 [0x9]))
        (nil)))
(insn 545 544 546 22 (parallel [
            (set (reg:DI 0 ax [479])
                (ashift:DI (reg:DI 0 ax [479])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 512 {*ashldi3_1}
     (nil))
(insn 546 545 547 22 (parallel [
            (set (reg:DI 0 ax [479])
                (plus:DI (reg:DI 0 ax [479])
                    (reg:DI 1 dx [orig:236 D.25534 ] [236])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:236 D.25534 ] [236])
            (const_int 19 [0x13]))
        (nil)))
(insn 547 546 549 22 (parallel [
            (set (reg:DI 0 ax [480])
                (ashift:DI (reg:DI 0 ax [479])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 512 {*ashldi3_1}
     (nil))
(insn 549 547 550 22 (set (reg:DI 1 dx [orig:237 D.25534 ] [237])
        (reg:DI 0 ax [479])) ge2fitman_sup.cpp:352 89 {*movdi_internal}
     (nil))
(insn 550 549 551 22 (set (reg/f:DI 0 ax [481])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])) ge2fitman_sup.cpp:352 89 {*movdi_internal}
     (nil))
(insn 551 550 552 22 (parallel [
            (set (reg/f:DI 0 ax [orig:238 D.25541 ] [238])
                (plus:DI (reg/f:DI 0 ax [481])
                    (reg:DI 1 dx [orig:237 D.25534 ] [237])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:352 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 preprocess+0 S8 A64])
            (reg:DI 1 dx [orig:237 D.25534 ] [237]))
        (nil)))
(insn 552 551 553 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:238 D.25541 ] [238])
                (const_int 68 [0x44])) [0 _230->tilt+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:352 90 {*movsi_internal}
     (nil))
(insn 553 552 554 22 (set (reg:SI 0 ax [482])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:355 90 {*movsi_internal}
     (nil))
(insn 554 553 555 22 (set (reg:DI 0 ax [orig:239 D.25534 ] [239])
        (sign_extend:DI (reg:SI 0 ax [482]))) ge2fitman_sup.cpp:355 142 {*extendsidi2_rex64}
     (nil))
(insn 555 554 875 22 (parallel [
            (set (reg:DI 0 ax [orig:240 D.25534 ] [240])
                (ashift:DI (reg:DI 0 ax [orig:240 D.25534 ] [240])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:355 512 {*ashldi3_1}
     (nil))
(insn 875 555 556 22 (set (reg:DI 1 dx [orig:240 D.25534 ] [240])
        (reg:DI 0 ax [orig:240 D.25534 ] [240])) ge2fitman_sup.cpp:355 89 {*movdi_internal}
     (nil))
(insn 556 875 557 22 (set (reg/f:DI 0 ax [483])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:355 89 {*movdi_internal}
     (nil))
(insn 557 556 558 22 (parallel [
            (set (reg/f:DI 0 ax [orig:241 D.25542 ] [241])
                (plus:DI (reg/f:DI 0 ax [483])
                    (reg:DI 1 dx [orig:240 D.25534 ] [240])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:355 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:240 D.25534 ] [240]))
        (nil)))
(insn 558 557 559 22 (set (mem/j:DI (reg/f:DI 0 ax [orig:241 D.25542 ] [241]) [0 _235->nblocks.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:355 89 {*movdi_internal}
     (nil))
(insn 559 558 560 22 (set (reg:SI 0 ax [484])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:356 90 {*movsi_internal}
     (nil))
(insn 560 559 561 22 (set (reg:DI 0 ax [orig:242 D.25534 ] [242])
        (sign_extend:DI (reg:SI 0 ax [484]))) ge2fitman_sup.cpp:356 142 {*extendsidi2_rex64}
     (nil))
(insn 561 560 877 22 (parallel [
            (set (reg:DI 0 ax [orig:243 D.25534 ] [243])
                (ashift:DI (reg:DI 0 ax [orig:243 D.25534 ] [243])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:356 512 {*ashldi3_1}
     (nil))
(insn 877 561 562 22 (set (reg:DI 1 dx [orig:243 D.25534 ] [243])
        (reg:DI 0 ax [orig:243 D.25534 ] [243])) ge2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 562 877 563 22 (set (reg/f:DI 0 ax [485])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 563 562 564 22 (parallel [
            (set (reg/f:DI 0 ax [orig:244 D.25542 ] [244])
                (plus:DI (reg/f:DI 0 ax [485])
                    (reg:DI 1 dx [orig:243 D.25534 ] [243])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:356 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:243 D.25534 ] [243]))
        (nil)))
(insn 564 563 565 22 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:244 D.25542 ] [244])
                (const_int 8 [0x8])) [0 _239->ntraces.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:356 89 {*movdi_internal}
     (nil))
(insn 565 564 566 22 (set (reg:SI 0 ax [486])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:357 90 {*movsi_internal}
     (nil))
(insn 566 565 567 22 (set (reg:DI 0 ax [orig:245 D.25534 ] [245])
        (sign_extend:DI (reg:SI 0 ax [486]))) ge2fitman_sup.cpp:357 142 {*extendsidi2_rex64}
     (nil))
(insn 567 566 879 22 (parallel [
            (set (reg:DI 0 ax [orig:246 D.25534 ] [246])
                (ashift:DI (reg:DI 0 ax [orig:246 D.25534 ] [246])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:357 512 {*ashldi3_1}
     (nil))
(insn 879 567 568 22 (set (reg:DI 1 dx [orig:246 D.25534 ] [246])
        (reg:DI 0 ax [orig:246 D.25534 ] [246])) ge2fitman_sup.cpp:357 89 {*movdi_internal}
     (nil))
(insn 568 879 569 22 (set (reg/f:DI 0 ax [487])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:357 89 {*movdi_internal}
     (nil))
(insn 569 568 570 22 (parallel [
            (set (reg/f:DI 0 ax [orig:247 D.25542 ] [247])
                (plus:DI (reg/f:DI 0 ax [487])
                    (reg:DI 1 dx [orig:246 D.25534 ] [246])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:357 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:246 D.25534 ] [246]))
        (nil)))
(insn 570 569 571 22 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:247 D.25542 ] [247])
                (const_int 16 [0x10])) [0 _243->np.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:357 89 {*movdi_internal}
     (nil))
(insn 571 570 572 22 (set (reg:SI 0 ax [488])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:358 90 {*movsi_internal}
     (nil))
(insn 572 571 573 22 (set (reg:DI 0 ax [orig:248 D.25534 ] [248])
        (sign_extend:DI (reg:SI 0 ax [488]))) ge2fitman_sup.cpp:358 142 {*extendsidi2_rex64}
     (nil))
(insn 573 572 881 22 (parallel [
            (set (reg:DI 0 ax [orig:249 D.25534 ] [249])
                (ashift:DI (reg:DI 0 ax [orig:249 D.25534 ] [249])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:358 512 {*ashldi3_1}
     (nil))
(insn 881 573 574 22 (set (reg:DI 1 dx [orig:249 D.25534 ] [249])
        (reg:DI 0 ax [orig:249 D.25534 ] [249])) ge2fitman_sup.cpp:358 89 {*movdi_internal}
     (nil))
(insn 574 881 575 22 (set (reg/f:DI 0 ax [489])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:358 89 {*movdi_internal}
     (nil))
(insn 575 574 576 22 (parallel [
            (set (reg/f:DI 0 ax [orig:250 D.25542 ] [250])
                (plus:DI (reg/f:DI 0 ax [489])
                    (reg:DI 1 dx [orig:249 D.25534 ] [249])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:358 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:249 D.25534 ] [249]))
        (nil)))
(insn 576 575 577 22 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:250 D.25542 ] [250])
                (const_int 24 [0x18])) [0 _247->ebytes.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:358 89 {*movdi_internal}
     (nil))
(insn 577 576 578 22 (set (reg:SI 0 ax [490])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:359 90 {*movsi_internal}
     (nil))
(insn 578 577 579 22 (set (reg:DI 0 ax [orig:251 D.25534 ] [251])
        (sign_extend:DI (reg:SI 0 ax [490]))) ge2fitman_sup.cpp:359 142 {*extendsidi2_rex64}
     (nil))
(insn 579 578 883 22 (parallel [
            (set (reg:DI 0 ax [orig:252 D.25534 ] [252])
                (ashift:DI (reg:DI 0 ax [orig:252 D.25534 ] [252])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:359 512 {*ashldi3_1}
     (nil))
(insn 883 579 580 22 (set (reg:DI 1 dx [orig:252 D.25534 ] [252])
        (reg:DI 0 ax [orig:252 D.25534 ] [252])) ge2fitman_sup.cpp:359 89 {*movdi_internal}
     (nil))
(insn 580 883 581 22 (set (reg/f:DI 0 ax [491])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:359 89 {*movdi_internal}
     (nil))
(insn 581 580 582 22 (parallel [
            (set (reg/f:DI 0 ax [orig:253 D.25542 ] [253])
                (plus:DI (reg/f:DI 0 ax [491])
                    (reg:DI 1 dx [orig:252 D.25534 ] [252])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:359 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:252 D.25534 ] [252]))
        (nil)))
(insn 582 581 583 22 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:253 D.25542 ] [253])
                (const_int 32 [0x20])) [0 _251->tbytes.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:359 89 {*movdi_internal}
     (nil))
(insn 583 582 584 22 (set (reg:SI 0 ax [492])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:360 90 {*movsi_internal}
     (nil))
(insn 584 583 585 22 (set (reg:DI 0 ax [orig:254 D.25534 ] [254])
        (sign_extend:DI (reg:SI 0 ax [492]))) ge2fitman_sup.cpp:360 142 {*extendsidi2_rex64}
     (nil))
(insn 585 584 885 22 (parallel [
            (set (reg:DI 0 ax [orig:255 D.25534 ] [255])
                (ashift:DI (reg:DI 0 ax [orig:255 D.25534 ] [255])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:360 512 {*ashldi3_1}
     (nil))
(insn 885 585 586 22 (set (reg:DI 1 dx [orig:255 D.25534 ] [255])
        (reg:DI 0 ax [orig:255 D.25534 ] [255])) ge2fitman_sup.cpp:360 89 {*movdi_internal}
     (nil))
(insn 586 885 587 22 (set (reg/f:DI 0 ax [493])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:360 89 {*movdi_internal}
     (nil))
(insn 587 586 588 22 (parallel [
            (set (reg/f:DI 0 ax [orig:256 D.25542 ] [256])
                (plus:DI (reg/f:DI 0 ax [493])
                    (reg:DI 1 dx [orig:255 D.25534 ] [255])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:360 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:255 D.25534 ] [255]))
        (nil)))
(insn 588 587 589 22 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:256 D.25542 ] [256])
                (const_int 40 [0x28])) [0 _255->bbytes.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:360 89 {*movdi_internal}
     (nil))
(insn 589 588 590 22 (set (reg:SI 0 ax [494])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:361 90 {*movsi_internal}
     (nil))
(insn 590 589 591 22 (set (reg:DI 0 ax [orig:257 D.25534 ] [257])
        (sign_extend:DI (reg:SI 0 ax [494]))) ge2fitman_sup.cpp:361 142 {*extendsidi2_rex64}
     (nil))
(insn 591 590 887 22 (parallel [
            (set (reg:DI 0 ax [orig:258 D.25534 ] [258])
                (ashift:DI (reg:DI 0 ax [orig:258 D.25534 ] [258])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:361 512 {*ashldi3_1}
     (nil))
(insn 887 591 592 22 (set (reg:DI 1 dx [orig:258 D.25534 ] [258])
        (reg:DI 0 ax [orig:258 D.25534 ] [258])) ge2fitman_sup.cpp:361 89 {*movdi_internal}
     (nil))
(insn 592 887 593 22 (set (reg/f:DI 0 ax [495])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:361 89 {*movdi_internal}
     (nil))
(insn 593 592 594 22 (parallel [
            (set (reg/f:DI 0 ax [orig:259 D.25542 ] [259])
                (plus:DI (reg/f:DI 0 ax [495])
                    (reg:DI 1 dx [orig:258 D.25534 ] [258])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:361 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:258 D.25534 ] [258]))
        (nil)))
(insn 594 593 595 22 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:259 D.25542 ] [259])
                (const_int 48 [0x30])) [0 _259->transf.number+0 S2 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:361 92 {*movhi_internal}
     (nil))
(insn 595 594 596 22 (set (reg:SI 0 ax [496])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:362 90 {*movsi_internal}
     (nil))
(insn 596 595 597 22 (set (reg:DI 0 ax [orig:260 D.25534 ] [260])
        (sign_extend:DI (reg:SI 0 ax [496]))) ge2fitman_sup.cpp:362 142 {*extendsidi2_rex64}
     (nil))
(insn 597 596 889 22 (parallel [
            (set (reg:DI 0 ax [orig:261 D.25534 ] [261])
                (ashift:DI (reg:DI 0 ax [orig:261 D.25534 ] [261])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:362 512 {*ashldi3_1}
     (nil))
(insn 889 597 598 22 (set (reg:DI 1 dx [orig:261 D.25534 ] [261])
        (reg:DI 0 ax [orig:261 D.25534 ] [261])) ge2fitman_sup.cpp:362 89 {*movdi_internal}
     (nil))
(insn 598 889 599 22 (set (reg/f:DI 0 ax [497])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:362 89 {*movdi_internal}
     (nil))
(insn 599 598 600 22 (parallel [
            (set (reg/f:DI 0 ax [orig:262 D.25542 ] [262])
                (plus:DI (reg/f:DI 0 ax [497])
                    (reg:DI 1 dx [orig:261 D.25534 ] [261])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:362 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:261 D.25534 ] [261]))
        (nil)))
(insn 600 599 601 22 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:262 D.25542 ] [262])
                (const_int 50 [0x32])) [0 _263->status.number+0 S2 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:362 92 {*movhi_internal}
     (nil))
(insn 601 600 602 22 (set (reg:SI 0 ax [498])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:363 90 {*movsi_internal}
     (nil))
(insn 602 601 603 22 (set (reg:DI 0 ax [orig:263 D.25534 ] [263])
        (sign_extend:DI (reg:SI 0 ax [498]))) ge2fitman_sup.cpp:363 142 {*extendsidi2_rex64}
     (nil))
(insn 603 602 891 22 (parallel [
            (set (reg:DI 0 ax [orig:264 D.25534 ] [264])
                (ashift:DI (reg:DI 0 ax [orig:264 D.25534 ] [264])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:363 512 {*ashldi3_1}
     (nil))
(insn 891 603 604 22 (set (reg:DI 1 dx [orig:264 D.25534 ] [264])
        (reg:DI 0 ax [orig:264 D.25534 ] [264])) ge2fitman_sup.cpp:363 89 {*movdi_internal}
     (nil))
(insn 604 891 605 22 (set (reg/f:DI 0 ax [499])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:363 89 {*movdi_internal}
     (nil))
(insn 605 604 606 22 (parallel [
            (set (reg/f:DI 0 ax [orig:265 D.25542 ] [265])
                (plus:DI (reg/f:DI 0 ax [499])
                    (reg:DI 1 dx [orig:264 D.25534 ] [264])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:363 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 main_header+0 S8 A64])
            (reg:DI 1 dx [orig:264 D.25534 ] [264]))
        (nil)))
(insn 606 605 607 22 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:265 D.25542 ] [265])
                (const_int 56 [0x38])) [0 _267->spare1.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:363 89 {*movdi_internal}
     (nil))
(insn 607 606 608 22 (set (reg:SI 0 ax [500])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:366 90 {*movsi_internal}
     (nil))
(insn 608 607 609 22 (set (reg:DI 0 ax [orig:266 D.25534 ] [266])
        (sign_extend:DI (reg:SI 0 ax [500]))) ge2fitman_sup.cpp:366 142 {*extendsidi2_rex64}
     (nil))
(insn 609 608 893 22 (parallel [
            (set (reg:DI 0 ax [orig:267 D.25534 ] [267])
                (ashift:DI (reg:DI 0 ax [orig:267 D.25534 ] [267])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:366 512 {*ashldi3_1}
     (nil))
(insn 893 609 610 22 (set (reg:DI 1 dx [orig:267 D.25534 ] [267])
        (reg:DI 0 ax [orig:267 D.25534 ] [267])) ge2fitman_sup.cpp:366 89 {*movdi_internal}
     (nil))
(insn 610 893 611 22 (set (reg/f:DI 0 ax [501])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:366 89 {*movdi_internal}
     (nil))
(insn 611 610 612 22 (parallel [
            (set (reg/f:DI 0 ax [orig:268 D.25543 ] [268])
                (plus:DI (reg/f:DI 0 ax [501])
                    (reg:DI 1 dx [orig:267 D.25534 ] [267])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:366 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:267 D.25534 ] [267]))
        (nil)))
(insn 612 611 613 22 (set (mem/j:HI (reg/f:DI 0 ax [orig:268 D.25543 ] [268]) [0 _272->scale.number+0 S2 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:366 92 {*movhi_internal}
     (nil))
(insn 613 612 614 22 (set (reg:SI 0 ax [502])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:367 90 {*movsi_internal}
     (nil))
(insn 614 613 615 22 (set (reg:DI 0 ax [orig:269 D.25534 ] [269])
        (sign_extend:DI (reg:SI 0 ax [502]))) ge2fitman_sup.cpp:367 142 {*extendsidi2_rex64}
     (nil))
(insn 615 614 895 22 (parallel [
            (set (reg:DI 0 ax [orig:270 D.25534 ] [270])
                (ashift:DI (reg:DI 0 ax [orig:270 D.25534 ] [270])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:367 512 {*ashldi3_1}
     (nil))
(insn 895 615 616 22 (set (reg:DI 1 dx [orig:270 D.25534 ] [270])
        (reg:DI 0 ax [orig:270 D.25534 ] [270])) ge2fitman_sup.cpp:367 89 {*movdi_internal}
     (nil))
(insn 616 895 617 22 (set (reg/f:DI 0 ax [503])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:367 89 {*movdi_internal}
     (nil))
(insn 617 616 618 22 (parallel [
            (set (reg/f:DI 0 ax [orig:271 D.25543 ] [271])
                (plus:DI (reg/f:DI 0 ax [503])
                    (reg:DI 1 dx [orig:270 D.25534 ] [270])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:367 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:270 D.25534 ] [270]))
        (nil)))
(insn 618 617 619 22 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:271 D.25543 ] [271])
                (const_int 2 [0x2])) [0 _276->status.number+0 S2 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:367 92 {*movhi_internal}
     (nil))
(insn 619 618 620 22 (set (reg:SI 0 ax [504])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:368 90 {*movsi_internal}
     (nil))
(insn 620 619 621 22 (set (reg:DI 0 ax [orig:272 D.25534 ] [272])
        (sign_extend:DI (reg:SI 0 ax [504]))) ge2fitman_sup.cpp:368 142 {*extendsidi2_rex64}
     (nil))
(insn 621 620 897 22 (parallel [
            (set (reg:DI 0 ax [orig:273 D.25534 ] [273])
                (ashift:DI (reg:DI 0 ax [orig:273 D.25534 ] [273])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:368 512 {*ashldi3_1}
     (nil))
(insn 897 621 622 22 (set (reg:DI 1 dx [orig:273 D.25534 ] [273])
        (reg:DI 0 ax [orig:273 D.25534 ] [273])) ge2fitman_sup.cpp:368 89 {*movdi_internal}
     (nil))
(insn 622 897 623 22 (set (reg/f:DI 0 ax [505])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:368 89 {*movdi_internal}
     (nil))
(insn 623 622 624 22 (parallel [
            (set (reg/f:DI 0 ax [orig:274 D.25543 ] [274])
                (plus:DI (reg/f:DI 0 ax [505])
                    (reg:DI 1 dx [orig:273 D.25534 ] [273])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:368 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:273 D.25534 ] [273]))
        (nil)))
(insn 624 623 625 22 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:274 D.25543 ] [274])
                (const_int 4 [0x4])) [0 _280->index.number+0 S2 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:368 92 {*movhi_internal}
     (nil))
(insn 625 624 626 22 (set (reg:SI 0 ax [506])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:369 90 {*movsi_internal}
     (nil))
(insn 626 625 627 22 (set (reg:DI 0 ax [orig:275 D.25534 ] [275])
        (sign_extend:DI (reg:SI 0 ax [506]))) ge2fitman_sup.cpp:369 142 {*extendsidi2_rex64}
     (nil))
(insn 627 626 899 22 (parallel [
            (set (reg:DI 0 ax [orig:276 D.25534 ] [276])
                (ashift:DI (reg:DI 0 ax [orig:276 D.25534 ] [276])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:369 512 {*ashldi3_1}
     (nil))
(insn 899 627 628 22 (set (reg:DI 1 dx [orig:276 D.25534 ] [276])
        (reg:DI 0 ax [orig:276 D.25534 ] [276])) ge2fitman_sup.cpp:369 89 {*movdi_internal}
     (nil))
(insn 628 899 629 22 (set (reg/f:DI 0 ax [507])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:369 89 {*movdi_internal}
     (nil))
(insn 629 628 630 22 (parallel [
            (set (reg/f:DI 0 ax [orig:277 D.25543 ] [277])
                (plus:DI (reg/f:DI 0 ax [507])
                    (reg:DI 1 dx [orig:276 D.25534 ] [276])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:369 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:276 D.25534 ] [276]))
        (nil)))
(insn 630 629 631 22 (set (mem/j:HI (plus:DI (reg/f:DI 0 ax [orig:277 D.25543 ] [277])
                (const_int 6 [0x6])) [0 _284->spare3.number+0 S2 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:369 92 {*movhi_internal}
     (nil))
(insn 631 630 632 22 (set (reg:SI 0 ax [508])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:370 90 {*movsi_internal}
     (nil))
(insn 632 631 633 22 (set (reg:DI 0 ax [orig:278 D.25534 ] [278])
        (sign_extend:DI (reg:SI 0 ax [508]))) ge2fitman_sup.cpp:370 142 {*extendsidi2_rex64}
     (nil))
(insn 633 632 901 22 (parallel [
            (set (reg:DI 0 ax [orig:279 D.25534 ] [279])
                (ashift:DI (reg:DI 0 ax [orig:279 D.25534 ] [279])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:370 512 {*ashldi3_1}
     (nil))
(insn 901 633 634 22 (set (reg:DI 1 dx [orig:279 D.25534 ] [279])
        (reg:DI 0 ax [orig:279 D.25534 ] [279])) ge2fitman_sup.cpp:370 89 {*movdi_internal}
     (nil))
(insn 634 901 635 22 (set (reg/f:DI 0 ax [509])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:370 89 {*movdi_internal}
     (nil))
(insn 635 634 636 22 (parallel [
            (set (reg/f:DI 0 ax [orig:280 D.25543 ] [280])
                (plus:DI (reg/f:DI 0 ax [509])
                    (reg:DI 1 dx [orig:279 D.25534 ] [279])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:370 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:279 D.25534 ] [279]))
        (nil)))
(insn 636 635 637 22 (set (mem/j:DI (plus:DI (reg/f:DI 0 ax [orig:280 D.25543 ] [280])
                (const_int 8 [0x8])) [0 _288->ctcount.number+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:370 89 {*movdi_internal}
     (nil))
(insn 637 636 638 22 (set (reg:SI 0 ax [510])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:371 90 {*movsi_internal}
     (nil))
(insn 638 637 639 22 (set (reg:DI 0 ax [orig:281 D.25534 ] [281])
        (sign_extend:DI (reg:SI 0 ax [510]))) ge2fitman_sup.cpp:371 142 {*extendsidi2_rex64}
     (nil))
(insn 639 638 903 22 (parallel [
            (set (reg:DI 0 ax [orig:282 D.25534 ] [282])
                (ashift:DI (reg:DI 0 ax [orig:282 D.25534 ] [282])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:371 512 {*ashldi3_1}
     (nil))
(insn 903 639 640 22 (set (reg:DI 1 dx [orig:282 D.25534 ] [282])
        (reg:DI 0 ax [orig:282 D.25534 ] [282])) ge2fitman_sup.cpp:371 89 {*movdi_internal}
     (nil))
(insn 640 903 641 22 (set (reg/f:DI 0 ax [511])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:371 89 {*movdi_internal}
     (nil))
(insn 641 640 642 22 (parallel [
            (set (reg/f:DI 0 ax [orig:283 D.25543 ] [283])
                (plus:DI (reg/f:DI 0 ax [511])
                    (reg:DI 1 dx [orig:282 D.25534 ] [282])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:371 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:282 D.25534 ] [282]))
        (nil)))
(insn 642 641 643 22 (set (reg:SF 21 xmm0 [512])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:371 129 {*movsf_internal}
     (nil))
(insn 643 642 644 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:283 D.25543 ] [283])
                (const_int 16 [0x10])) [0 _292->lpval.number+0 S4 A64])
        (reg:SF 21 xmm0 [512])) ge2fitman_sup.cpp:371 129 {*movsf_internal}
     (nil))
(insn 644 643 645 22 (set (reg:SI 0 ax [513])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:372 90 {*movsi_internal}
     (nil))
(insn 645 644 646 22 (set (reg:DI 0 ax [orig:284 D.25534 ] [284])
        (sign_extend:DI (reg:SI 0 ax [513]))) ge2fitman_sup.cpp:372 142 {*extendsidi2_rex64}
     (nil))
(insn 646 645 905 22 (parallel [
            (set (reg:DI 0 ax [orig:285 D.25534 ] [285])
                (ashift:DI (reg:DI 0 ax [orig:285 D.25534 ] [285])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:372 512 {*ashldi3_1}
     (nil))
(insn 905 646 647 22 (set (reg:DI 1 dx [orig:285 D.25534 ] [285])
        (reg:DI 0 ax [orig:285 D.25534 ] [285])) ge2fitman_sup.cpp:372 89 {*movdi_internal}
     (nil))
(insn 647 905 648 22 (set (reg/f:DI 0 ax [514])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:372 89 {*movdi_internal}
     (nil))
(insn 648 647 649 22 (parallel [
            (set (reg/f:DI 0 ax [orig:286 D.25543 ] [286])
                (plus:DI (reg/f:DI 0 ax [514])
                    (reg:DI 1 dx [orig:285 D.25534 ] [285])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:372 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:285 D.25534 ] [285]))
        (nil)))
(insn 649 648 650 22 (set (reg:SF 21 xmm0 [515])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:372 129 {*movsf_internal}
     (nil))
(insn 650 649 651 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:286 D.25543 ] [286])
                (const_int 20 [0x14])) [0 _296->rpval.number+0 S4 A32])
        (reg:SF 21 xmm0 [515])) ge2fitman_sup.cpp:372 129 {*movsf_internal}
     (nil))
(insn 651 650 652 22 (set (reg:SI 0 ax [516])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:373 90 {*movsi_internal}
     (nil))
(insn 652 651 653 22 (set (reg:DI 0 ax [orig:287 D.25534 ] [287])
        (sign_extend:DI (reg:SI 0 ax [516]))) ge2fitman_sup.cpp:373 142 {*extendsidi2_rex64}
     (nil))
(insn 653 652 907 22 (parallel [
            (set (reg:DI 0 ax [orig:288 D.25534 ] [288])
                (ashift:DI (reg:DI 0 ax [orig:288 D.25534 ] [288])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:373 512 {*ashldi3_1}
     (nil))
(insn 907 653 654 22 (set (reg:DI 1 dx [orig:288 D.25534 ] [288])
        (reg:DI 0 ax [orig:288 D.25534 ] [288])) ge2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 654 907 655 22 (set (reg/f:DI 0 ax [517])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:373 89 {*movdi_internal}
     (nil))
(insn 655 654 656 22 (parallel [
            (set (reg/f:DI 0 ax [orig:289 D.25543 ] [289])
                (plus:DI (reg/f:DI 0 ax [517])
                    (reg:DI 1 dx [orig:288 D.25534 ] [288])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:373 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:288 D.25534 ] [288]))
        (nil)))
(insn 656 655 657 22 (set (reg:SF 21 xmm0 [518])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:373 129 {*movsf_internal}
     (nil))
(insn 657 656 658 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:289 D.25543 ] [289])
                (const_int 24 [0x18])) [0 _300->lvl.number+0 S4 A64])
        (reg:SF 21 xmm0 [518])) ge2fitman_sup.cpp:373 129 {*movsf_internal}
     (nil))
(insn 658 657 659 22 (set (reg:SI 0 ax [519])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:374 90 {*movsi_internal}
     (nil))
(insn 659 658 660 22 (set (reg:DI 0 ax [orig:290 D.25534 ] [290])
        (sign_extend:DI (reg:SI 0 ax [519]))) ge2fitman_sup.cpp:374 142 {*extendsidi2_rex64}
     (nil))
(insn 660 659 909 22 (parallel [
            (set (reg:DI 0 ax [orig:291 D.25534 ] [291])
                (ashift:DI (reg:DI 0 ax [orig:291 D.25534 ] [291])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:374 512 {*ashldi3_1}
     (nil))
(insn 909 660 661 22 (set (reg:DI 1 dx [orig:291 D.25534 ] [291])
        (reg:DI 0 ax [orig:291 D.25534 ] [291])) ge2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 661 909 662 22 (set (reg/f:DI 0 ax [520])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])) ge2fitman_sup.cpp:374 89 {*movdi_internal}
     (nil))
(insn 662 661 663 22 (parallel [
            (set (reg/f:DI 0 ax [orig:292 D.25543 ] [292])
                (plus:DI (reg/f:DI 0 ax [520])
                    (reg:DI 1 dx [orig:291 D.25534 ] [291])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:374 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [0 block_header+0 S8 A64])
            (reg:DI 1 dx [orig:291 D.25534 ] [291]))
        (nil)))
(insn 663 662 664 22 (set (reg:SF 21 xmm0 [521])
        (mem/u/c:SF (symbol_ref/u:DI ("*.LC13") [flags 0x2]) [0  S4 A32])) ge2fitman_sup.cpp:374 129 {*movsf_internal}
     (nil))
(insn 664 663 665 22 (set (mem/j:SF (plus:DI (reg/f:DI 0 ax [orig:292 D.25543 ] [292])
                (const_int 28 [0x1c])) [0 _304->tlt.number+0 S4 A32])
        (reg:SF 21 xmm0 [521])) ge2fitman_sup.cpp:374 129 {*movsf_internal}
     (nil))
(insn 665 664 666 22 (set (reg:SI 0 ax [522])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:377 90 {*movsi_internal}
     (nil))
(insn 666 665 667 22 (set (reg:DI 1 dx [orig:293 D.25534 ] [293])
        (sign_extend:DI (reg:SI 0 ax [522]))) ge2fitman_sup.cpp:377 142 {*extendsidi2_rex64}
     (nil))
(insn 667 666 668 22 (set (reg:DI 0 ax [523])
        (reg:DI 1 dx [orig:293 D.25534 ] [293])) ge2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 668 667 669 22 (parallel [
            (set (reg:DI 0 ax [523])
                (ashift:DI (reg:DI 0 ax [523])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:377 512 {*ashldi3_1}
     (nil))
(insn 669 668 670 22 (parallel [
            (set (reg:DI 0 ax [523])
                (plus:DI (reg:DI 0 ax [523])
                    (reg:DI 1 dx [orig:293 D.25534 ] [293])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:377 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:293 D.25534 ] [293])
            (const_int 5 [0x5]))
        (nil)))
(insn 670 669 672 22 (parallel [
            (set (reg:DI 0 ax [524])
                (ashift:DI (reg:DI 0 ax [523])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:377 512 {*ashldi3_1}
     (nil))
(insn 672 670 673 22 (set (reg:DI 1 dx [orig:294 D.25534 ] [294])
        (reg:DI 0 ax [523])) ge2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 673 672 674 22 (set (reg/f:DI 0 ax [525])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:377 89 {*movdi_internal}
     (nil))
(insn 674 673 675 22 (parallel [
            (set (reg/f:DI 0 ax [orig:295 D.25544 ] [295])
                (plus:DI (reg/f:DI 0 ax [525])
                    (reg:DI 1 dx [orig:294 D.25534 ] [294])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:377 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:294 D.25534 ] [294]))
        (nil)))
(insn 675 674 676 22 (set (mem/j:SI (reg/f:DI 0 ax [orig:295 D.25544 ] [295]) [0 _309->num_datasets+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:377 90 {*movsi_internal}
     (nil))
(insn 676 675 677 22 (set (reg:SI 0 ax [526])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:378 90 {*movsi_internal}
     (nil))
(insn 677 676 678 22 (set (reg:DI 1 dx [orig:296 D.25534 ] [296])
        (sign_extend:DI (reg:SI 0 ax [526]))) ge2fitman_sup.cpp:378 142 {*extendsidi2_rex64}
     (nil))
(insn 678 677 679 22 (set (reg:DI 0 ax [527])
        (reg:DI 1 dx [orig:296 D.25534 ] [296])) ge2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 679 678 680 22 (parallel [
            (set (reg:DI 0 ax [527])
                (ashift:DI (reg:DI 0 ax [527])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:378 512 {*ashldi3_1}
     (nil))
(insn 680 679 681 22 (parallel [
            (set (reg:DI 0 ax [527])
                (plus:DI (reg:DI 0 ax [527])
                    (reg:DI 1 dx [orig:296 D.25534 ] [296])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:378 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:296 D.25534 ] [296])
            (const_int 5 [0x5]))
        (nil)))
(insn 681 680 683 22 (parallel [
            (set (reg:DI 0 ax [528])
                (ashift:DI (reg:DI 0 ax [527])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:378 512 {*ashldi3_1}
     (nil))
(insn 683 681 684 22 (set (reg:DI 1 dx [orig:297 D.25534 ] [297])
        (reg:DI 0 ax [527])) ge2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 684 683 685 22 (set (reg/f:DI 0 ax [529])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:378 89 {*movdi_internal}
     (nil))
(insn 685 684 686 22 (parallel [
            (set (reg/f:DI 0 ax [orig:298 D.25544 ] [298])
                (plus:DI (reg/f:DI 0 ax [529])
                    (reg:DI 1 dx [orig:297 D.25534 ] [297])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:378 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:297 D.25534 ] [297]))
        (nil)))
(insn 686 685 687 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:298 D.25544 ] [298])
                (const_int 4 [0x4])) [0 _313->num_unsup_sets+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:378 90 {*movsi_internal}
     (nil))
(insn 687 686 688 22 (set (reg:SI 0 ax [530])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:379 90 {*movsi_internal}
     (nil))
(insn 688 687 689 22 (set (reg:DI 1 dx [orig:299 D.25534 ] [299])
        (sign_extend:DI (reg:SI 0 ax [530]))) ge2fitman_sup.cpp:379 142 {*extendsidi2_rex64}
     (nil))
(insn 689 688 690 22 (set (reg:DI 0 ax [531])
        (reg:DI 1 dx [orig:299 D.25534 ] [299])) ge2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 690 689 691 22 (parallel [
            (set (reg:DI 0 ax [531])
                (ashift:DI (reg:DI 0 ax [531])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:379 512 {*ashldi3_1}
     (nil))
(insn 691 690 692 22 (parallel [
            (set (reg:DI 0 ax [531])
                (plus:DI (reg:DI 0 ax [531])
                    (reg:DI 1 dx [orig:299 D.25534 ] [299])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:379 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:299 D.25534 ] [299])
            (const_int 5 [0x5]))
        (nil)))
(insn 692 691 694 22 (parallel [
            (set (reg:DI 0 ax [532])
                (ashift:DI (reg:DI 0 ax [531])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:379 512 {*ashldi3_1}
     (nil))
(insn 694 692 695 22 (set (reg:DI 1 dx [orig:300 D.25534 ] [300])
        (reg:DI 0 ax [531])) ge2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 695 694 696 22 (set (reg/f:DI 0 ax [533])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:379 89 {*movdi_internal}
     (nil))
(insn 696 695 697 22 (parallel [
            (set (reg/f:DI 0 ax [orig:301 D.25544 ] [301])
                (plus:DI (reg/f:DI 0 ax [533])
                    (reg:DI 1 dx [orig:300 D.25534 ] [300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:379 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:300 D.25534 ] [300]))
        (nil)))
(insn 697 696 698 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:301 D.25544 ] [301])
                (const_int 8 [0x8])) [0 _317->file_size+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:379 90 {*movsi_internal}
     (nil))
(insn 698 697 699 22 (set (reg:SI 0 ax [534])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:380 90 {*movsi_internal}
     (nil))
(insn 699 698 700 22 (set (reg:DI 1 dx [orig:302 D.25534 ] [302])
        (sign_extend:DI (reg:SI 0 ax [534]))) ge2fitman_sup.cpp:380 142 {*extendsidi2_rex64}
     (nil))
(insn 700 699 701 22 (set (reg:DI 0 ax [535])
        (reg:DI 1 dx [orig:302 D.25534 ] [302])) ge2fitman_sup.cpp:380 89 {*movdi_internal}
     (nil))
(insn 701 700 702 22 (parallel [
            (set (reg:DI 0 ax [535])
                (ashift:DI (reg:DI 0 ax [535])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:380 512 {*ashldi3_1}
     (nil))
(insn 702 701 703 22 (parallel [
            (set (reg:DI 0 ax [535])
                (plus:DI (reg:DI 0 ax [535])
                    (reg:DI 1 dx [orig:302 D.25534 ] [302])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:380 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:302 D.25534 ] [302])
            (const_int 5 [0x5]))
        (nil)))
(insn 703 702 705 22 (parallel [
            (set (reg:DI 0 ax [536])
                (ashift:DI (reg:DI 0 ax [535])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:380 512 {*ashldi3_1}
     (nil))
(insn 705 703 706 22 (set (reg:DI 1 dx [orig:303 D.25534 ] [303])
        (reg:DI 0 ax [535])) ge2fitman_sup.cpp:380 89 {*movdi_internal}
     (nil))
(insn 706 705 707 22 (set (reg/f:DI 0 ax [537])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:380 89 {*movdi_internal}
     (nil))
(insn 707 706 708 22 (parallel [
            (set (reg/f:DI 0 ax [orig:304 D.25544 ] [304])
                (plus:DI (reg/f:DI 0 ax [537])
                    (reg:DI 1 dx [orig:303 D.25534 ] [303])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:380 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:303 D.25534 ] [303]))
        (nil)))
(insn 708 707 709 22 (set (mem/j:SI (plus:DI (reg/f:DI 0 ax [orig:304 D.25544 ] [304])
                (const_int 12 [0xc])) [0 _321->total_data_size+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:380 90 {*movsi_internal}
     (nil))
(insn 709 708 730 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:381 90 {*movsi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;;              24 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 305 538
(code_label 730 709 710 23 78 "" [1 uses])
(note 710 730 711 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 711 710 712 23 (set (reg:SI 0 ax [538])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:381 90 {*movsi_internal}
     (nil))
(insn 712 711 713 23 (set (reg:DI 0 ax [orig:305 D.25534 ] [305])
        (sign_extend:DI (reg:SI 0 ax [538]))) ge2fitman_sup.cpp:381 142 {*extendsidi2_rex64}
     (nil))
(insn 713 712 714 23 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [orig:305 D.25534 ] [305])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:381 8 {*cmpdi_1}
     (nil))
(jump_insn 714 713 715 23 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 733)
            (pc))) ge2fitman_sup.cpp:381 612 {*jcc_1}
     (nil)
 -> 733)
;;  succ:       25
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 306 307 308 539 540 541 542 543 544
(note 715 714 716 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 716 715 717 24 (set (reg:SI 0 ax [539])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:382 90 {*movsi_internal}
     (nil))
(insn 717 716 718 24 (set (reg:DI 1 dx [orig:306 D.25534 ] [306])
        (sign_extend:DI (reg:SI 0 ax [539]))) ge2fitman_sup.cpp:382 142 {*extendsidi2_rex64}
     (nil))
(insn 718 717 719 24 (set (reg:DI 0 ax [540])
        (reg:DI 1 dx [orig:306 D.25534 ] [306])) ge2fitman_sup.cpp:382 89 {*movdi_internal}
     (nil))
(insn 719 718 720 24 (parallel [
            (set (reg:DI 0 ax [540])
                (ashift:DI (reg:DI 0 ax [540])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:382 512 {*ashldi3_1}
     (nil))
(insn 720 719 721 24 (parallel [
            (set (reg:DI 0 ax [540])
                (plus:DI (reg:DI 0 ax [540])
                    (reg:DI 1 dx [orig:306 D.25534 ] [306])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:382 218 {*adddi_1}
     (expr_list:REG_EQUAL (mult:DI (reg:DI 1 dx [orig:306 D.25534 ] [306])
            (const_int 5 [0x5]))
        (nil)))
(insn 721 720 723 24 (parallel [
            (set (reg:DI 0 ax [541])
                (ashift:DI (reg:DI 0 ax [540])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:382 512 {*ashldi3_1}
     (nil))
(insn 723 721 724 24 (set (reg:DI 1 dx [orig:307 D.25534 ] [307])
        (reg:DI 0 ax [540])) ge2fitman_sup.cpp:382 89 {*movdi_internal}
     (nil))
(insn 724 723 725 24 (set (reg/f:DI 0 ax [542])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:382 89 {*movdi_internal}
     (nil))
(insn 725 724 726 24 (parallel [
            (set (reg/f:DI 1 dx [orig:308 D.25544 ] [308])
                (plus:DI (reg:DI 1 dx [orig:307 D.25534 ] [307])
                    (reg/f:DI 0 ax [542])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:382 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -64 [0xffffffffffffffc0])) [0 infile_struct+0 S8 A64])
            (reg:DI 1 dx [orig:307 D.25534 ] [307]))
        (nil)))
(insn 726 725 727 24 (set (reg:SI 0 ax [544])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])) ge2fitman_sup.cpp:382 90 {*movsi_internal}
     (nil))
(insn 727 726 728 24 (set (reg:DI 0 ax [543])
        (sign_extend:DI (reg:SI 0 ax [544]))) ge2fitman_sup.cpp:382 142 {*extendsidi2_rex64}
     (nil))
(insn 728 727 729 24 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [orig:308 D.25544 ] [308])
                    (reg:DI 0 ax [543]))
                (const_int 16 [0x10])) [0 _327->version S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:382 93 {*movqi_internal}
     (nil))
(insn 729 728 797 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:381 217 {*addsi_1}
     (nil))
(jump_insn 797 729 798 24 (set (pc)
        (label_ref 730)) ge2fitman_sup.cpp:381 654 {jump}
     (nil)
 -> 730)
;;  succ:       23 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 798 797 733)
;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 733 798 734 25 77 "" [1 uses])
(note 734 733 735 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 735 734 799 25 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:274 217 {*addsi_1}
     (nil))
(jump_insn 799 735 800 25 (set (pc)
        (label_ref 736)) ge2fitman_sup.cpp:274 654 {jump}
     (nil)
 -> 736)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 800 799 739)
;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 309 310 311 312 313 314 315 545 546 547 548 549 550
(code_label 739 800 740 26 64 "" [1 uses])
(note 740 739 741 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 741 740 742 26 (set (reg/f:DI 0 ax [orig:309 D.25545 ] [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 742 741 910 26 (set (reg:DI 5 di [612])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 910 742 743 26 (set (mem:DI (reg/f:DI 0 ax [orig:309 D.25545 ] [309]) [0 MEM[(void *)_332]+0 S8 A8])
        (reg:DI 5 di [612])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 743 910 911 26 (set (reg:DI 2 cx [613])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 911 743 744 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:309 D.25545 ] [309])
                (const_int 8 [0x8])) [0 MEM[(void *)_332]+8 S8 A8])
        (reg:DI 2 cx [613])) ge2fitman_sup.cpp:387 89 {*movdi_internal}
     (nil))
(insn 744 911 745 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:309 D.25545 ] [309])
                (const_int 16 [0x10])) [0 MEM[(void *)_332]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:387 90 {*movsi_internal}
     (nil))
(insn 745 744 746 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:309 D.25545 ] [309])
                (const_int 20 [0x14])) [0 MEM[(void *)_332]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:387 92 {*movhi_internal}
     (nil))
(insn 746 745 747 26 (set (reg/f:DI 0 ax [545])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 747 746 748 26 (parallel [
            (set (reg/f:DI 0 ax [orig:310 D.25545 ] [310])
                (plus:DI (reg/f:DI 0 ax [545])
                    (const_int 256 [0x100])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:388 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 256 [0x100]))
        (nil)))
(insn 748 747 912 26 (set (reg:DI 4 si [614])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 912 748 749 26 (set (mem:DI (reg/f:DI 0 ax [orig:310 D.25545 ] [310]) [0 MEM[(void *)_334]+0 S8 A8])
        (reg:DI 4 si [614])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 749 912 913 26 (set (reg:DI 5 di [615])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 913 749 750 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:310 D.25545 ] [310])
                (const_int 8 [0x8])) [0 MEM[(void *)_334]+8 S8 A8])
        (reg:DI 5 di [615])) ge2fitman_sup.cpp:388 89 {*movdi_internal}
     (nil))
(insn 750 913 751 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:310 D.25545 ] [310])
                (const_int 16 [0x10])) [0 MEM[(void *)_334]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:388 90 {*movsi_internal}
     (nil))
(insn 751 750 752 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:310 D.25545 ] [310])
                (const_int 20 [0x14])) [0 MEM[(void *)_334]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:388 92 {*movhi_internal}
     (nil))
(insn 752 751 753 26 (set (reg/f:DI 0 ax [546])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 753 752 754 26 (parallel [
            (set (reg/f:DI 0 ax [orig:311 D.25545 ] [311])
                (plus:DI (reg/f:DI 0 ax [546])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:389 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 754 753 914 26 (set (reg:DI 2 cx [616])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 914 754 755 26 (set (mem:DI (reg/f:DI 0 ax [orig:311 D.25545 ] [311]) [0 MEM[(void *)_336]+0 S8 A8])
        (reg:DI 2 cx [616])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 755 914 915 26 (set (reg:DI 4 si [617])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 915 755 756 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:311 D.25545 ] [311])
                (const_int 8 [0x8])) [0 MEM[(void *)_336]+8 S8 A8])
        (reg:DI 4 si [617])) ge2fitman_sup.cpp:389 89 {*movdi_internal}
     (nil))
(insn 756 915 757 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:311 D.25545 ] [311])
                (const_int 16 [0x10])) [0 MEM[(void *)_336]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:389 90 {*movsi_internal}
     (nil))
(insn 757 756 758 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:311 D.25545 ] [311])
                (const_int 20 [0x14])) [0 MEM[(void *)_336]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:389 92 {*movhi_internal}
     (nil))
(insn 758 757 759 26 (set (reg/f:DI 0 ax [547])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 759 758 760 26 (parallel [
            (set (reg/f:DI 0 ax [orig:312 D.25545 ] [312])
                (plus:DI (reg/f:DI 0 ax [547])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:390 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 760 759 916 26 (set (reg:DI 5 di [618])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 916 760 761 26 (set (mem:DI (reg/f:DI 0 ax [orig:312 D.25545 ] [312]) [0 MEM[(void *)_338]+0 S8 A8])
        (reg:DI 5 di [618])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 761 916 917 26 (set (reg:DI 2 cx [619])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 917 761 762 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:312 D.25545 ] [312])
                (const_int 8 [0x8])) [0 MEM[(void *)_338]+8 S8 A8])
        (reg:DI 2 cx [619])) ge2fitman_sup.cpp:390 89 {*movdi_internal}
     (nil))
(insn 762 917 763 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:312 D.25545 ] [312])
                (const_int 16 [0x10])) [0 MEM[(void *)_338]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:390 90 {*movsi_internal}
     (nil))
(insn 763 762 764 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:312 D.25545 ] [312])
                (const_int 20 [0x14])) [0 MEM[(void *)_338]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:390 92 {*movhi_internal}
     (nil))
(insn 764 763 765 26 (set (reg/f:DI 0 ax [548])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 765 764 766 26 (parallel [
            (set (reg/f:DI 0 ax [orig:313 D.25545 ] [313])
                (plus:DI (reg/f:DI 0 ax [548])
                    (const_int 1024 [0x400])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:391 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1024 [0x400]))
        (nil)))
(insn 766 765 918 26 (set (reg:DI 4 si [620])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 918 766 767 26 (set (mem:DI (reg/f:DI 0 ax [orig:313 D.25545 ] [313]) [0 MEM[(void *)_340]+0 S8 A8])
        (reg:DI 4 si [620])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 767 918 919 26 (set (reg:DI 5 di [621])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 919 767 768 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:313 D.25545 ] [313])
                (const_int 8 [0x8])) [0 MEM[(void *)_340]+8 S8 A8])
        (reg:DI 5 di [621])) ge2fitman_sup.cpp:391 89 {*movdi_internal}
     (nil))
(insn 768 919 769 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:313 D.25545 ] [313])
                (const_int 16 [0x10])) [0 MEM[(void *)_340]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:391 90 {*movsi_internal}
     (nil))
(insn 769 768 770 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:313 D.25545 ] [313])
                (const_int 20 [0x14])) [0 MEM[(void *)_340]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:391 92 {*movhi_internal}
     (nil))
(insn 770 769 771 26 (set (reg/f:DI 0 ax [549])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 771 770 772 26 (parallel [
            (set (reg/f:DI 0 ax [orig:314 D.25545 ] [314])
                (plus:DI (reg/f:DI 0 ax [549])
                    (const_int 1280 [0x500])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:392 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1280 [0x500]))
        (nil)))
(insn 772 771 920 26 (set (reg:DI 2 cx [622])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 920 772 773 26 (set (mem:DI (reg/f:DI 0 ax [orig:314 D.25545 ] [314]) [0 MEM[(void *)_342]+0 S8 A8])
        (reg:DI 2 cx [622])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 773 920 921 26 (set (reg:DI 4 si [623])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 921 773 774 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:314 D.25545 ] [314])
                (const_int 8 [0x8])) [0 MEM[(void *)_342]+8 S8 A8])
        (reg:DI 4 si [623])) ge2fitman_sup.cpp:392 89 {*movdi_internal}
     (nil))
(insn 774 921 775 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:314 D.25545 ] [314])
                (const_int 16 [0x10])) [0 MEM[(void *)_342]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:392 90 {*movsi_internal}
     (nil))
(insn 775 774 776 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:314 D.25545 ] [314])
                (const_int 20 [0x14])) [0 MEM[(void *)_342]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:392 92 {*movhi_internal}
     (nil))
(insn 776 775 777 26 (set (reg/f:DI 0 ax [550])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 777 776 778 26 (parallel [
            (set (reg/f:DI 0 ax [orig:315 D.25545 ] [315])
                (plus:DI (reg/f:DI 0 ax [550])
                    (const_int 1536 [0x600])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:393 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -56 [0xffffffffffffffc8])) [0 io_filenames+0 S8 A64])
            (const_int 1536 [0x600]))
        (nil)))
(insn 778 777 922 26 (set (reg:DI 5 di [624])
        (const_int 7954883516223745870 [0x6e656c6946206f4e])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 922 778 779 26 (set (mem:DI (reg/f:DI 0 ax [orig:315 D.25545 ] [315]) [0 MEM[(void *)_344]+0 S8 A8])
        (reg:DI 5 di [624])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 779 922 923 26 (set (reg:DI 2 cx [625])
        (const_int 7593480468811836769 [0x6961764120656d61])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 923 779 780 26 (set (mem:DI (plus:DI (reg/f:DI 0 ax [orig:315 D.25545 ] [315])
                (const_int 8 [0x8])) [0 MEM[(void *)_344]+8 S8 A8])
        (reg:DI 2 cx [625])) ge2fitman_sup.cpp:393 89 {*movdi_internal}
     (nil))
(insn 780 923 781 26 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:315 D.25545 ] [315])
                (const_int 16 [0x10])) [0 MEM[(void *)_344]+16 S4 A8])
        (const_int 1818386796 [0x6c62616c])) ge2fitman_sup.cpp:393 90 {*movsi_internal}
     (nil))
(insn 781 780 784 26 (set (mem:HI (plus:DI (reg/f:DI 0 ax [orig:315 D.25545 ] [315])
                (const_int 20 [0x14])) [0 MEM[(void *)_344]+20 S2 A8])
        (const_int 101 [0x65])) ge2fitman_sup.cpp:393 92 {*movhi_internal}
     (nil))
(insn 784 781 801 26 (const_int 0 [0]) ge2fitman_sup.cpp:396 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 801 784 0 NOTE_INSN_DELETED)

;; Function void disp_help(int) (_Z9disp_helpi, funcdef_no=1029, decl_uid=24469, cgraph_uid=234, symbol_order=235)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mr {*cmpsi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 45:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 49:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 57:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 59:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 65:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 69:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 71:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 83:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 85:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 89:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 91:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 99:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 101:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 103:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 105:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 113:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 115:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 117:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 119:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 121:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 127:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 129:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 131:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 133:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 135:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 137:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 139:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 143:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 145:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 147:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 149:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 151:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 153:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 155:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 159:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 161:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 163:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 165:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 167:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 169:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 171:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 173:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void disp_help(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={82d} r1={82d} r2={82d} r4={82d} r5={163d,82u} r6={1d,8u} r7={1d,87u} r8={81d} r9={81d} r10={81d} r11={81d} r12={81d} r13={81d} r14={81d} r15={81d} r17={82d,1u} r18={81d} r19={81d} r20={1d,1u} r21={82d} r22={82d} r23={82d} r24={82d} r25={82d} r26={82d} r27={82d} r28={82d} r29={81d} r30={81d} r31={81d} r32={81d} r33={81d} r34={81d} r35={81d} r36={81d} r37={82d} r38={82d} r39={81d} r40={81d} r45={81d} r46={81d} r47={81d} r48={81d} r49={81d} r50={81d} r51={81d} r52={81d} r53={81d} r54={81d} r55={81d} r56={81d} r57={81d} r58={81d} r59={81d} r60={81d} r61={81d} r62={81d} r63={81d} r64={81d} r65={81d} r66={81d} r67={81d} r68={81d} r69={81d} r70={81d} r71={81d} r72={81d} r73={81d} r74={81d} r75={81d} r76={81d} r77={81d} r78={81d} r79={81d} r80={81d} 
;;    total ref usage 6111{5932d,179u,0e} in 167{86 regular + 81 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 version+0 S4 A32])
        (reg:SI 5 di [ version ])) ge2fitman_sup.cpp:401 90 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 version+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:403 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) ge2fitman_sup.cpp:403 612 {*jcc_1}
     (nil)
 -> 41)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f043dfd8b40 *.LC15>)) ge2fitman_sup.cpp:404 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:404 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f043dfd8bd0 *.LC16>)) ge2fitman_sup.cpp:405 89 {*movdi_internal}
     (nil))
(call_insn 12 11 13 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:405 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f043dfd8c60 *.LC17>)) ge2fitman_sup.cpp:406 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:406 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f043dfd8cf0 *.LC18>)) ge2fitman_sup.cpp:407 89 {*movdi_internal}
     (nil))
(call_insn 16 15 17 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:407 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f043dfd8d80 *.LC19>)) ge2fitman_sup.cpp:408 89 {*movdi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:408 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f043dfd8e10 *.LC20>)) ge2fitman_sup.cpp:409 89 {*movdi_internal}
     (nil))
(call_insn 20 19 21 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:409 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 22 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f043dfd8ea0 *.LC21>)) ge2fitman_sup.cpp:410 89 {*movdi_internal}
     (nil))
(call_insn 22 21 23 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:410 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f043dfd8f30 *.LC22>)) ge2fitman_sup.cpp:411 89 {*movdi_internal}
     (nil))
(call_insn 24 23 25 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:411 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f043dfde000 *.LC23>)) ge2fitman_sup.cpp:412 89 {*movdi_internal}
     (nil))
(call_insn 26 25 27 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:412 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f043dfde090 *.LC24>)) ge2fitman_sup.cpp:413 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:413 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f043dfde120 *.LC25>)) ge2fitman_sup.cpp:414 89 {*movdi_internal}
     (nil))
(call_insn 30 29 31 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:414 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 31 30 32 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f043dfde1b0 *.LC26>)) ge2fitman_sup.cpp:415 89 {*movdi_internal}
     (nil))
(call_insn 32 31 33 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:415 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 33 32 34 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f043dfde240 *.LC27>)) ge2fitman_sup.cpp:416 89 {*movdi_internal}
     (nil))
(call_insn 34 33 35 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:416 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f043dfde2d0 *.LC28>)) ge2fitman_sup.cpp:417 89 {*movdi_internal}
     (nil))
(call_insn 36 35 37 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:417 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 37 36 38 3 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f043dfde360 *.LC29>)) ge2fitman_sup.cpp:418 89 {*movdi_internal}
     (nil))
(call_insn 38 37 179 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:418 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 179 38 180 3 (set (pc)
        (label_ref:DI 183)) ge2fitman_sup.cpp:498 654 {jump}
     (nil)
 -> 183)
;;  succ:       6 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 180 179 41)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 41 180 42 4 81 "" [1 uses])
(note 42 41 43 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f043dfde3f0 *.LC30>)) ge2fitman_sup.cpp:422 89 {*movdi_internal}
     (nil))
(call_insn 44 43 45 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:422 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f043dfde480 *.LC31>)) ge2fitman_sup.cpp:423 89 {*movdi_internal}
     (nil))
(call_insn 46 45 47 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:423 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 47 46 48 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f043dfd8bd0 *.LC16>)) ge2fitman_sup.cpp:424 89 {*movdi_internal}
     (nil))
(call_insn 48 47 49 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:424 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 49 48 50 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f043dfd8c60 *.LC17>)) ge2fitman_sup.cpp:425 89 {*movdi_internal}
     (nil))
(call_insn 50 49 51 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:425 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 51 50 52 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f043dfde510 *.LC32>)) ge2fitman_sup.cpp:428 89 {*movdi_internal}
     (nil))
(call_insn 52 51 53 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:428 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f043dfde5a0 *.LC33>)) ge2fitman_sup.cpp:429 89 {*movdi_internal}
     (nil))
(call_insn 54 53 55 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:429 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 55 54 56 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f043dfde630 *.LC34>)) ge2fitman_sup.cpp:430 89 {*movdi_internal}
     (nil))
(call_insn 56 55 57 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:430 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 57 56 58 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f043dfde6c0 *.LC35>)) ge2fitman_sup.cpp:431 89 {*movdi_internal}
     (nil))
(call_insn 58 57 59 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:431 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 59 58 60 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f043dfde750 *.LC36>)) ge2fitman_sup.cpp:432 89 {*movdi_internal}
     (nil))
(call_insn 60 59 61 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:432 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 60 62 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f043dfde7e0 *.LC37>)) ge2fitman_sup.cpp:433 89 {*movdi_internal}
     (nil))
(call_insn 62 61 63 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:433 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 63 62 64 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f043dfd8cf0 *.LC18>)) ge2fitman_sup.cpp:436 89 {*movdi_internal}
     (nil))
(call_insn 64 63 65 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:436 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 65 64 66 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f043dfde870 *.LC38>)) ge2fitman_sup.cpp:437 89 {*movdi_internal}
     (nil))
(call_insn 66 65 67 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:437 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 67 66 68 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f043dfde900 *.LC39>)) ge2fitman_sup.cpp:438 89 {*movdi_internal}
     (nil))
(call_insn 68 67 69 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:438 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 69 68 70 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x7f043dfde990 *.LC40>)) ge2fitman_sup.cpp:439 89 {*movdi_internal}
     (nil))
(call_insn 70 69 71 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:439 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC41") [flags 0x2]  <var_decl 0x7f043dfdea20 *.LC41>)) ge2fitman_sup.cpp:440 89 {*movdi_internal}
     (nil))
(call_insn 72 71 73 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:440 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 73 72 74 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC42") [flags 0x2]  <var_decl 0x7f043dfdeab0 *.LC42>)) ge2fitman_sup.cpp:441 89 {*movdi_internal}
     (nil))
(call_insn 74 73 75 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:441 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 75 74 76 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f043dfd8e10 *.LC20>)) ge2fitman_sup.cpp:443 89 {*movdi_internal}
     (nil))
(call_insn 76 75 77 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:443 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 77 76 78 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC43") [flags 0x2]  <var_decl 0x7f043dfdeb40 *.LC43>)) ge2fitman_sup.cpp:444 89 {*movdi_internal}
     (nil))
(call_insn 78 77 79 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:444 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 79 78 80 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x7f043dfdebd0 *.LC44>)) ge2fitman_sup.cpp:445 89 {*movdi_internal}
     (nil))
(call_insn 80 79 81 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:445 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC45") [flags 0x2]  <var_decl 0x7f043dfdec60 *.LC45>)) ge2fitman_sup.cpp:446 89 {*movdi_internal}
     (nil))
(call_insn 82 81 83 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:446 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 83 82 84 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC46") [flags 0x2]  <var_decl 0x7f043dfdecf0 *.LC46>)) ge2fitman_sup.cpp:447 89 {*movdi_internal}
     (nil))
(call_insn 84 83 85 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:447 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 85 84 86 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC47") [flags 0x2]  <var_decl 0x7f043dfded80 *.LC47>)) ge2fitman_sup.cpp:448 89 {*movdi_internal}
     (nil))
(call_insn 86 85 87 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:448 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 87 86 88 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC48") [flags 0x2]  <var_decl 0x7f043dfdee10 *.LC48>)) ge2fitman_sup.cpp:449 89 {*movdi_internal}
     (nil))
(call_insn 88 87 89 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:449 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 89 88 90 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC49") [flags 0x2]  <var_decl 0x7f043dfdeea0 *.LC49>)) ge2fitman_sup.cpp:450 89 {*movdi_internal}
     (nil))
(call_insn 90 89 91 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:450 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 91 90 92 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC50") [flags 0x2]  <var_decl 0x7f043dfdef30 *.LC50>)) ge2fitman_sup.cpp:451 89 {*movdi_internal}
     (nil))
(call_insn 92 91 93 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:451 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 93 92 94 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC51") [flags 0x2]  <var_decl 0x7f043dfe6000 *.LC51>)) ge2fitman_sup.cpp:452 89 {*movdi_internal}
     (nil))
(call_insn 94 93 95 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:452 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 95 94 96 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC52") [flags 0x2]  <var_decl 0x7f043dfe6090 *.LC52>)) ge2fitman_sup.cpp:453 89 {*movdi_internal}
     (nil))
(call_insn 96 95 97 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:453 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 97 96 98 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC53") [flags 0x2]  <var_decl 0x7f043dfe6120 *.LC53>)) ge2fitman_sup.cpp:454 89 {*movdi_internal}
     (nil))
(call_insn 98 97 99 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:454 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 99 98 100 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC54") [flags 0x2]  <var_decl 0x7f043dfe61b0 *.LC54>)) ge2fitman_sup.cpp:455 89 {*movdi_internal}
     (nil))
(call_insn 100 99 101 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:455 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 101 100 102 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC55") [flags 0x2]  <var_decl 0x7f043dfe6240 *.LC55>)) ge2fitman_sup.cpp:456 89 {*movdi_internal}
     (nil))
(call_insn 102 101 103 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:456 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 103 102 104 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC56") [flags 0x2]  <var_decl 0x7f043dfe62d0 *.LC56>)) ge2fitman_sup.cpp:457 89 {*movdi_internal}
     (nil))
(call_insn 104 103 105 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:457 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 105 104 106 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC57") [flags 0x2]  <var_decl 0x7f043dfe6360 *.LC57>)) ge2fitman_sup.cpp:458 89 {*movdi_internal}
     (nil))
(call_insn 106 105 107 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:458 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 107 106 108 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC58") [flags 0x2]  <var_decl 0x7f043dfe63f0 *.LC58>)) ge2fitman_sup.cpp:459 89 {*movdi_internal}
     (nil))
(call_insn 108 107 109 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:459 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 109 108 110 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC59") [flags 0x2]  <var_decl 0x7f043dfe6480 *.LC59>)) ge2fitman_sup.cpp:460 89 {*movdi_internal}
     (nil))
(call_insn 110 109 111 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:460 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 111 110 112 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC55") [flags 0x2]  <var_decl 0x7f043dfe6240 *.LC55>)) ge2fitman_sup.cpp:461 89 {*movdi_internal}
     (nil))
(call_insn 112 111 113 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:461 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 113 112 114 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC60") [flags 0x2]  <var_decl 0x7f043dfe6510 *.LC60>)) ge2fitman_sup.cpp:462 89 {*movdi_internal}
     (nil))
(call_insn 114 113 115 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:462 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 115 114 116 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f043dfde240 *.LC27>)) ge2fitman_sup.cpp:464 89 {*movdi_internal}
     (nil))
(call_insn 116 115 117 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:464 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 117 116 118 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC61") [flags 0x2]  <var_decl 0x7f043dfe65a0 *.LC61>)) ge2fitman_sup.cpp:465 89 {*movdi_internal}
     (nil))
(call_insn 118 117 119 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:465 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC62") [flags 0x2]  <var_decl 0x7f043dfe6630 *.LC62>)) ge2fitman_sup.cpp:466 89 {*movdi_internal}
     (nil))
(call_insn 120 119 121 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:466 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 121 120 122 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC63") [flags 0x2]  <var_decl 0x7f043dfe66c0 *.LC63>)) ge2fitman_sup.cpp:467 89 {*movdi_internal}
     (nil))
(call_insn 122 121 123 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:467 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 123 122 124 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC64") [flags 0x2]  <var_decl 0x7f043dfe6750 *.LC64>)) ge2fitman_sup.cpp:468 89 {*movdi_internal}
     (nil))
(call_insn 124 123 125 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:468 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 125 124 126 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC65") [flags 0x2]  <var_decl 0x7f043dfe67e0 *.LC65>)) ge2fitman_sup.cpp:469 89 {*movdi_internal}
     (nil))
(call_insn 126 125 127 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:469 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 127 126 128 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC66") [flags 0x2]  <var_decl 0x7f043dfe6870 *.LC66>)) ge2fitman_sup.cpp:470 89 {*movdi_internal}
     (nil))
(call_insn 128 127 129 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:470 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 129 128 130 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC67") [flags 0x2]  <var_decl 0x7f043dfe6900 *.LC67>)) ge2fitman_sup.cpp:471 89 {*movdi_internal}
     (nil))
(call_insn 130 129 131 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:471 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 131 130 132 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC68") [flags 0x2]  <var_decl 0x7f043dfe6990 *.LC68>)) ge2fitman_sup.cpp:472 89 {*movdi_internal}
     (nil))
(call_insn 132 131 133 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:472 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 133 132 134 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC69") [flags 0x2]  <var_decl 0x7f043dfe6a20 *.LC69>)) ge2fitman_sup.cpp:473 89 {*movdi_internal}
     (nil))
(call_insn 134 133 135 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:473 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 135 134 136 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC70") [flags 0x2]  <var_decl 0x7f043dfe6ab0 *.LC70>)) ge2fitman_sup.cpp:474 89 {*movdi_internal}
     (nil))
(call_insn 136 135 137 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:474 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 137 136 138 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC71") [flags 0x2]  <var_decl 0x7f043dfe6b40 *.LC71>)) ge2fitman_sup.cpp:476 89 {*movdi_internal}
     (nil))
(call_insn 138 137 139 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:476 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 139 138 140 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC72") [flags 0x2]  <var_decl 0x7f043dfe6bd0 *.LC72>)) ge2fitman_sup.cpp:477 89 {*movdi_internal}
     (nil))
(call_insn 140 139 141 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:477 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 141 140 142 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC73") [flags 0x2]  <var_decl 0x7f043dfe6c60 *.LC73>)) ge2fitman_sup.cpp:478 89 {*movdi_internal}
     (nil))
(call_insn 142 141 143 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:478 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 143 142 144 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC74") [flags 0x2]  <var_decl 0x7f043dfe6cf0 *.LC74>)) ge2fitman_sup.cpp:479 89 {*movdi_internal}
     (nil))
(call_insn 144 143 145 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:479 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 145 144 146 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC75") [flags 0x2]  <var_decl 0x7f043dfe6d80 *.LC75>)) ge2fitman_sup.cpp:480 89 {*movdi_internal}
     (nil))
(call_insn 146 145 147 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:480 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 147 146 148 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC76") [flags 0x2]  <var_decl 0x7f043dfe6e10 *.LC76>)) ge2fitman_sup.cpp:481 89 {*movdi_internal}
     (nil))
(call_insn 148 147 149 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:481 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 149 148 150 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC77") [flags 0x2]  <var_decl 0x7f043dfe6ea0 *.LC77>)) ge2fitman_sup.cpp:482 89 {*movdi_internal}
     (nil))
(call_insn 150 149 151 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:482 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 151 150 152 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC78") [flags 0x2]  <var_decl 0x7f043dfe6f30 *.LC78>)) ge2fitman_sup.cpp:483 89 {*movdi_internal}
     (nil))
(call_insn 152 151 153 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:483 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 153 152 154 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC79") [flags 0x2]  <var_decl 0x7f043dfec000 *.LC79>)) ge2fitman_sup.cpp:484 89 {*movdi_internal}
     (nil))
(call_insn 154 153 155 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:484 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 155 154 156 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC80") [flags 0x2]  <var_decl 0x7f043dfec090 *.LC80>)) ge2fitman_sup.cpp:485 89 {*movdi_internal}
     (nil))
(call_insn 156 155 157 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:485 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 157 156 158 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC81") [flags 0x2]  <var_decl 0x7f043dfec120 *.LC81>)) ge2fitman_sup.cpp:486 89 {*movdi_internal}
     (nil))
(call_insn 158 157 159 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:486 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 159 158 160 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC82") [flags 0x2]  <var_decl 0x7f043dfec1b0 *.LC82>)) ge2fitman_sup.cpp:487 89 {*movdi_internal}
     (nil))
(call_insn 160 159 161 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:487 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 161 160 162 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC83") [flags 0x2]  <var_decl 0x7f043dfec240 *.LC83>)) ge2fitman_sup.cpp:488 89 {*movdi_internal}
     (nil))
(call_insn 162 161 163 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:488 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 163 162 164 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC84") [flags 0x2]  <var_decl 0x7f043dfec2d0 *.LC84>)) ge2fitman_sup.cpp:489 89 {*movdi_internal}
     (nil))
(call_insn 164 163 165 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:489 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 165 164 166 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC85") [flags 0x2]  <var_decl 0x7f043dfec360 *.LC85>)) ge2fitman_sup.cpp:490 89 {*movdi_internal}
     (nil))
(call_insn 166 165 167 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:490 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 167 166 168 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC86") [flags 0x2]  <var_decl 0x7f043dfec3f0 *.LC86>)) ge2fitman_sup.cpp:491 89 {*movdi_internal}
     (nil))
(call_insn 168 167 169 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:491 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 169 168 170 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC87") [flags 0x2]  <var_decl 0x7f043dfec480 *.LC87>)) ge2fitman_sup.cpp:492 89 {*movdi_internal}
     (nil))
(call_insn 170 169 171 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:492 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 171 170 172 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC88") [flags 0x2]  <var_decl 0x7f043dfec510 *.LC88>)) ge2fitman_sup.cpp:494 89 {*movdi_internal}
     (nil))
(call_insn 172 171 173 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:494 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 173 172 174 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC89") [flags 0x2]  <var_decl 0x7f043dfec5a0 *.LC89>)) ge2fitman_sup.cpp:495 89 {*movdi_internal}
     (nil))
(call_insn 174 173 183 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:495 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 183 174 181 6 83 "" [1 uses])
(note 181 183 182 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 182 181 177 6 (const_int 0 [0]) ge2fitman_sup.cpp:498 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 177 182 178 5 80 "" [0 uses])
(note 178 177 184 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 184 178 0 NOTE_INSN_DELETED)

;; Function void check_outfile(IOFiles*, bool, int) (_Z13check_outfileP7IOFilesbi, funcdef_no=1030, decl_uid=24480, cgraph_uid=235, symbol_order=236)

      Creating newreg=434
Removing SCRATCH in insn #7 (nop 2)
rescanning insn with uid = 7.
      Creating newreg=435
Removing SCRATCH in insn #838 (nop 3)
rescanning insn with uid = 838.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 4:  (0) m  (1) qn {*movqi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r434
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 11:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 13:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 16:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 17:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 20:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 21:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 22:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 23:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 25:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 26:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 27:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 28:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 29:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 60:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=436 from oldreg=96, assigning class GENERAL_REGS to r436
   60: {r436:SI=r436:SI-r95:SI;clobber flags:CC;}
      REG_DEAD r95:SI
      REG_DEAD r94:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  900: r436:SI=r94:SI
    Inserting insn reload after:
  901: r96:SI=r436:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 71:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 72:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 90:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=437 from oldreg=104, assigning class GENERAL_REGS to r437
   90: {r437:SI=r437:SI-r103:SI;clobber flags:CC;}
      REG_DEAD r103:SI
      REG_DEAD r102:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  902: r437:SI=r102:SI
    Inserting insn reload after:
  903: r104:SI=r437:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 101:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 102:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 108:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 121:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 124:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 136:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=438 from oldreg=131, assigning class GENERAL_REGS to r438
  136: {r438:SI=r438:SI-r130:SI;clobber flags:CC;}
      REG_DEAD r130:SI
      REG_DEAD r129:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  904: r438:SI=r129:SI
    Inserting insn reload after:
  905: r131:SI=r438:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 139:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 147:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 148:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 161:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 162:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=439 from oldreg=124, assigning class GENERAL_REGS to r439
  162: {r439:SI=r439:SI-r123:SI;clobber flags:CC;}
      REG_DEAD r123:SI
      REG_DEAD r122:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  906: r439:SI=r122:SI
    Inserting insn reload after:
  907: r124:SI=r439:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 165:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 173:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 174:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 184:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 191:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 192:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=440 from oldreg=114, assigning class GENERAL_REGS to r440
  192: {r440:SI=r440:SI-r113:SI;clobber flags:CC;}
      REG_DEAD r113:SI
      REG_DEAD r112:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  908: r440:SI=r112:SI
    Inserting insn reload after:
  909: r114:SI=r440:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 195:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 203:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 204:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 210:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 215:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 218:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 230:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=441 from oldreg=149, assigning class GENERAL_REGS to r441
  230: {r441:SI=r441:SI-r148:SI;clobber flags:CC;}
      REG_DEAD r148:SI
      REG_DEAD r147:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  910: r441:SI=r147:SI
    Inserting insn reload after:
  911: r149:SI=r441:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 233:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 241:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 242:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 255:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 256:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=442 from oldreg=142, assigning class GENERAL_REGS to r442
  256: {r442:SI=r442:SI-r141:SI;clobber flags:CC;}
      REG_DEAD r141:SI
      REG_DEAD r140:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  912: r442:SI=r140:SI
    Inserting insn reload after:
  913: r142:SI=r442:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 259:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 265:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 267:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 268:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 285:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 286:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=443 from oldreg=157, assigning class GENERAL_REGS to r443
  286: {r443:SI=r443:SI-r156:SI;clobber flags:CC;}
      REG_DEAD r156:SI
      REG_DEAD r155:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  914: r443:SI=r155:SI
    Inserting insn reload after:
  915: r157:SI=r443:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 287:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 289:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 297:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 298:  (0) rm  (1) 0  (2) re {*addsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 304:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 305:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 320:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 324:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 331:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 332:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=444 from oldreg=184, assigning class GENERAL_REGS to r444
  332: {r444:SI=r444:SI-r183:SI;clobber flags:CC;}
      REG_DEAD r183:SI
      REG_DEAD r182:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  916: r444:SI=r182:SI
    Inserting insn reload after:
  917: r184:SI=r444:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 333:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 335:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 336:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 343:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 344:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 350:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 352:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 357:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 358:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=445 from oldreg=177, assigning class GENERAL_REGS to r445
  358: {r445:SI=r445:SI-r176:SI;clobber flags:CC;}
      REG_DEAD r176:SI
      REG_DEAD r175:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  918: r445:SI=r175:SI
    Inserting insn reload after:
  919: r177:SI=r445:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 359:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 361:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 364:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 367:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 368:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 369:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 370:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 380:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 387:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 388:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=446 from oldreg=167, assigning class GENERAL_REGS to r446
  388: {r446:SI=r446:SI-r166:SI;clobber flags:CC;}
      REG_DEAD r166:SI
      REG_DEAD r165:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  920: r446:SI=r165:SI
    Inserting insn reload after:
  921: r167:SI=r446:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 389:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 391:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 399:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 400:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 406:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 411:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 414:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 418:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 425:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 426:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=447 from oldreg=202, assigning class GENERAL_REGS to r447
  426: {r447:SI=r447:SI-r201:SI;clobber flags:CC;}
      REG_DEAD r201:SI
      REG_DEAD r200:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  922: r447:SI=r200:SI
    Inserting insn reload after:
  923: r202:SI=r447:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 427:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 429:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 437:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 438:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 444:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 446:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 452:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=448 from oldreg=195, assigning class GENERAL_REGS to r448
  452: {r448:SI=r448:SI-r194:SI;clobber flags:CC;}
      REG_DEAD r194:SI
      REG_DEAD r193:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  924: r448:SI=r193:SI
    Inserting insn reload after:
  925: r195:SI=r448:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 455:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 462:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 463:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 464:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 474:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 481:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 482:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=449 from oldreg=210, assigning class GENERAL_REGS to r449
  482: {r449:SI=r449:SI-r209:SI;clobber flags:CC;}
      REG_DEAD r209:SI
      REG_DEAD r208:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  926: r449:SI=r208:SI
    Inserting insn reload after:
  927: r210:SI=r449:SI

            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 485:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =q  (1) q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 491:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 493:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 494:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 500:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 507:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 508:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 510:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 515:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 516:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 524:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 525:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 526:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 531
	 Choosing alt 0 in insn 531:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 532:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 537:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 538:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 546:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 548:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 552:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 553
	 Choosing alt 0 in insn 553:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 554:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 559:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 560:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 562:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 566:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 567
	 Choosing alt 0 in insn 567:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 568:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 575:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 576:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 583:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 584:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 585:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 586:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 590:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 591
	 Choosing alt 0 in insn 591:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 592:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 597:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 598:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 606:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 608:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 612:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 613
	 Choosing alt 0 in insn 613:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 614:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 619:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 620:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 621:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 625:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 626
	 Choosing alt 0 in insn 626:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 627:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 630:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 631:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 632:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 633:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 634:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 635:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 636:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 639:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 640:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 641:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 643:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 645:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 646:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 651:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 652:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 653:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 656:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 659:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 667:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 674:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 675:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 676:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (0) r {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 683:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 684:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 686:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 688:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 691:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 692:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 693:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 694:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 698:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 699
	 Choosing alt 0 in insn 699:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 700:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 705:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 706:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 708:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 710:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 713:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 714:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 715:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 716:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 720:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 721
	 Choosing alt 0 in insn 721:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 722:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 727:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 728:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 729:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 730:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 734:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 735
	 Choosing alt 0 in insn 735:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 736:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 743:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 744:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 746:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 748:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 751:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 752:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 753:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 754:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 758:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 759
	 Choosing alt 0 in insn 759:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 760:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 765:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 766:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 768:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 770:  (0) r {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 773:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 774:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 775:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 776:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 780:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 781
	 Choosing alt 0 in insn 781:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 782:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 787:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 788:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 789:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 793:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 794
	 Choosing alt 0 in insn 794:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 795:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 798:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 799:  (0) r  (1) i {*movdi_internal}
      Creating newreg=450, assigning class GENERAL_REGS to r450
  799: r450:DI=0x7461642e736e755f
    Inserting insn reload after:
  928: [r428:DI]=r450:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 928:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 800:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 801:  (0) rm  (1) re {*cmpsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 804:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            0 Spill pseudo into memory: reject+=3
            0 Non input pseudo reload: reject++
            alt=1,overall=10,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
            Staticly defined alt reject+=600
            alt=3: Bad operand -- refuse
	 Choosing alt 0 in insn 805:  (0) =q  (1) %0  (2) qmn {*xorqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 806:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 809:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 810:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 811:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 813:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 815:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 816:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 817:  (0) =qm {*setcc_qi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 818:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 821:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 822:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 823:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 826:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 829:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 832:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 834:  (1) rBwBz {*call_value}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 838:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r435
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 840:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13
EBB 14
EBB 15
EBB 16
EBB 17
EBB 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34
EBB 35
EBB 36
EBB 37
EBB 38
EBB 39
EBB 40
EBB 41
EBB 42
EBB 43
EBB 44
EBB 45
EBB 46
EBB 47
EBB 48
EBB 49
EBB 50
EBB 51
EBB 52
EBB 53
EBB 54
EBB 55
EBB 56
EBB 57
EBB 58
EBB 59
EBB 60
EBB 61
EBB 62
EBB 63
EBB 64
EBB 65
EBB 66
EBB 67
EBB 68
EBB 69
EBB 70
EBB 71
EBB 72
EBB 73
EBB 74
EBB 75
EBB 76
EBB 77
EBB 78
EBB 79
EBB 80
EBB 81
EBB 82
EBB 83
EBB 84
EBB 85
EBB 86
EBB 87
EBB 88
EBB 89
EBB 90
EBB 91
EBB 92
EBB 93
EBB 94
EBB 95
EBB 96
EBB 100
EBB 97
EBB 98
EBB 99

********** Pseudo live ranges #1: **********

  BB 98
   Insn 840: point = 0
  BB 99
  BB 97
   Insn 839: point = 0
   Insn 838: point = 0
  BB 100
   Insn 898: point = 1
  BB 96
   Insn 834: point = 1
   Insn 833: point = 1
   Insn 832: point = 2
  BB 95
   Insn 830: point = 3
   Insn 829: point = 3
  BB 94
   Insn 826: point = 3
   Insn 825: point = 3
   Insn 824: point = 4
   Insn 823: point = 5
   Insn 822: point = 6
   Insn 821: point = 8
  BB 93
   Insn 819: point = 9
   Insn 818: point = 9
   Insn 817: point = 10
   Insn 816: point = 11
   Insn 815: point = 11
   Insn 814: point = 12
   Insn 813: point = 13
   Insn 812: point = 13
   Insn 811: point = 14
   Insn 810: point = 14
   Insn 809: point = 16
  BB 92
   Insn 807: point = 17
   Insn 806: point = 17
   Insn 805: point = 18
   Insn 804: point = 20
  BB 91
   Insn 802: point = 21
   Insn 801: point = 21
   Insn 800: point = 21
   Insn 928: point = 22
   Insn 799: point = 23
   Insn 798: point = 24
  BB 89
   Insn 892: point = 25
   Insn 782: point = 25
   Insn 781: point = 26
   Insn 780: point = 28
   Insn 776: point = 29
   Insn 775: point = 31
   Insn 774: point = 33
   Insn 773: point = 35
  BB 82
   Insn 884: point = 36
   Insn 700: point = 36
   Insn 699: point = 37
   Insn 698: point = 39
   Insn 694: point = 40
   Insn 693: point = 42
   Insn 692: point = 44
   Insn 691: point = 46
  BB 90
   Insn 795: point = 47
   Insn 794: point = 48
   Insn 793: point = 50
   Insn 789: point = 51
   Insn 788: point = 53
   Insn 787: point = 55
  BB 88
   Insn 771: point = 56
   Insn 770: point = 56
   Insn 769: point = 57
   Insn 768: point = 58
   Insn 767: point = 58
   Insn 766: point = 59
   Insn 765: point = 59
  BB 87
   Insn 890: point = 60
   Insn 760: point = 60
   Insn 759: point = 61
   Insn 758: point = 63
   Insn 754: point = 64
   Insn 753: point = 66
   Insn 752: point = 68
   Insn 751: point = 70
  BB 86
   Insn 749: point = 71
   Insn 748: point = 71
   Insn 747: point = 72
   Insn 746: point = 73
   Insn 745: point = 73
   Insn 744: point = 74
   Insn 743: point = 74
  BB 85
   Insn 888: point = 75
   Insn 736: point = 75
   Insn 735: point = 76
   Insn 734: point = 78
   Insn 730: point = 79
   Insn 729: point = 81
   Insn 728: point = 83
   Insn 727: point = 85
  BB 84
   Insn 886: point = 86
   Insn 722: point = 86
   Insn 721: point = 87
   Insn 720: point = 89
   Insn 716: point = 90
   Insn 715: point = 92
   Insn 714: point = 94
   Insn 713: point = 96
  BB 83
   Insn 711: point = 97
   Insn 710: point = 97
   Insn 709: point = 98
   Insn 708: point = 99
   Insn 707: point = 99
   Insn 706: point = 100
   Insn 705: point = 100
  BB 81
   Insn 689: point = 101
   Insn 688: point = 101
   Insn 687: point = 102
   Insn 686: point = 103
   Insn 685: point = 103
   Insn 684: point = 104
   Insn 683: point = 104
  BB 80
   Insn 681: point = 105
   Insn 680: point = 105
   Insn 679: point = 106
   Insn 678: point = 107
   Insn 677: point = 107
   Insn 676: point = 108
   Insn 675: point = 108
   Insn 674: point = 109
  BB 79
   Insn 671: point = 109
   Insn 670: point = 109
  BB 78
   Insn 668: point = 109
   Insn 667: point = 109
  BB 77
   Insn 664: point = 109
   Insn 663: point = 109
   Insn 662: point = 110
  BB 76
   Insn 660: point = 111
   Insn 659: point = 111
  BB 75
   Insn 656: point = 111
   Insn 655: point = 111
   Insn 654: point = 112
   Insn 653: point = 113
   Insn 652: point = 114
   Insn 651: point = 116
  BB 74
   Insn 649: point = 117
   Insn 648: point = 117
   Insn 647: point = 118
   Insn 646: point = 119
   Insn 645: point = 119
   Insn 644: point = 120
   Insn 643: point = 121
   Insn 642: point = 121
   Insn 641: point = 122
   Insn 640: point = 122
   Insn 639: point = 124
  BB 73
   Insn 637: point = 125
   Insn 636: point = 125
   Insn 635: point = 126
   Insn 634: point = 128
   Insn 633: point = 129
   Insn 632: point = 130
   Insn 631: point = 130
   Insn 630: point = 130
  BB 71
   Insn 882: point = 131
   Insn 614: point = 131
   Insn 613: point = 132
   Insn 612: point = 134
   Insn 608: point = 135
   Insn 607: point = 137
   Insn 606: point = 139
   Insn 605: point = 141
  BB 64
   Insn 874: point = 142
   Insn 532: point = 142
   Insn 531: point = 143
   Insn 530: point = 145
   Insn 526: point = 146
   Insn 525: point = 148
   Insn 524: point = 150
   Insn 523: point = 152
  BB 72
   Insn 627: point = 153
   Insn 626: point = 154
   Insn 625: point = 156
   Insn 621: point = 157
   Insn 620: point = 159
   Insn 619: point = 161
  BB 70
   Insn 603: point = 162
   Insn 602: point = 162
   Insn 601: point = 163
   Insn 600: point = 164
   Insn 599: point = 164
   Insn 598: point = 165
   Insn 597: point = 165
  BB 69
   Insn 880: point = 166
   Insn 592: point = 166
   Insn 591: point = 167
   Insn 590: point = 169
   Insn 586: point = 170
   Insn 585: point = 172
   Insn 584: point = 174
   Insn 583: point = 176
  BB 68
   Insn 581: point = 177
   Insn 580: point = 177
   Insn 579: point = 178
   Insn 578: point = 179
   Insn 577: point = 179
   Insn 576: point = 180
   Insn 575: point = 180
  BB 67
   Insn 878: point = 181
   Insn 568: point = 181
   Insn 567: point = 182
   Insn 566: point = 184
   Insn 562: point = 185
   Insn 561: point = 187
   Insn 560: point = 189
   Insn 559: point = 191
  BB 66
   Insn 876: point = 192
   Insn 554: point = 192
   Insn 553: point = 193
   Insn 552: point = 195
   Insn 548: point = 196
   Insn 547: point = 198
   Insn 546: point = 200
   Insn 545: point = 202
  BB 65
   Insn 543: point = 203
   Insn 542: point = 203
   Insn 541: point = 204
   Insn 540: point = 205
   Insn 539: point = 205
   Insn 538: point = 206
   Insn 537: point = 206
  BB 63
   Insn 521: point = 207
   Insn 520: point = 207
   Insn 519: point = 208
   Insn 518: point = 209
   Insn 517: point = 209
   Insn 516: point = 210
   Insn 515: point = 210
  BB 62
   Insn 513: point = 211
   Insn 512: point = 211
   Insn 511: point = 212
   Insn 510: point = 213
   Insn 509: point = 213
   Insn 508: point = 214
   Insn 507: point = 214
  BB 61
   Insn 504: point = 215
   Insn 503: point = 215
  BB 60
   Insn 501: point = 215
   Insn 500: point = 215
  BB 51
   Insn 421: point = 215
   Insn 420: point = 215
  BB 52
   Insn 868: point = 215
   Insn 438: point = 215
   Insn 437: point = 215
   Insn 436: point = 216
   Insn 435: point = 218
   Insn 434: point = 219
   Insn 433: point = 221
   Insn 432: point = 222
   Insn 431: point = 222
   Insn 430: point = 223
   Insn 429: point = 225
   Insn 428: point = 227
   Insn 427: point = 229
   Insn 923: point = 230
	Hard reg 0 is preferable by r447 with profit 1
   Insn 426: point = 232
   Insn 922: point = 233
	Hard reg 0 is preferable by r447 with profit 1
	Hard reg 1 is preferable by r447 with profit 1
   Insn 425: point = 235
   Insn 424: point = 237
   Insn 423: point = 238
  BB 50
   Insn 418: point = 239
  BB 46
   Insn 383: point = 239
   Insn 382: point = 239
  BB 47
   Insn 866: point = 239
   Insn 400: point = 239
   Insn 399: point = 239
   Insn 398: point = 240
   Insn 397: point = 242
   Insn 396: point = 243
   Insn 395: point = 245
   Insn 394: point = 246
   Insn 393: point = 246
   Insn 392: point = 247
   Insn 391: point = 249
   Insn 390: point = 251
   Insn 389: point = 253
   Insn 921: point = 254
	Hard reg 0 is preferable by r446 with profit 1
   Insn 388: point = 256
   Insn 920: point = 257
	Hard reg 0 is preferable by r446 with profit 1
	Hard reg 1 is preferable by r446 with profit 1
   Insn 387: point = 259
   Insn 386: point = 261
   Insn 385: point = 262
  BB 45
   Insn 380: point = 263
  BB 39
   Insn 327: point = 263
   Insn 326: point = 263
  BB 40
   Insn 862: point = 263
   Insn 344: point = 263
   Insn 343: point = 263
   Insn 342: point = 264
   Insn 341: point = 266
   Insn 340: point = 267
   Insn 339: point = 269
   Insn 338: point = 270
   Insn 337: point = 270
   Insn 336: point = 271
   Insn 335: point = 273
   Insn 334: point = 275
   Insn 333: point = 277
   Insn 917: point = 278
	Hard reg 0 is preferable by r444 with profit 1
   Insn 332: point = 280
   Insn 916: point = 281
	Hard reg 0 is preferable by r444 with profit 1
	Hard reg 1 is preferable by r444 with profit 1
   Insn 331: point = 283
   Insn 330: point = 285
   Insn 329: point = 286
  BB 38
   Insn 324: point = 287
  BB 42
   Insn 353: point = 287
   Insn 352: point = 287
  BB 43
   Insn 864: point = 287
   Insn 370: point = 287
   Insn 369: point = 287
   Insn 368: point = 288
   Insn 367: point = 290
   Insn 366: point = 291
   Insn 365: point = 293
   Insn 364: point = 294
   Insn 363: point = 294
   Insn 362: point = 295
   Insn 361: point = 297
   Insn 360: point = 299
   Insn 359: point = 301
   Insn 919: point = 302
	Hard reg 0 is preferable by r445 with profit 1
   Insn 358: point = 304
   Insn 918: point = 305
	Hard reg 0 is preferable by r445 with profit 1
	Hard reg 1 is preferable by r445 with profit 1
   Insn 357: point = 307
   Insn 356: point = 309
   Insn 355: point = 310
  BB 41
   Insn 350: point = 311
  BB 37
   Insn 322: point = 311
   Insn 321: point = 311
   Insn 320: point = 312
   Insn 319: point = 314
   Insn 318: point = 316
   Insn 317: point = 317
   Insn 316: point = 319
  BB 58
   Insn 477: point = 320
   Insn 476: point = 320
  BB 59
   Insn 872: point = 320
   Insn 494: point = 320
   Insn 493: point = 320
   Insn 492: point = 321
   Insn 491: point = 323
   Insn 490: point = 324
   Insn 489: point = 326
   Insn 488: point = 327
   Insn 487: point = 327
   Insn 486: point = 328
   Insn 485: point = 330
   Insn 484: point = 332
   Insn 483: point = 334
   Insn 927: point = 335
	Hard reg 0 is preferable by r449 with profit 1
   Insn 482: point = 337
   Insn 926: point = 338
	Hard reg 0 is preferable by r449 with profit 1
	Hard reg 1 is preferable by r449 with profit 1
   Insn 481: point = 340
   Insn 480: point = 342
   Insn 479: point = 343
  BB 57
   Insn 474: point = 344
  BB 56
   Insn 472: point = 344
   Insn 471: point = 344
   Insn 470: point = 345
  BB 54
   Insn 447: point = 346
   Insn 446: point = 346
  BB 55
   Insn 870: point = 346
   Insn 464: point = 346
   Insn 463: point = 346
   Insn 462: point = 347
   Insn 461: point = 349
   Insn 460: point = 350
   Insn 459: point = 352
   Insn 458: point = 353
   Insn 457: point = 353
   Insn 456: point = 354
   Insn 455: point = 356
   Insn 454: point = 358
   Insn 453: point = 360
   Insn 925: point = 361
	Hard reg 0 is preferable by r448 with profit 1
   Insn 452: point = 363
   Insn 924: point = 364
	Hard reg 0 is preferable by r448 with profit 1
	Hard reg 1 is preferable by r448 with profit 1
   Insn 451: point = 366
   Insn 450: point = 368
   Insn 449: point = 369
  BB 53
   Insn 444: point = 370
  BB 49
   Insn 416: point = 370
   Insn 415: point = 370
   Insn 414: point = 371
   Insn 413: point = 373
   Insn 412: point = 375
   Insn 411: point = 376
   Insn 410: point = 378
  BB 48
   Insn 408: point = 379
   Insn 407: point = 379
   Insn 406: point = 380
  BB 44
   Insn 378: point = 381
   Insn 377: point = 381
   Insn 376: point = 382
  BB 36
   Insn 314: point = 383
   Insn 313: point = 383
   Insn 312: point = 384
  BB 35
   Insn 310: point = 385
   Insn 309: point = 385
   Insn 308: point = 386
   Insn 307: point = 387
   Insn 306: point = 387
   Insn 305: point = 388
   Insn 304: point = 388
  BB 26
   Insn 225: point = 389
   Insn 224: point = 389
  BB 27
   Insn 856: point = 389
   Insn 242: point = 389
   Insn 241: point = 389
   Insn 240: point = 390
   Insn 239: point = 392
   Insn 238: point = 393
   Insn 237: point = 395
   Insn 236: point = 396
   Insn 235: point = 396
   Insn 234: point = 397
   Insn 233: point = 399
   Insn 232: point = 401
   Insn 231: point = 403
   Insn 911: point = 404
	Hard reg 0 is preferable by r441 with profit 1
   Insn 230: point = 406
   Insn 910: point = 407
	Hard reg 0 is preferable by r441 with profit 1
	Hard reg 1 is preferable by r441 with profit 1
   Insn 229: point = 409
   Insn 228: point = 411
   Insn 227: point = 412
  BB 25
   Insn 222: point = 413
  BB 21
   Insn 187: point = 413
   Insn 186: point = 413
  BB 22
   Insn 854: point = 413
   Insn 204: point = 413
   Insn 203: point = 413
   Insn 202: point = 414
   Insn 201: point = 416
   Insn 200: point = 417
   Insn 199: point = 419
   Insn 198: point = 420
   Insn 197: point = 420
   Insn 196: point = 421
   Insn 195: point = 423
   Insn 194: point = 425
   Insn 193: point = 427
   Insn 909: point = 428
	Hard reg 0 is preferable by r440 with profit 1
   Insn 192: point = 430
   Insn 908: point = 431
	Hard reg 0 is preferable by r440 with profit 1
	Hard reg 1 is preferable by r440 with profit 1
   Insn 191: point = 433
   Insn 190: point = 435
   Insn 189: point = 436
  BB 20
   Insn 184: point = 437
  BB 14
   Insn 131: point = 437
   Insn 130: point = 437
  BB 15
   Insn 850: point = 437
   Insn 148: point = 437
   Insn 147: point = 437
   Insn 146: point = 438
   Insn 145: point = 440
   Insn 144: point = 441
   Insn 143: point = 443
   Insn 142: point = 444
   Insn 141: point = 444
   Insn 140: point = 445
   Insn 139: point = 447
   Insn 138: point = 449
   Insn 137: point = 451
   Insn 905: point = 452
	Hard reg 0 is preferable by r438 with profit 1
   Insn 136: point = 454
   Insn 904: point = 455
	Hard reg 0 is preferable by r438 with profit 1
	Hard reg 1 is preferable by r438 with profit 1
   Insn 135: point = 457
   Insn 134: point = 459
   Insn 133: point = 460
  BB 13
   Insn 128: point = 461
  BB 17
   Insn 157: point = 461
   Insn 156: point = 461
  BB 18
   Insn 852: point = 461
   Insn 174: point = 461
   Insn 173: point = 461
   Insn 172: point = 462
   Insn 171: point = 464
   Insn 170: point = 465
   Insn 169: point = 467
   Insn 168: point = 468
   Insn 167: point = 468
   Insn 166: point = 469
   Insn 165: point = 471
   Insn 164: point = 473
   Insn 163: point = 475
   Insn 907: point = 476
	Hard reg 0 is preferable by r439 with profit 1
   Insn 162: point = 478
   Insn 906: point = 479
	Hard reg 0 is preferable by r439 with profit 1
	Hard reg 1 is preferable by r439 with profit 1
   Insn 161: point = 481
   Insn 160: point = 483
   Insn 159: point = 484
  BB 16
   Insn 154: point = 485
  BB 12
   Insn 126: point = 485
   Insn 125: point = 485
   Insn 124: point = 486
   Insn 123: point = 488
   Insn 122: point = 490
   Insn 121: point = 491
   Insn 120: point = 493
  BB 33
   Insn 281: point = 494
   Insn 280: point = 494
  BB 34
   Insn 860: point = 494
   Insn 298: point = 494
   Insn 297: point = 494
   Insn 296: point = 495
   Insn 295: point = 497
   Insn 294: point = 498
   Insn 293: point = 500
   Insn 292: point = 501
   Insn 291: point = 501
   Insn 290: point = 502
   Insn 289: point = 504
   Insn 288: point = 506
   Insn 287: point = 508
   Insn 915: point = 509
	Hard reg 0 is preferable by r443 with profit 1
   Insn 286: point = 511
   Insn 914: point = 512
	Hard reg 0 is preferable by r443 with profit 1
	Hard reg 1 is preferable by r443 with profit 1
   Insn 285: point = 514
   Insn 284: point = 516
   Insn 283: point = 517
  BB 32
   Insn 278: point = 518
  BB 31
   Insn 276: point = 518
   Insn 275: point = 518
   Insn 274: point = 519
  BB 29
   Insn 251: point = 520
   Insn 250: point = 520
  BB 30
   Insn 858: point = 520
   Insn 268: point = 520
   Insn 267: point = 520
   Insn 266: point = 521
   Insn 265: point = 523
   Insn 264: point = 524
   Insn 263: point = 526
   Insn 262: point = 527
   Insn 261: point = 527
   Insn 260: point = 528
   Insn 259: point = 530
   Insn 258: point = 532
   Insn 257: point = 534
   Insn 913: point = 535
	Hard reg 0 is preferable by r442 with profit 1
   Insn 256: point = 537
   Insn 912: point = 538
	Hard reg 0 is preferable by r442 with profit 1
	Hard reg 1 is preferable by r442 with profit 1
   Insn 255: point = 540
   Insn 254: point = 542
   Insn 253: point = 543
  BB 28
   Insn 248: point = 544
  BB 24
   Insn 220: point = 544
   Insn 219: point = 544
   Insn 218: point = 545
   Insn 217: point = 547
   Insn 216: point = 549
   Insn 215: point = 550
   Insn 214: point = 552
  BB 23
   Insn 212: point = 553
   Insn 211: point = 553
   Insn 210: point = 554
  BB 19
   Insn 182: point = 555
   Insn 181: point = 555
   Insn 180: point = 556
  BB 11
   Insn 118: point = 557
   Insn 117: point = 557
   Insn 116: point = 558
  BB 10
   Insn 114: point = 559
   Insn 113: point = 559
   Insn 112: point = 560
   Insn 111: point = 561
   Insn 110: point = 561
   Insn 109: point = 562
   Insn 108: point = 562
  BB 8
   Insn 85: point = 563
   Insn 84: point = 563
  BB 9
   Insn 848: point = 563
   Insn 102: point = 563
   Insn 101: point = 563
   Insn 100: point = 564
   Insn 99: point = 566
   Insn 98: point = 567
   Insn 97: point = 569
   Insn 96: point = 570
   Insn 95: point = 570
   Insn 94: point = 571
   Insn 93: point = 573
   Insn 92: point = 575
   Insn 91: point = 577
   Insn 903: point = 578
	Hard reg 0 is preferable by r437 with profit 1
   Insn 90: point = 580
   Insn 902: point = 581
	Hard reg 0 is preferable by r437 with profit 1
	Hard reg 1 is preferable by r437 with profit 1
   Insn 89: point = 583
   Insn 88: point = 585
   Insn 87: point = 586
  BB 7
   Insn 82: point = 587
  BB 6
   Insn 80: point = 587
   Insn 79: point = 587
   Insn 78: point = 588
  BB 4
   Insn 55: point = 589
   Insn 54: point = 589
  BB 5
   Insn 846: point = 589
   Insn 72: point = 589
   Insn 71: point = 589
   Insn 70: point = 590
   Insn 69: point = 592
   Insn 68: point = 593
   Insn 67: point = 595
   Insn 66: point = 596
   Insn 65: point = 596
   Insn 64: point = 597
   Insn 63: point = 599
   Insn 62: point = 601
   Insn 61: point = 603
   Insn 901: point = 604
	Hard reg 0 is preferable by r436 with profit 1
   Insn 60: point = 606
   Insn 900: point = 607
	Hard reg 0 is preferable by r436 with profit 1
	Hard reg 1 is preferable by r436 with profit 1
   Insn 59: point = 609
   Insn 58: point = 611
   Insn 57: point = 612
  BB 3
   Insn 52: point = 613
  BB 2
   Insn 50: point = 613
   Insn 49: point = 613
   Insn 48: point = 614
   Insn 47: point = 615
   Insn 46: point = 616
   Insn 45: point = 618
   Insn 44: point = 619
   Insn 43: point = 619
   Insn 42: point = 620
   Insn 41: point = 622
   Insn 40: point = 623
   Insn 39: point = 624
   Insn 38: point = 626
   Insn 37: point = 627
   Insn 36: point = 627
   Insn 35: point = 628
   Insn 34: point = 630
   Insn 33: point = 631
   Insn 32: point = 631
   Insn 31: point = 631
   Insn 30: point = 631
   Insn 29: point = 631
   Insn 28: point = 631
   Insn 27: point = 631
   Insn 26: point = 631
   Insn 25: point = 631
   Insn 24: point = 631
   Insn 23: point = 631
   Insn 22: point = 631
   Insn 21: point = 631
   Insn 20: point = 631
   Insn 19: point = 631
   Insn 18: point = 631
   Insn 17: point = 631
   Insn 16: point = 631
   Insn 15: point = 631
   Insn 14: point = 631
   Insn 13: point = 631
   Insn 12: point = 631
   Insn 11: point = 631
   Insn 10: point = 631
   Insn 7: point = 631
   Insn 4: point = 633
   Insn 5: point = 634
   Insn 3: point = 634
   Insn 2: point = 635
 r87: [627..628]
 r88: [625..626]
 r89: [623..624]
 r90: [619..620]
 r91: [617..618]
 r92: [615..616]
 r93: [613..614]
 r94: [608..612]
 r95: [606..609]
 r96: [602..604]
 r97: [598..599]
 r98: [596..597]
 r99: [594..595]
 r100: [589..593]
 r101: [587..588]
 r102: [582..586]
 r103: [580..583]
 r104: [576..578]
 r105: [572..573]
 r106: [570..571]
 r107: [568..569]
 r108: [563..567]
 r109: [559..560]
 r110: [557..558]
 r111: [555..556]
 r112: [432..436]
 r113: [430..433]
 r114: [426..428]
 r115: [422..423]
 r116: [420..421]
 r117: [418..419]
 r118: [413..417]
 r119: [492..493]
 r120: [489..491]
 r121: [485..486]
 r122: [480..484]
 r123: [478..481]
 r124: [474..476]
 r125: [470..471]
 r126: [468..469]
 r127: [466..467]
 r128: [461..465]
 r129: [456..460]
 r130: [454..457]
 r131: [450..452]
 r132: [446..447]
 r133: [444..445]
 r134: [442..443]
 r135: [437..441]
 r136: [553..554]
 r137: [551..552]
 r138: [548..550]
 r139: [544..545]
 r140: [539..543]
 r141: [537..540]
 r142: [533..535]
 r143: [529..530]
 r144: [527..528]
 r145: [525..526]
 r146: [520..524]
 r147: [408..412]
 r148: [406..409]
 r149: [402..404]
 r150: [398..399]
 r151: [396..397]
 r152: [394..395]
 r153: [389..393]
 r154: [518..519]
 r155: [513..517]
 r156: [511..514]
 r157: [507..509]
 r158: [503..504]
 r159: [501..502]
 r160: [499..500]
 r161: [494..498]
 r162: [385..386]
 r163: [383..384]
 r164: [381..382]
 r165: [258..262]
 r166: [256..259]
 r167: [252..254]
 r168: [248..249]
 r169: [246..247]
 r170: [244..245]
 r171: [239..243]
 r172: [318..319]
 r173: [315..317]
 r174: [311..312]
 r175: [306..310]
 r176: [304..307]
 r177: [300..302]
 r178: [296..297]
 r179: [294..295]
 r180: [292..293]
 r181: [287..291]
 r182: [282..286]
 r183: [280..283]
 r184: [276..278]
 r185: [272..273]
 r186: [270..271]
 r187: [268..269]
 r188: [263..267]
 r189: [379..380]
 r190: [377..378]
 r191: [374..376]
 r192: [370..371]
 r193: [365..369]
 r194: [363..366]
 r195: [359..361]
 r196: [355..356]
 r197: [353..354]
 r198: [351..352]
 r199: [346..350]
 r200: [234..238]
 r201: [232..235]
 r202: [228..230]
 r203: [224..225]
 r204: [222..223]
 r205: [220..221]
 r206: [215..219]
 r207: [344..345]
 r208: [339..343]
 r209: [337..340]
 r210: [333..335]
 r211: [329..330]
 r212: [327..328]
 r213: [325..326]
 r214: [320..324]
 r215: [211..212]
 r216: [207..208]
 r217: [151..152]
 r218: [149..150]
 r219: [203..204]
 r220: [201..202]
 r221: [199..200]
 r222: [190..191]
 r223: [188..189]
 r224: [177..178]
 r225: [175..176]
 r226: [173..174]
 r227: [162..163]
 r228: [140..141]
 r229: [138..139]
 r230: [160..161]
 r231: [125..126]
 r232: [121..122]
 r233: [119..120]
 r234: [117..118]
 r235: [111..114]
 r236: [105..106]
 r237: [101..102]
 r238: [45..46]
 r239: [43..44]
 r240: [97..98]
 r241: [95..96]
 r242: [93..94]
 r243: [84..85]
 r244: [82..83]
 r245: [71..72]
 r246: [69..70]
 r247: [67..68]
 r248: [56..57]
 r249: [34..35]
 r250: [32..33]
 r251: [54..55]
 r252: [17..18]
 r253: [13..14]
 r254: [11..12]
 r255: [9..10]
 r256: [3..6]
 r257: [633..634]
 r258: [629..630]
 r259: [621..622]
 r260: [610..611]
 r261: [600..603]
 r262: [600..601]
 r263: [589..590]
 r264: [591..592]
 r265: [584..585]
 r266: [574..577]
 r267: [574..575]
 r268: [563..564]
 r269: [565..566]
 r270: [561..562]
 r271: [487..490]
 r272: [487..488]
 r273: [458..459]
 r274: [448..451]
 r275: [448..449]
 r276: [437..438]
 r277: [439..440]
 r278: [482..483]
 r279: [472..475]
 r280: [472..473]
 r281: [461..462]
 r282: [463..464]
 r283: [434..435]
 r284: [424..427]
 r285: [424..425]
 r286: [413..414]
 r287: [415..416]
 r288: [546..549]
 r289: [546..547]
 r290: [410..411]
 r291: [400..403]
 r292: [400..401]
 r293: [389..390]
 r294: [391..392]
 r295: [541..542]
 r296: [531..534]
 r297: [531..532]
 r298: [520..521]
 r299: [522..523]
 r300: [515..516]
 r301: [505..508]
 r302: [505..506]
 r303: [494..495]
 r304: [496..497]
 r305: [387..388]
 r306: [313..316]
 r307: [313..314]
 r308: [284..285]
 r309: [274..277]
 r310: [274..275]
 r311: [263..264]
 r312: [265..266]
 r313: [308..309]
 r314: [298..301]
 r315: [298..299]
 r316: [287..288]
 r317: [289..290]
 r318: [260..261]
 r319: [250..253]
 r320: [250..251]
 r321: [239..240]
 r322: [241..242]
 r323: [372..375]
 r324: [372..373]
 r325: [236..237]
 r326: [226..229]
 r327: [226..227]
 r328: [215..216]
 r329: [217..218]
 r330: [367..368]
 r331: [357..360]
 r332: [357..358]
 r333: [346..347]
 r334: [348..349]
 r335: [341..342]
 r336: [331..334]
 r337: [331..332]
 r338: [320..321]
 r339: [322..323]
 r340: [213..214]
 r341: [209..210]
 r342: [147..148]
 r343: [144..146]
 r346: [142..143]
 r347: [144..145]
 r348: [205..206]
 r349: [197..198]
 r350: [194..196]
 r353: [192..193]
 r354: [194..195]
 r355: [186..187]
 r356: [183..185]
 r359: [181..182]
 r360: [183..184]
 r361: [179..180]
 r362: [171..172]
 r363: [168..170]
 r366: [166..167]
 r367: [168..169]
 r368: [164..165]
 r369: [136..137]
 r370: [133..135]
 r373: [131..132]
 r374: [133..134]
 r375: [158..159]
 r376: [155..157]
 r379: [153..154]
 r380: [155..156]
 r381: [129..130]
 r382: [127..128]
 r383: [123..124]
 r384: [115..116]
 r385: [112..113]
 r386: [109..110]
 r387: [107..108]
 r388: [103..104]
 r389: [41..42]
 r390: [38..40]
 r393: [36..37]
 r394: [38..39]
 r395: [99..100]
 r396: [91..92]
 r397: [88..90]
 r400: [86..87]
 r401: [88..89]
 r402: [80..81]
 r403: [77..79]
 r406: [75..76]
 r407: [77..78]
 r408: [73..74]
 r409: [65..66]
 r410: [62..64]
 r413: [60..61]
 r414: [62..63]
 r415: [58..59]
 r416: [30..31]
 r417: [27..29]
 r420: [25..26]
 r421: [27..28]
 r422: [52..53]
 r423: [49..51]
 r426: [47..48]
 r427: [49..50]
 r428: [21..24]
 r429: [19..20]
 r430: [15..16]
 r431: [7..8]
 r432: [4..5]
 r433: [1..2]
 r434: [631..632]
 r435: [0..0]
 r436: [605..607]
 r437: [579..581]
 r438: [453..455]
 r439: [477..479]
 r440: [429..431]
 r441: [405..407]
 r442: [536..538]
 r443: [510..512]
 r444: [279..281]
 r445: [303..305]
 r446: [255..257]
 r447: [231..233]
 r448: [362..364]
 r449: [336..338]
 r450: [22..23]
Compressing live ranges: from 635 to 557 - 87%
Ranges after the compression:
 r87: [549..550]
 r88: [547..548]
 r89: [545..546]
 r90: [541..542]
 r91: [539..540]
 r92: [537..538]
 r93: [535..536]
 r94: [531..534]
 r95: [529..532]
 r96: [527..528]
 r97: [523..524]
 r98: [521..522]
 r99: [519..520]
 r100: [515..518]
 r101: [513..514]
 r102: [509..512]
 r103: [507..510]
 r104: [505..506]
 r105: [501..502]
 r106: [499..500]
 r107: [497..498]
 r108: [493..496]
 r109: [489..490]
 r110: [487..488]
 r111: [485..486]
 r112: [381..384]
 r113: [379..382]
 r114: [377..378]
 r115: [373..374]
 r116: [371..372]
 r117: [369..370]
 r118: [365..368]
 r119: [431..432]
 r120: [429..430]
 r121: [425..426]
 r122: [421..424]
 r123: [419..422]
 r124: [417..418]
 r125: [413..414]
 r126: [411..412]
 r127: [409..410]
 r128: [405..408]
 r129: [401..404]
 r130: [399..402]
 r131: [397..398]
 r132: [393..394]
 r133: [391..392]
 r134: [389..390]
 r135: [385..388]
 r136: [483..484]
 r137: [481..482]
 r138: [479..480]
 r139: [475..476]
 r140: [471..474]
 r141: [469..472]
 r142: [467..468]
 r143: [463..464]
 r144: [461..462]
 r145: [459..460]
 r146: [455..458]
 r147: [361..364]
 r148: [359..362]
 r149: [357..358]
 r150: [353..354]
 r151: [351..352]
 r152: [349..350]
 r153: [345..348]
 r154: [453..454]
 r155: [449..452]
 r156: [447..450]
 r157: [445..446]
 r158: [441..442]
 r159: [439..440]
 r160: [437..438]
 r161: [433..436]
 r162: [341..342]
 r163: [339..340]
 r164: [337..338]
 r165: [233..236]
 r166: [231..234]
 r167: [229..230]
 r168: [225..226]
 r169: [223..224]
 r170: [221..222]
 r171: [217..220]
 r172: [283..284]
 r173: [281..282]
 r174: [277..278]
 r175: [273..276]
 r176: [271..274]
 r177: [269..270]
 r178: [265..266]
 r179: [263..264]
 r180: [261..262]
 r181: [257..260]
 r182: [253..256]
 r183: [251..254]
 r184: [249..250]
 r185: [245..246]
 r186: [243..244]
 r187: [241..242]
 r188: [237..240]
 r189: [335..336]
 r190: [333..334]
 r191: [331..332]
 r192: [327..328]
 r193: [323..326]
 r194: [321..324]
 r195: [319..320]
 r196: [315..316]
 r197: [313..314]
 r198: [311..312]
 r199: [307..310]
 r200: [213..216]
 r201: [211..214]
 r202: [209..210]
 r203: [205..206]
 r204: [203..204]
 r205: [201..202]
 r206: [197..200]
 r207: [305..306]
 r208: [301..304]
 r209: [299..302]
 r210: [297..298]
 r211: [293..294]
 r212: [291..292]
 r213: [289..290]
 r214: [285..288]
 r215: [193..194]
 r216: [189..190]
 r217: [137..138]
 r218: [135..136]
 r219: [185..186]
 r220: [183..184]
 r221: [181..182]
 r222: [173..174]
 r223: [171..172]
 r224: [161..162]
 r225: [159..160]
 r226: [157..158]
 r227: [147..148]
 r228: [127..128]
 r229: [125..126]
 r230: [145..146]
 r231: [113..114]
 r232: [109..110]
 r233: [107..108]
 r234: [105..106]
 r235: [101..102]
 r236: [95..96]
 r237: [91..92]
 r238: [39..40]
 r239: [37..38]
 r240: [87..88]
 r241: [85..86]
 r242: [83..84]
 r243: [75..76]
 r244: [73..74]
 r245: [63..64]
 r246: [61..62]
 r247: [59..60]
 r248: [49..50]
 r249: [29..30]
 r250: [27..28]
 r251: [47..48]
 r252: [15..16]
 r253: [11..12]
 r254: [9..10]
 r255: [7..8]
 r256: [3..4]
 r257: [555..556]
 r258: [551..552]
 r259: [543..544]
 r260: [533..534]
 r261: [525..528]
 r262: [525..526]
 r263: [515..516]
 r264: [517..518]
 r265: [511..512]
 r266: [503..506]
 r267: [503..504]
 r268: [493..494]
 r269: [495..496]
 r270: [491..492]
 r271: [427..430]
 r272: [427..428]
 r273: [403..404]
 r274: [395..398]
 r275: [395..396]
 r276: [385..386]
 r277: [387..388]
 r278: [423..424]
 r279: [415..418]
 r280: [415..416]
 r281: [405..406]
 r282: [407..408]
 r283: [383..384]
 r284: [375..378]
 r285: [375..376]
 r286: [365..366]
 r287: [367..368]
 r288: [477..480]
 r289: [477..478]
 r290: [363..364]
 r291: [355..358]
 r292: [355..356]
 r293: [345..346]
 r294: [347..348]
 r295: [473..474]
 r296: [465..468]
 r297: [465..466]
 r298: [455..456]
 r299: [457..458]
 r300: [451..452]
 r301: [443..446]
 r302: [443..444]
 r303: [433..434]
 r304: [435..436]
 r305: [343..344]
 r306: [279..282]
 r307: [279..280]
 r308: [255..256]
 r309: [247..250]
 r310: [247..248]
 r311: [237..238]
 r312: [239..240]
 r313: [275..276]
 r314: [267..270]
 r315: [267..268]
 r316: [257..258]
 r317: [259..260]
 r318: [235..236]
 r319: [227..230]
 r320: [227..228]
 r321: [217..218]
 r322: [219..220]
 r323: [329..332]
 r324: [329..330]
 r325: [215..216]
 r326: [207..210]
 r327: [207..208]
 r328: [197..198]
 r329: [199..200]
 r330: [325..326]
 r331: [317..320]
 r332: [317..318]
 r333: [307..308]
 r334: [309..310]
 r335: [303..304]
 r336: [295..298]
 r337: [295..296]
 r338: [285..286]
 r339: [287..288]
 r340: [195..196]
 r341: [191..192]
 r342: [133..134]
 r343: [131..132]
 r346: [129..130]
 r347: [131..132]
 r348: [187..188]
 r349: [179..180]
 r350: [177..178]
 r353: [175..176]
 r354: [177..178]
 r355: [169..170]
 r356: [167..168]
 r359: [165..166]
 r360: [167..168]
 r361: [163..164]
 r362: [155..156]
 r363: [153..154]
 r366: [151..152]
 r367: [153..154]
 r368: [149..150]
 r369: [123..124]
 r370: [121..122]
 r373: [119..120]
 r374: [121..122]
 r375: [143..144]
 r376: [141..142]
 r379: [139..140]
 r380: [141..142]
 r381: [117..118]
 r382: [115..116]
 r383: [111..112]
 r384: [103..104]
 r385: [101..102]
 r386: [99..100]
 r387: [97..98]
 r388: [93..94]
 r389: [35..36]
 r390: [33..34]
 r393: [31..32]
 r394: [33..34]
 r395: [89..90]
 r396: [81..82]
 r397: [79..80]
 r400: [77..78]
 r401: [79..80]
 r402: [71..72]
 r403: [69..70]
 r406: [67..68]
 r407: [69..70]
 r408: [65..66]
 r409: [57..58]
 r410: [55..56]
 r413: [53..54]
 r414: [55..56]
 r415: [51..52]
 r416: [25..26]
 r417: [23..24]
 r420: [21..22]
 r421: [23..24]
 r422: [45..46]
 r423: [43..44]
 r426: [41..42]
 r427: [43..44]
 r428: [19..20]
 r429: [17..18]
 r430: [13..14]
 r431: [5..6]
 r432: [3..4]
 r433: [1..2]
 r434: [553..554]
 r435: [0..0]
 r436: [529..530]
 r437: [507..508]
 r438: [399..400]
 r439: [419..420]
 r440: [379..380]
 r441: [359..360]
 r442: [469..470]
 r443: [447..448]
 r444: [251..252]
 r445: [271..272]
 r446: [231..232]
 r447: [211..212]
 r448: [321..322]
 r449: [299..300]
 r450: [19..20]

********** Assignment #1: **********

	 Assigning to 436 (cl=GENERAL_REGS, orig=96, freq=3, tfirst=436, tfreq=3)...
	   Assign 1 to reload r436 (freq=3)
	 Assigning to 437 (cl=GENERAL_REGS, orig=104, freq=3, tfirst=437, tfreq=3)...
	   Assign 1 to reload r437 (freq=3)
	 Assigning to 438 (cl=GENERAL_REGS, orig=131, freq=3, tfirst=438, tfreq=3)...
	   Assign 1 to reload r438 (freq=3)
	 Assigning to 439 (cl=GENERAL_REGS, orig=124, freq=3, tfirst=439, tfreq=3)...
	   Assign 1 to reload r439 (freq=3)
	 Assigning to 440 (cl=GENERAL_REGS, orig=114, freq=3, tfirst=440, tfreq=3)...
	   Assign 1 to reload r440 (freq=3)
	 Assigning to 441 (cl=GENERAL_REGS, orig=149, freq=3, tfirst=441, tfreq=3)...
	   Assign 1 to reload r441 (freq=3)
	 Assigning to 442 (cl=GENERAL_REGS, orig=142, freq=3, tfirst=442, tfreq=3)...
	   Assign 1 to reload r442 (freq=3)
	 Assigning to 443 (cl=GENERAL_REGS, orig=157, freq=3, tfirst=443, tfreq=3)...
	   Assign 1 to reload r443 (freq=3)
	 Assigning to 444 (cl=GENERAL_REGS, orig=184, freq=3, tfirst=444, tfreq=3)...
	   Assign 1 to reload r444 (freq=3)
	 Assigning to 445 (cl=GENERAL_REGS, orig=177, freq=3, tfirst=445, tfreq=3)...
	   Assign 1 to reload r445 (freq=3)
	 Assigning to 446 (cl=GENERAL_REGS, orig=167, freq=3, tfirst=446, tfreq=3)...
	   Assign 1 to reload r446 (freq=3)
	 Assigning to 447 (cl=GENERAL_REGS, orig=202, freq=3, tfirst=447, tfreq=3)...
	   Assign 1 to reload r447 (freq=3)
	 Assigning to 448 (cl=GENERAL_REGS, orig=195, freq=3, tfirst=448, tfreq=3)...
	   Assign 1 to reload r448 (freq=3)
	 Assigning to 449 (cl=GENERAL_REGS, orig=210, freq=3, tfirst=449, tfreq=3)...
	   Assign 1 to reload r449 (freq=3)
	 Assigning to 450 (cl=GENERAL_REGS, orig=450, freq=2, tfirst=450, tfreq=2)...
	   Assign 2 to reload r450 (freq=2)
	 Assigning to 434 (cl=INDEX_REGS, orig=434, freq=1, tfirst=434, tfreq=1)...
	   Assign 0 to reload r434 (freq=1)
	 Assigning to 435 (cl=INDEX_REGS, orig=435, freq=1, tfirst=435, tfreq=1)...
	   Assign 0 to reload r435 (freq=1)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=128, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 78
changing reg in insn 79
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 101
changing reg in insn 112
changing reg in insn 113
changing reg in insn 116
changing reg in insn 117
changing reg in insn 180
changing reg in insn 181
changing reg in insn 189
changing reg in insn 191
changing reg in insn 192
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 199
changing reg in insn 200
changing reg in insn 203
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 159
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 167
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 210
changing reg in insn 211
changing reg in insn 214
changing reg in insn 215
changing reg in insn 215
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 253
changing reg in insn 255
changing reg in insn 256
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 260
changing reg in insn 261
changing reg in insn 263
changing reg in insn 264
changing reg in insn 267
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 235
changing reg in insn 237
changing reg in insn 238
changing reg in insn 241
changing reg in insn 274
changing reg in insn 275
changing reg in insn 283
changing reg in insn 285
changing reg in insn 286
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 290
changing reg in insn 291
changing reg in insn 293
changing reg in insn 294
changing reg in insn 297
changing reg in insn 308
changing reg in insn 309
changing reg in insn 312
changing reg in insn 313
changing reg in insn 376
changing reg in insn 377
changing reg in insn 385
changing reg in insn 387
changing reg in insn 388
changing reg in insn 390
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 395
changing reg in insn 396
changing reg in insn 399
changing reg in insn 316
changing reg in insn 317
changing reg in insn 317
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 355
changing reg in insn 357
changing reg in insn 358
changing reg in insn 360
changing reg in insn 361
changing reg in insn 362
changing reg in insn 362
changing reg in insn 363
changing reg in insn 365
changing reg in insn 366
changing reg in insn 369
changing reg in insn 329
changing reg in insn 331
changing reg in insn 332
changing reg in insn 334
changing reg in insn 335
changing reg in insn 336
changing reg in insn 336
changing reg in insn 337
changing reg in insn 339
changing reg in insn 340
changing reg in insn 343
changing reg in insn 406
changing reg in insn 407
changing reg in insn 410
changing reg in insn 411
changing reg in insn 411
changing reg in insn 413
changing reg in insn 414
changing reg in insn 415
changing reg in insn 449
changing reg in insn 451
changing reg in insn 452
changing reg in insn 454
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 457
changing reg in insn 459
changing reg in insn 460
changing reg in insn 463
changing reg in insn 423
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 431
changing reg in insn 433
changing reg in insn 434
changing reg in insn 437
changing reg in insn 470
changing reg in insn 471
changing reg in insn 479
changing reg in insn 481
changing reg in insn 482
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 486
changing reg in insn 487
changing reg in insn 489
changing reg in insn 490
changing reg in insn 493
changing reg in insn 511
changing reg in insn 512
changing reg in insn 519
changing reg in insn 520
changing reg in insn 523
changing reg in insn 524
changing reg in insn 524
changing reg in insn 525
changing reg in insn 541
changing reg in insn 542
changing reg in insn 545
changing reg in insn 546
changing reg in insn 546
changing reg in insn 547
changing reg in insn 559
changing reg in insn 560
changing reg in insn 560
changing reg in insn 561
changing reg in insn 579
changing reg in insn 580
changing reg in insn 583
changing reg in insn 584
changing reg in insn 584
changing reg in insn 585
changing reg in insn 601
changing reg in insn 602
changing reg in insn 605
changing reg in insn 606
changing reg in insn 606
changing reg in insn 607
changing reg in insn 619
changing reg in insn 620
changing reg in insn 635
changing reg in insn 636
changing reg in insn 640
changing reg in insn 642
changing reg in insn 644
changing reg in insn 645
changing reg in insn 647
changing reg in insn 648
changing reg in insn 652
changing reg in insn 655
changing reg in insn 679
changing reg in insn 680
changing reg in insn 687
changing reg in insn 688
changing reg in insn 691
changing reg in insn 692
changing reg in insn 692
changing reg in insn 693
changing reg in insn 709
changing reg in insn 710
changing reg in insn 713
changing reg in insn 714
changing reg in insn 714
changing reg in insn 715
changing reg in insn 727
changing reg in insn 728
changing reg in insn 728
changing reg in insn 729
changing reg in insn 747
changing reg in insn 748
changing reg in insn 751
changing reg in insn 752
changing reg in insn 752
changing reg in insn 753
changing reg in insn 769
changing reg in insn 770
changing reg in insn 773
changing reg in insn 774
changing reg in insn 774
changing reg in insn 775
changing reg in insn 787
changing reg in insn 788
changing reg in insn 805
changing reg in insn 806
changing reg in insn 810
changing reg in insn 812
changing reg in insn 814
changing reg in insn 815
changing reg in insn 817
changing reg in insn 818
changing reg in insn 822
changing reg in insn 825
changing reg in insn 3
changing reg in insn 34
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 63
changing reg in insn 62
changing reg in insn 63
changing reg in insn 70
changing reg in insn 71
changing reg in insn 69
changing reg in insn 70
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 108
changing reg in insn 110
changing reg in insn 122
changing reg in insn 124
changing reg in insn 123
changing reg in insn 124
changing reg in insn 134
changing reg in insn 135
changing reg in insn 137
changing reg in insn 139
changing reg in insn 138
changing reg in insn 139
changing reg in insn 146
changing reg in insn 147
changing reg in insn 145
changing reg in insn 146
changing reg in insn 160
changing reg in insn 161
changing reg in insn 163
changing reg in insn 165
changing reg in insn 164
changing reg in insn 165
changing reg in insn 172
changing reg in insn 173
changing reg in insn 171
changing reg in insn 172
changing reg in insn 190
changing reg in insn 191
changing reg in insn 193
changing reg in insn 195
changing reg in insn 194
changing reg in insn 195
changing reg in insn 202
changing reg in insn 203
changing reg in insn 201
changing reg in insn 202
changing reg in insn 216
changing reg in insn 218
changing reg in insn 217
changing reg in insn 218
changing reg in insn 228
changing reg in insn 229
changing reg in insn 231
changing reg in insn 233
changing reg in insn 232
changing reg in insn 233
changing reg in insn 240
changing reg in insn 241
changing reg in insn 239
changing reg in insn 240
changing reg in insn 254
changing reg in insn 255
changing reg in insn 257
changing reg in insn 259
changing reg in insn 258
changing reg in insn 259
changing reg in insn 266
changing reg in insn 267
changing reg in insn 265
changing reg in insn 266
changing reg in insn 284
changing reg in insn 285
changing reg in insn 287
changing reg in insn 289
changing reg in insn 288
changing reg in insn 289
changing reg in insn 296
changing reg in insn 297
changing reg in insn 295
changing reg in insn 296
changing reg in insn 304
changing reg in insn 306
changing reg in insn 318
changing reg in insn 320
changing reg in insn 319
changing reg in insn 320
changing reg in insn 330
changing reg in insn 331
changing reg in insn 333
changing reg in insn 335
changing reg in insn 334
changing reg in insn 335
changing reg in insn 342
changing reg in insn 343
changing reg in insn 341
changing reg in insn 342
changing reg in insn 356
changing reg in insn 357
changing reg in insn 359
changing reg in insn 361
changing reg in insn 360
changing reg in insn 361
changing reg in insn 368
changing reg in insn 369
changing reg in insn 367
changing reg in insn 368
changing reg in insn 386
changing reg in insn 387
changing reg in insn 389
changing reg in insn 391
changing reg in insn 390
changing reg in insn 391
changing reg in insn 398
changing reg in insn 399
changing reg in insn 397
changing reg in insn 398
changing reg in insn 412
changing reg in insn 414
changing reg in insn 413
changing reg in insn 414
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 429
changing reg in insn 428
changing reg in insn 429
changing reg in insn 436
changing reg in insn 437
changing reg in insn 435
changing reg in insn 436
changing reg in insn 450
changing reg in insn 451
changing reg in insn 453
changing reg in insn 455
changing reg in insn 454
changing reg in insn 455
changing reg in insn 462
changing reg in insn 463
changing reg in insn 461
changing reg in insn 462
changing reg in insn 480
changing reg in insn 481
changing reg in insn 483
changing reg in insn 485
changing reg in insn 484
changing reg in insn 485
changing reg in insn 492
changing reg in insn 493
changing reg in insn 491
changing reg in insn 492
changing reg in insn 507
changing reg in insn 509
changing reg in insn 515
changing reg in insn 517
changing reg in insn 525
changing reg in insn 526
changing reg in insn 526
changing reg in insn 531
changing reg in insn 531
changing reg in insn 532
changing reg in insn 530
changing reg in insn 537
changing reg in insn 539
changing reg in insn 547
changing reg in insn 548
changing reg in insn 548
changing reg in insn 553
changing reg in insn 553
changing reg in insn 554
changing reg in insn 552
changing reg in insn 561
changing reg in insn 562
changing reg in insn 562
changing reg in insn 567
changing reg in insn 567
changing reg in insn 568
changing reg in insn 566
changing reg in insn 575
changing reg in insn 577
changing reg in insn 585
changing reg in insn 586
changing reg in insn 586
changing reg in insn 591
changing reg in insn 591
changing reg in insn 592
changing reg in insn 590
changing reg in insn 597
changing reg in insn 599
changing reg in insn 607
changing reg in insn 608
changing reg in insn 608
changing reg in insn 613
changing reg in insn 613
changing reg in insn 614
changing reg in insn 612
changing reg in insn 620
changing reg in insn 621
changing reg in insn 621
changing reg in insn 626
changing reg in insn 626
changing reg in insn 627
changing reg in insn 625
changing reg in insn 630
changing reg in insn 633
changing reg in insn 632
changing reg in insn 631
changing reg in insn 634
changing reg in insn 635
changing reg in insn 639
changing reg in insn 640
changing reg in insn 651
changing reg in insn 652
changing reg in insn 653
changing reg in insn 654
changing reg in insn 662
changing reg in insn 663
changing reg in insn 675
changing reg in insn 677
changing reg in insn 683
changing reg in insn 685
changing reg in insn 693
changing reg in insn 694
changing reg in insn 694
changing reg in insn 699
changing reg in insn 699
changing reg in insn 700
changing reg in insn 698
changing reg in insn 705
changing reg in insn 707
changing reg in insn 715
changing reg in insn 716
changing reg in insn 716
changing reg in insn 721
changing reg in insn 721
changing reg in insn 722
changing reg in insn 720
changing reg in insn 729
changing reg in insn 730
changing reg in insn 730
changing reg in insn 735
changing reg in insn 735
changing reg in insn 736
changing reg in insn 734
changing reg in insn 743
changing reg in insn 745
changing reg in insn 753
changing reg in insn 754
changing reg in insn 754
changing reg in insn 759
changing reg in insn 759
changing reg in insn 760
changing reg in insn 758
changing reg in insn 765
changing reg in insn 767
changing reg in insn 775
changing reg in insn 776
changing reg in insn 776
changing reg in insn 781
changing reg in insn 781
changing reg in insn 782
changing reg in insn 780
changing reg in insn 788
changing reg in insn 789
changing reg in insn 789
changing reg in insn 794
changing reg in insn 794
changing reg in insn 795
changing reg in insn 793
changing reg in insn 798
changing reg in insn 800
changing reg in insn 799
changing reg in insn 804
changing reg in insn 805
changing reg in insn 809
changing reg in insn 810
changing reg in insn 821
changing reg in insn 822
changing reg in insn 823
changing reg in insn 824
changing reg in insn 832
changing reg in insn 833
changing reg in insn 7
changing reg in insn 838
deleting insn with uid = 38.
deleting insn with uid = 45.
deleting insn with uid = 900.
deleting insn with uid = 67.
deleting insn with uid = 902.
deleting insn with uid = 97.
deleting insn with uid = 112.
deleting insn with uid = 904.
deleting insn with uid = 143.
deleting insn with uid = 906.
deleting insn with uid = 169.
deleting insn with uid = 908.
deleting insn with uid = 199.
deleting insn with uid = 910.
deleting insn with uid = 237.
deleting insn with uid = 912.
deleting insn with uid = 263.
deleting insn with uid = 914.
deleting insn with uid = 293.
deleting insn with uid = 308.
deleting insn with uid = 916.
deleting insn with uid = 339.
deleting insn with uid = 918.
deleting insn with uid = 365.
deleting insn with uid = 920.
deleting insn with uid = 395.
deleting insn with uid = 922.
deleting insn with uid = 433.
deleting insn with uid = 924.
deleting insn with uid = 459.
deleting insn with uid = 926.
deleting insn with uid = 489.
deleting insn with uid = 511.
deleting insn with uid = 519.
deleting insn with uid = 541.
deleting insn with uid = 579.
deleting insn with uid = 601.
deleting insn with uid = 644.
deleting insn with uid = 679.
deleting insn with uid = 687.
deleting insn with uid = 709.
deleting insn with uid = 747.
deleting insn with uid = 769.
deleting insn with uid = 814.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 168.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 236.
verify found no changes in insn with uid = 262.
verify found no changes in insn with uid = 292.
verify found no changes in insn with uid = 307.
verify found no changes in insn with uid = 338.
verify found no changes in insn with uid = 364.
verify found no changes in insn with uid = 394.
verify found no changes in insn with uid = 432.
verify found no changes in insn with uid = 458.
verify found no changes in insn with uid = 488.
verify found no changes in insn with uid = 510.
verify found no changes in insn with uid = 518.
verify found no changes in insn with uid = 540.
verify found no changes in insn with uid = 578.
verify found no changes in insn with uid = 600.
verify found no changes in insn with uid = 643.
verify found no changes in insn with uid = 656.
verify found no changes in insn with uid = 664.
verify found no changes in insn with uid = 678.
verify found no changes in insn with uid = 686.
verify found no changes in insn with uid = 708.
verify found no changes in insn with uid = 746.
verify found no changes in insn with uid = 768.
verify found no changes in insn with uid = 813.
verify found no changes in insn with uid = 826.
verify found no changes in insn with uid = 834.
verify found no changes in insn with uid = 840.


void check_outfile(IOFiles*, bool, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={271d,266u} r1={110d,75u,12e} r2={37d,1u} r4={52d,17u} r5={70d,35u} r6={1d,349u} r7={1d,135u} r8={35d} r9={35d} r10={35d} r11={35d} r12={35d} r13={35d} r14={35d} r15={35d} r17={190d,54u} r18={35d} r19={35d} r20={1d,1u,20e} r21={36d} r22={36d} r23={36d} r24={36d} r25={36d} r26={36d} r27={36d} r28={36d} r29={35d} r30={35d} r31={35d} r32={35d} r33={35d} r34={35d} r35={35d} r36={35d} r37={36d} r38={36d} r39={35d} r40={35d} r45={35d} r46={35d} r47={35d} r48={35d} r49={35d} r50={35d} r51={35d} r52={35d} r53={35d} r54={35d} r55={35d} r56={35d} r57={35d} r58={35d} r59={35d} r60={35d} r61={35d} r62={35d} r63={35d} r64={35d} r65={35d} r66={35d} r67={35d} r68={35d} r69={35d} r70={35d} r71={35d} r72={35d} r73={35d} r74={35d} r75={35d} r76={35d} r77={35d} r78={35d} r79={35d} r80={35d} 
;;    total ref usage 4018{3053d,933u,32e} in 616{581 regular + 35 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 257 258 259
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
        (reg:DI 5 di [ io_filenames ])) ge2fitman_sup.cpp:505 89 {*movdi_internal}
     (nil))
(insn 3 2 5 2 (set (reg:SI 0 ax [257])
        (reg:SI 4 si [ overwrite ])) ge2fitman_sup.cpp:505 90 {*movsi_internal}
     (nil))
(insn 5 3 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
        (reg:SI 1 dx [ s_u_out ])) ge2fitman_sup.cpp:505 90 {*movsi_internal}
     (nil))
(insn 4 5 6 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
        (reg:QI 0 ax [257])) ge2fitman_sup.cpp:505 93 {*movqi_internal}
     (nil))
(note 6 4 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 6 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 D.25627+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [434])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:505 986 {stack_tls_protect_set_di}
     (nil))
(insn 10 7 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -100 [0xffffffffffffff9c])) [0 found_extension+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:506 90 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 sup_ext+0 S1 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -63 [0xffffffffffffffc1])) [0 sup_ext+1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -62 [0xffffffffffffffc2])) [0 sup_ext+2 S1 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -61 [0xffffffffffffffc3])) [0 sup_ext+3 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 sup_ext+4 S1 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:509 93 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf+0 S1 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -47 [0xffffffffffffffd1])) [0 sup_suf+1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -46 [0xffffffffffffffd2])) [0 sup_suf+2 S1 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -45 [0xffffffffffffffd3])) [0 sup_suf+3 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 sup_suf+4 S1 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:510 93 {*movqi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 uns_ext+0 S1 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -31 [0xffffffffffffffe1])) [0 uns_ext+1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 23 22 24 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -30 [0xffffffffffffffe2])) [0 uns_ext+2 S1 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -29 [0xffffffffffffffe3])) [0 uns_ext+3 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 uns_ext+4 S1 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:511 93 {*movqi_internal}
     (nil))
(insn 26 25 27 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf+0 S1 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 27 26 28 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -15 [0xfffffffffffffff1])) [0 uns_suf+1 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 28 27 29 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 uns_suf+2 S1 A16])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 29 28 30 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -13 [0xfffffffffffffff3])) [0 uns_suf+3 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 30 29 31 2 (set (mem/j/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 uns_suf+4 S1 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:512 93 {*movqi_internal}
     (nil))
(insn 31 30 32 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:514 90 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:514 90 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:517 89 {*movdi_internal}
     (nil))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [258])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:519 89 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.25621 ] [87])
                (plus:DI (reg/f:DI 0 ax [258])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:519 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 36 35 37 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 D.25621 ] [87])) ge2fitman_sup.cpp:519 89 {*movdi_internal}
     (nil))
(call_insn/i 37 36 39 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f043f6a40d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:519 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 37 40 2 (set (reg:SI 0 ax [orig:89 D.25623 ] [89])
        (reg:SI 0 ax [orig:88 D.25622 ] [88])) ge2fitman_sup.cpp:519 90 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])
        (reg:SI 0 ax [orig:89 D.25623 ] [89])) ge2fitman_sup.cpp:519 90 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg/f:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:520 89 {*movdi_internal}
     (nil))
(insn 42 41 43 2 (parallel [
            (set (reg/f:DI 0 ax [orig:90 D.25621 ] [90])
                (plus:DI (reg/f:DI 0 ax [259])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:520 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 43 42 44 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 D.25621 ] [90])) ge2fitman_sup.cpp:520 89 {*movdi_internal}
     (nil))
(call_insn/i 44 43 46 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f043f6a40d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:520 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 46 44 47 2 (set (reg:SI 0 ax [orig:92 D.25623 ] [92])
        (reg:SI 0 ax [orig:91 D.25622 ] [91])) ge2fitman_sup.cpp:520 90 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (set (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])
        (reg:SI 0 ax [orig:92 D.25623 ] [92])) ge2fitman_sup.cpp:520 90 {*movsi_internal}
     (nil))
(insn 48 47 49 2 (set (reg:SI 0 ax [orig:93 D.25623 ] [93])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:522 90 {*movsi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:93 D.25623 ] [93])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:522 7 {*cmpsi_1}
     (nil))
(jump_insn 50 49 51 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) ge2fitman_sup.cpp:522 612 {*jcc_1}
     (nil)
 -> 76)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 51 50 52 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 73 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:523 90 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              5 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 73 52 53 4 86 "" [1 uses])
(note 53 73 54 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:523 7 {*cmpsi_1}
     (nil))
(jump_insn 55 54 56 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) ge2fitman_sup.cpp:523 612 {*jcc_1}
     (nil)
 -> 76)
;;  succ:       6
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 95 96 97 98 99 100 260 261 262 263 264
(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 5 (set (reg:SI 1 dx [orig:94 D.25623 ] [94])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:SI 0 ax [260])
        (const_int 4 [0x4])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(insn 59 58 60 5 (parallel [
            (set (reg:SI 0 ax [orig:95 D.25623 ] [95])
                (minus:SI (reg:SI 0 ax [260])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:524 260 {*subsi_1}
     (nil))
(insn 60 59 901 5 (parallel [
            (set (reg:SI 1 dx [orig:96 D.25623 ] [96])
                (minus:SI (reg:SI 1 dx [orig:96 D.25623 ] [96])
                    (reg:SI 0 ax [orig:95 D.25623 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:524 260 {*subsi_1}
     (nil))
(insn 901 60 61 5 (set (reg:SI 0 ax [orig:96 D.25623 ] [96])
        (reg:SI 1 dx [orig:96 D.25623 ] [96])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(insn 61 901 62 5 (set (reg/f:DI 1 dx [261])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:524 89 {*movdi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:DI 0 ax [262])
        (sign_extend:DI (reg:SI 0 ax [orig:96 D.25623 ] [96]))) ge2fitman_sup.cpp:524 142 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 5 (set (reg:QI 0 ax [orig:97 D.25624 ] [97])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [261])
                    (reg:DI 0 ax [262]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:524 93 {*movqi_internal}
     (nil))
(insn 64 63 65 5 (set (reg:SI 0 ax [orig:98 D.25623 ] [98])
        (sign_extend:SI (reg:QI 0 ax [orig:97 D.25624 ] [97]))) ge2fitman_sup.cpp:524 148 {extendqisi2}
     (nil))
(insn 65 64 66 5 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:98 D.25623 ] [98])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(call_insn/i 66 65 68 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:524 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 68 66 69 5 (set (reg:QI 1 dx [orig:100 D.25624 ] [100])
        (reg:QI 0 ax [orig:99 D.25623 ] [99])) ge2fitman_sup.cpp:524 93 {*movqi_internal}
     (nil))
(insn 69 68 70 5 (set (reg:SI 0 ax [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:524 90 {*movsi_internal}
     (nil))
(insn 70 69 71 5 (set (reg:DI 0 ax [263])
        (sign_extend:DI (reg:SI 0 ax [264]))) ge2fitman_sup.cpp:524 142 {*extendsidi2_rex64}
     (nil))
(insn 71 70 72 5 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [263]))
                (const_int -64 [0xffffffffffffffc0])) [0 sup_ext S1 A8])
        (reg:QI 1 dx [orig:100 D.25624 ] [100])) ge2fitman_sup.cpp:524 93 {*movqi_internal}
     (nil))
(insn 72 71 846 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:523 217 {*addsi_1}
     (nil))
(jump_insn 846 72 847 5 (set (pc)
        (label_ref 73)) ge2fitman_sup.cpp:523 654 {jump}
     (nil)
 -> 73)
;;  succ:       4 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 847 846 76)
;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101
(code_label 76 847 77 6 85 "" [2 uses])
(note 77 76 78 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 6 (set (reg:SI 0 ax [orig:101 D.25623 ] [101])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:528 90 {*movsi_internal}
     (nil))
(insn 79 78 80 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:101 D.25623 ] [101])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:528 7 {*cmpsi_1}
     (nil))
(jump_insn 80 79 81 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 106)
            (pc))) ge2fitman_sup.cpp:528 612 {*jcc_1}
     (nil)
 -> 106)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 81 80 82 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 103 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:529 90 {*movsi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;;              9 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 103 82 83 8 88 "" [1 uses])
(note 83 103 84 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:529 7 {*cmpsi_1}
     (nil))
(jump_insn 85 84 86 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 106)
            (pc))) ge2fitman_sup.cpp:529 612 {*jcc_1}
     (nil)
 -> 106)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 102 103 104 105 106 107 108 265 266 267 268 269
(note 86 85 87 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 9 (set (reg:SI 1 dx [orig:102 D.25623 ] [102])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(insn 88 87 89 9 (set (reg:SI 0 ax [265])
        (const_int 4 [0x4])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(insn 89 88 90 9 (parallel [
            (set (reg:SI 0 ax [orig:103 D.25623 ] [103])
                (minus:SI (reg:SI 0 ax [265])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:530 260 {*subsi_1}
     (nil))
(insn 90 89 903 9 (parallel [
            (set (reg:SI 1 dx [orig:104 D.25623 ] [104])
                (minus:SI (reg:SI 1 dx [orig:104 D.25623 ] [104])
                    (reg:SI 0 ax [orig:103 D.25623 ] [103])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:530 260 {*subsi_1}
     (nil))
(insn 903 90 91 9 (set (reg:SI 0 ax [orig:104 D.25623 ] [104])
        (reg:SI 1 dx [orig:104 D.25623 ] [104])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(insn 91 903 92 9 (set (reg/f:DI 1 dx [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:530 89 {*movdi_internal}
     (nil))
(insn 92 91 93 9 (set (reg:DI 0 ax [267])
        (sign_extend:DI (reg:SI 0 ax [orig:104 D.25623 ] [104]))) ge2fitman_sup.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 93 92 94 9 (set (reg:QI 0 ax [orig:105 D.25624 ] [105])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [266])
                    (reg:DI 0 ax [267]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:530 93 {*movqi_internal}
     (nil))
(insn 94 93 95 9 (set (reg:SI 0 ax [orig:106 D.25623 ] [106])
        (sign_extend:SI (reg:QI 0 ax [orig:105 D.25624 ] [105]))) ge2fitman_sup.cpp:530 148 {extendqisi2}
     (nil))
(insn 95 94 96 9 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:106 D.25623 ] [106])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(call_insn/i 96 95 98 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:530 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 98 96 99 9 (set (reg:QI 1 dx [orig:108 D.25624 ] [108])
        (reg:QI 0 ax [orig:107 D.25623 ] [107])) ge2fitman_sup.cpp:530 93 {*movqi_internal}
     (nil))
(insn 99 98 100 9 (set (reg:SI 0 ax [269])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:530 90 {*movsi_internal}
     (nil))
(insn 100 99 101 9 (set (reg:DI 0 ax [268])
        (sign_extend:DI (reg:SI 0 ax [269]))) ge2fitman_sup.cpp:530 142 {*extendsidi2_rex64}
     (nil))
(insn 101 100 102 9 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [268]))
                (const_int -32 [0xffffffffffffffe0])) [0 uns_ext S1 A8])
        (reg:QI 1 dx [orig:108 D.25624 ] [108])) ge2fitman_sup.cpp:530 93 {*movqi_internal}
     (nil))
(insn 102 101 848 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:529 217 {*addsi_1}
     (nil))
(jump_insn 848 102 849 9 (set (pc)
        (label_ref 103)) ge2fitman_sup.cpp:529 654 {jump}
     (nil)
 -> 103)
;;  succ:       8 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 849 848 106)
;; basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 270
(code_label 106 849 107 10 87 "" [2 uses])
(note 107 106 108 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 10 (parallel [
            (set (reg:DI 0 ax [270])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:535 218 {*adddi_1}
     (nil))
(insn 109 108 110 10 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC90") [flags 0x2]  <var_decl 0x7f043dff2090 *.LC90>)) ge2fitman_sup.cpp:535 89 {*movdi_internal}
     (nil))
(insn 110 109 111 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [270])) ge2fitman_sup.cpp:535 89 {*movdi_internal}
     (nil))
(call_insn/i 111 110 113 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:535 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 113 111 114 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:109 D.25623 ] [109])
            (const_int 0 [0]))) ge2fitman_sup.cpp:535 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 114 113 115 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 208)
            (pc))) ge2fitman_sup.cpp:535 612 {*jcc_1}
     (nil)
 -> 208)
;;  succ:       11 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110
(note 115 114 116 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 11 (set (reg:SI 0 ax [orig:110 D.25623 ] [110])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:536 90 {*movsi_internal}
     (nil))
(insn 117 116 118 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:110 D.25623 ] [110])
            (const_int 8 [0x8]))) ge2fitman_sup.cpp:536 7 {*cmpsi_1}
     (nil))
(jump_insn 118 117 119 11 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 178)
            (pc))) ge2fitman_sup.cpp:536 612 {*jcc_1}
     (nil)
 -> 178)
;;  succ:       12 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 119 120 121 271 272
(note 119 118 120 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 12 (set (reg:SI 0 ax [orig:119 D.25623 ] [119])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:537 90 {*movsi_internal}
     (nil))
(insn 121 120 122 12 (parallel [
            (set (reg:SI 0 ax [orig:120 D.25623 ] [120])
                (plus:SI (reg:SI 0 ax [orig:119 D.25623 ] [119])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:537 217 {*addsi_1}
     (nil))
(insn 122 121 123 12 (set (reg/f:DI 1 dx [271])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:537 89 {*movdi_internal}
     (nil))
(insn 123 122 124 12 (set (reg:DI 0 ax [272])
        (sign_extend:DI (reg:SI 0 ax [orig:120 D.25623 ] [120]))) ge2fitman_sup.cpp:537 142 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 12 (set (reg:QI 0 ax [orig:121 D.25624 ] [121])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [271])
                    (reg:DI 0 ax [272]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:537 93 {*movqi_internal}
     (nil))
(insn 125 124 126 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:121 D.25624 ] [121])
            (const_int 95 [0x5f]))) ge2fitman_sup.cpp:537 5 {*cmpqi_1}
     (nil))
(jump_insn 126 125 127 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 152)
            (pc))) ge2fitman_sup.cpp:537 612 {*jcc_1}
     (nil)
 -> 152)
;;  succ:       13 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 127 126 128 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 149 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:539 90 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              15 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 149 128 129 14 93 "" [1 uses])
(note 129 149 130 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:539 7 {*cmpsi_1}
     (nil))
(jump_insn 131 130 132 14 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) ge2fitman_sup.cpp:539 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       35
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 129 130 131 132 133 134 135 273 274 275 276 277
(note 132 131 133 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 15 (set (reg:SI 1 dx [orig:129 D.25623 ] [129])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(insn 134 133 135 15 (set (reg:SI 0 ax [273])
        (const_int 6 [0x6])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(insn 135 134 136 15 (parallel [
            (set (reg:SI 0 ax [orig:130 D.25623 ] [130])
                (minus:SI (reg:SI 0 ax [273])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:540 260 {*subsi_1}
     (nil))
(insn 136 135 905 15 (parallel [
            (set (reg:SI 1 dx [orig:131 D.25623 ] [131])
                (minus:SI (reg:SI 1 dx [orig:131 D.25623 ] [131])
                    (reg:SI 0 ax [orig:130 D.25623 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:540 260 {*subsi_1}
     (nil))
(insn 905 136 137 15 (set (reg:SI 0 ax [orig:131 D.25623 ] [131])
        (reg:SI 1 dx [orig:131 D.25623 ] [131])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(insn 137 905 138 15 (set (reg/f:DI 1 dx [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:540 89 {*movdi_internal}
     (nil))
(insn 138 137 139 15 (set (reg:DI 0 ax [275])
        (sign_extend:DI (reg:SI 0 ax [orig:131 D.25623 ] [131]))) ge2fitman_sup.cpp:540 142 {*extendsidi2_rex64}
     (nil))
(insn 139 138 140 15 (set (reg:QI 0 ax [orig:132 D.25624 ] [132])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [274])
                    (reg:DI 0 ax [275]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:540 93 {*movqi_internal}
     (nil))
(insn 140 139 141 15 (set (reg:SI 0 ax [orig:133 D.25623 ] [133])
        (sign_extend:SI (reg:QI 0 ax [orig:132 D.25624 ] [132]))) ge2fitman_sup.cpp:540 148 {extendqisi2}
     (nil))
(insn 141 140 142 15 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:133 D.25623 ] [133])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(call_insn/i 142 141 144 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:540 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 144 142 145 15 (set (reg:QI 1 dx [orig:135 D.25624 ] [135])
        (reg:QI 0 ax [orig:134 D.25623 ] [134])) ge2fitman_sup.cpp:540 93 {*movqi_internal}
     (nil))
(insn 145 144 146 15 (set (reg:SI 0 ax [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:540 90 {*movsi_internal}
     (nil))
(insn 146 145 147 15 (set (reg:DI 0 ax [276])
        (sign_extend:DI (reg:SI 0 ax [277]))) ge2fitman_sup.cpp:540 142 {*extendsidi2_rex64}
     (nil))
(insn 147 146 148 15 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [276]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:135 D.25624 ] [135])) ge2fitman_sup.cpp:540 93 {*movqi_internal}
     (nil))
(insn 148 147 850 15 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:539 217 {*addsi_1}
     (nil))
(jump_insn 850 148 851 15 (set (pc)
        (label_ref 149)) ge2fitman_sup.cpp:539 654 {jump}
     (nil)
 -> 149)
;;  succ:       14 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 851 850 152)
;; basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 152 851 153 16 91 "" [1 uses])
(note 153 152 154 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 154 153 175 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:544 90 {*movsi_internal}
     (nil))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;;              18 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 175 154 155 17 94 "" [1 uses])
(note 155 175 156 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:544 7 {*cmpsi_1}
     (nil))
(jump_insn 157 156 158 17 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) ge2fitman_sup.cpp:544 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       35
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 122 123 124 125 126 127 128 278 279 280 281 282
(note 158 157 159 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 18 (set (reg:SI 1 dx [orig:122 D.25623 ] [122])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(insn 160 159 161 18 (set (reg:SI 0 ax [278])
        (const_int 8 [0x8])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(insn 161 160 162 18 (parallel [
            (set (reg:SI 0 ax [orig:123 D.25623 ] [123])
                (minus:SI (reg:SI 0 ax [278])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:545 260 {*subsi_1}
     (nil))
(insn 162 161 907 18 (parallel [
            (set (reg:SI 1 dx [orig:124 D.25623 ] [124])
                (minus:SI (reg:SI 1 dx [orig:124 D.25623 ] [124])
                    (reg:SI 0 ax [orig:123 D.25623 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:545 260 {*subsi_1}
     (nil))
(insn 907 162 163 18 (set (reg:SI 0 ax [orig:124 D.25623 ] [124])
        (reg:SI 1 dx [orig:124 D.25623 ] [124])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(insn 163 907 164 18 (set (reg/f:DI 1 dx [279])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:545 89 {*movdi_internal}
     (nil))
(insn 164 163 165 18 (set (reg:DI 0 ax [280])
        (sign_extend:DI (reg:SI 0 ax [orig:124 D.25623 ] [124]))) ge2fitman_sup.cpp:545 142 {*extendsidi2_rex64}
     (nil))
(insn 165 164 166 18 (set (reg:QI 0 ax [orig:125 D.25624 ] [125])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [279])
                    (reg:DI 0 ax [280]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:545 93 {*movqi_internal}
     (nil))
(insn 166 165 167 18 (set (reg:SI 0 ax [orig:126 D.25623 ] [126])
        (sign_extend:SI (reg:QI 0 ax [orig:125 D.25624 ] [125]))) ge2fitman_sup.cpp:545 148 {extendqisi2}
     (nil))
(insn 167 166 168 18 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:126 D.25623 ] [126])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(call_insn/i 168 167 170 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:545 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 170 168 171 18 (set (reg:QI 1 dx [orig:128 D.25624 ] [128])
        (reg:QI 0 ax [orig:127 D.25623 ] [127])) ge2fitman_sup.cpp:545 93 {*movqi_internal}
     (nil))
(insn 171 170 172 18 (set (reg:SI 0 ax [282])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:545 90 {*movsi_internal}
     (nil))
(insn 172 171 173 18 (set (reg:DI 0 ax [281])
        (sign_extend:DI (reg:SI 0 ax [282]))) ge2fitman_sup.cpp:545 142 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 18 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [281]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:128 D.25624 ] [128])) ge2fitman_sup.cpp:545 93 {*movqi_internal}
     (nil))
(insn 174 173 852 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:544 217 {*addsi_1}
     (nil))
(jump_insn 852 174 853 18 (set (pc)
        (label_ref 175)) ge2fitman_sup.cpp:544 654 {jump}
     (nil)
 -> 175)
;;  succ:       17 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 853 852 178)
;; basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111
(code_label 178 853 179 19 90 "" [1 uses])
(note 179 178 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 19 (set (reg:SI 0 ax [orig:111 D.25623 ] [111])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:549 90 {*movsi_internal}
     (nil))
(insn 181 180 182 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:111 D.25623 ] [111])
            (const_int 6 [0x6]))) ge2fitman_sup.cpp:549 7 {*cmpsi_1}
     (nil))
(jump_insn 182 181 183 19 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) ge2fitman_sup.cpp:549 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       20 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 183 182 184 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 184 183 205 20 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:551 90 {*movsi_internal}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;;              22 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 205 184 185 21 95 "" [1 uses])
(note 185 205 186 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:551 7 {*cmpsi_1}
     (nil))
(jump_insn 187 186 188 21 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) ge2fitman_sup.cpp:551 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       35
;;              22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 113 114 115 116 117 118 283 284 285 286 287
(note 188 187 189 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 189 188 190 22 (set (reg:SI 1 dx [orig:112 D.25623 ] [112])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(insn 190 189 191 22 (set (reg:SI 0 ax [283])
        (const_int 6 [0x6])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(insn 191 190 192 22 (parallel [
            (set (reg:SI 0 ax [orig:113 D.25623 ] [113])
                (minus:SI (reg:SI 0 ax [283])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:552 260 {*subsi_1}
     (nil))
(insn 192 191 909 22 (parallel [
            (set (reg:SI 1 dx [orig:114 D.25623 ] [114])
                (minus:SI (reg:SI 1 dx [orig:114 D.25623 ] [114])
                    (reg:SI 0 ax [orig:113 D.25623 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:552 260 {*subsi_1}
     (nil))
(insn 909 192 193 22 (set (reg:SI 0 ax [orig:114 D.25623 ] [114])
        (reg:SI 1 dx [orig:114 D.25623 ] [114])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(insn 193 909 194 22 (set (reg/f:DI 1 dx [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:552 89 {*movdi_internal}
     (nil))
(insn 194 193 195 22 (set (reg:DI 0 ax [285])
        (sign_extend:DI (reg:SI 0 ax [orig:114 D.25623 ] [114]))) ge2fitman_sup.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 195 194 196 22 (set (reg:QI 0 ax [orig:115 D.25624 ] [115])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [284])
                    (reg:DI 0 ax [285]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:552 93 {*movqi_internal}
     (nil))
(insn 196 195 197 22 (set (reg:SI 0 ax [orig:116 D.25623 ] [116])
        (sign_extend:SI (reg:QI 0 ax [orig:115 D.25624 ] [115]))) ge2fitman_sup.cpp:552 148 {extendqisi2}
     (nil))
(insn 197 196 198 22 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:116 D.25623 ] [116])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(call_insn/i 198 197 200 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:552 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 200 198 201 22 (set (reg:QI 1 dx [orig:118 D.25624 ] [118])
        (reg:QI 0 ax [orig:117 D.25623 ] [117])) ge2fitman_sup.cpp:552 93 {*movqi_internal}
     (nil))
(insn 201 200 202 22 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:552 90 {*movsi_internal}
     (nil))
(insn 202 201 203 22 (set (reg:DI 0 ax [286])
        (sign_extend:DI (reg:SI 0 ax [287]))) ge2fitman_sup.cpp:552 142 {*extendsidi2_rex64}
     (nil))
(insn 203 202 204 22 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [286]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:118 D.25624 ] [118])) ge2fitman_sup.cpp:552 93 {*movqi_internal}
     (nil))
(insn 204 203 854 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:551 217 {*addsi_1}
     (nil))
(jump_insn 854 204 855 22 (set (pc)
        (label_ref 205)) ge2fitman_sup.cpp:551 654 {jump}
     (nil)
 -> 205)
;;  succ:       21 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 855 854 208)
;; basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136
(code_label 208 855 209 23 89 "" [1 uses])
(note 209 208 210 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 23 (set (reg:SI 0 ax [orig:136 D.25623 ] [136])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:556 90 {*movsi_internal}
     (nil))
(insn 211 210 212 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:136 D.25623 ] [136])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:556 7 {*cmpsi_1}
     (nil))
(jump_insn 212 211 213 23 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 272)
            (pc))) ge2fitman_sup.cpp:556 612 {*jcc_1}
     (nil)
 -> 272)
;;  succ:       24 (FALLTHRU)
;;              31
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 138 139 288 289
(note 213 212 214 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 215 24 (set (reg:SI 0 ax [orig:137 D.25623 ] [137])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:557 90 {*movsi_internal}
     (nil))
(insn 215 214 216 24 (parallel [
            (set (reg:SI 0 ax [orig:138 D.25623 ] [138])
                (plus:SI (reg:SI 0 ax [orig:137 D.25623 ] [137])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:557 217 {*addsi_1}
     (nil))
(insn 216 215 217 24 (set (reg/f:DI 1 dx [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:557 89 {*movdi_internal}
     (nil))
(insn 217 216 218 24 (set (reg:DI 0 ax [289])
        (sign_extend:DI (reg:SI 0 ax [orig:138 D.25623 ] [138]))) ge2fitman_sup.cpp:557 142 {*extendsidi2_rex64}
     (nil))
(insn 218 217 219 24 (set (reg:QI 0 ax [orig:139 D.25624 ] [139])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [288])
                    (reg:DI 0 ax [289]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:557 93 {*movqi_internal}
     (nil))
(insn 219 218 220 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:139 D.25624 ] [139])
            (const_int 95 [0x5f]))) ge2fitman_sup.cpp:557 5 {*cmpqi_1}
     (nil))
(jump_insn 220 219 221 24 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 246)
            (pc))) ge2fitman_sup.cpp:557 612 {*jcc_1}
     (nil)
 -> 246)
;;  succ:       25 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 221 220 222 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 222 221 243 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:559 90 {*movsi_internal}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              27 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 243 222 223 26 98 "" [1 uses])
(note 223 243 224 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:559 7 {*cmpsi_1}
     (nil))
(jump_insn 225 224 226 26 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) ge2fitman_sup.cpp:559 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       35
;;              27 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 147 148 149 150 151 152 153 290 291 292 293 294
(note 226 225 227 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 27 (set (reg:SI 1 dx [orig:147 D.25623 ] [147])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(insn 228 227 229 27 (set (reg:SI 0 ax [290])
        (const_int 2 [0x2])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(insn 229 228 230 27 (parallel [
            (set (reg:SI 0 ax [orig:148 D.25623 ] [148])
                (minus:SI (reg:SI 0 ax [290])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:560 260 {*subsi_1}
     (nil))
(insn 230 229 911 27 (parallel [
            (set (reg:SI 1 dx [orig:149 D.25623 ] [149])
                (minus:SI (reg:SI 1 dx [orig:149 D.25623 ] [149])
                    (reg:SI 0 ax [orig:148 D.25623 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:560 260 {*subsi_1}
     (nil))
(insn 911 230 231 27 (set (reg:SI 0 ax [orig:149 D.25623 ] [149])
        (reg:SI 1 dx [orig:149 D.25623 ] [149])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(insn 231 911 232 27 (set (reg/f:DI 1 dx [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:560 89 {*movdi_internal}
     (nil))
(insn 232 231 233 27 (set (reg:DI 0 ax [292])
        (sign_extend:DI (reg:SI 0 ax [orig:149 D.25623 ] [149]))) ge2fitman_sup.cpp:560 142 {*extendsidi2_rex64}
     (nil))
(insn 233 232 234 27 (set (reg:QI 0 ax [orig:150 D.25624 ] [150])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [291])
                    (reg:DI 0 ax [292]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:560 93 {*movqi_internal}
     (nil))
(insn 234 233 235 27 (set (reg:SI 0 ax [orig:151 D.25623 ] [151])
        (sign_extend:SI (reg:QI 0 ax [orig:150 D.25624 ] [150]))) ge2fitman_sup.cpp:560 148 {extendqisi2}
     (nil))
(insn 235 234 236 27 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:151 D.25623 ] [151])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(call_insn/i 236 235 238 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:560 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 238 236 239 27 (set (reg:QI 1 dx [orig:153 D.25624 ] [153])
        (reg:QI 0 ax [orig:152 D.25623 ] [152])) ge2fitman_sup.cpp:560 93 {*movqi_internal}
     (nil))
(insn 239 238 240 27 (set (reg:SI 0 ax [294])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:560 90 {*movsi_internal}
     (nil))
(insn 240 239 241 27 (set (reg:DI 0 ax [293])
        (sign_extend:DI (reg:SI 0 ax [294]))) ge2fitman_sup.cpp:560 142 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 27 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [293]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:153 D.25624 ] [153])) ge2fitman_sup.cpp:560 93 {*movqi_internal}
     (nil))
(insn 242 241 856 27 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:559 217 {*addsi_1}
     (nil))
(jump_insn 856 242 857 27 (set (pc)
        (label_ref 243)) ge2fitman_sup.cpp:559 654 {jump}
     (nil)
 -> 243)
;;  succ:       26 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 857 856 246)
;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       24
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 246 857 247 28 97 "" [1 uses])
(note 247 246 248 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 248 247 269 28 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:564 90 {*movsi_internal}
     (nil))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;;              30 [100.0%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 269 248 249 29 99 "" [1 uses])
(note 249 269 250 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:564 7 {*cmpsi_1}
     (nil))
(jump_insn 251 250 252 29 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) ge2fitman_sup.cpp:564 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       35
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 140 141 142 143 144 145 146 295 296 297 298 299
(note 252 251 253 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 30 (set (reg:SI 1 dx [orig:140 D.25623 ] [140])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(insn 254 253 255 30 (set (reg:SI 0 ax [295])
        (const_int 4 [0x4])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(insn 255 254 256 30 (parallel [
            (set (reg:SI 0 ax [orig:141 D.25623 ] [141])
                (minus:SI (reg:SI 0 ax [295])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:565 260 {*subsi_1}
     (nil))
(insn 256 255 913 30 (parallel [
            (set (reg:SI 1 dx [orig:142 D.25623 ] [142])
                (minus:SI (reg:SI 1 dx [orig:142 D.25623 ] [142])
                    (reg:SI 0 ax [orig:141 D.25623 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:565 260 {*subsi_1}
     (nil))
(insn 913 256 257 30 (set (reg:SI 0 ax [orig:142 D.25623 ] [142])
        (reg:SI 1 dx [orig:142 D.25623 ] [142])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(insn 257 913 258 30 (set (reg/f:DI 1 dx [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:565 89 {*movdi_internal}
     (nil))
(insn 258 257 259 30 (set (reg:DI 0 ax [297])
        (sign_extend:DI (reg:SI 0 ax [orig:142 D.25623 ] [142]))) ge2fitman_sup.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 259 258 260 30 (set (reg:QI 0 ax [orig:143 D.25624 ] [143])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [296])
                    (reg:DI 0 ax [297]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:565 93 {*movqi_internal}
     (nil))
(insn 260 259 261 30 (set (reg:SI 0 ax [orig:144 D.25623 ] [144])
        (sign_extend:SI (reg:QI 0 ax [orig:143 D.25624 ] [143]))) ge2fitman_sup.cpp:565 148 {extendqisi2}
     (nil))
(insn 261 260 262 30 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:144 D.25623 ] [144])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(call_insn/i 262 261 264 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:565 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 264 262 265 30 (set (reg:QI 1 dx [orig:146 D.25624 ] [146])
        (reg:QI 0 ax [orig:145 D.25623 ] [145])) ge2fitman_sup.cpp:565 93 {*movqi_internal}
     (nil))
(insn 265 264 266 30 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:565 90 {*movsi_internal}
     (nil))
(insn 266 265 267 30 (set (reg:DI 0 ax [298])
        (sign_extend:DI (reg:SI 0 ax [299]))) ge2fitman_sup.cpp:565 142 {*extendsidi2_rex64}
     (nil))
(insn 267 266 268 30 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [298]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:146 D.25624 ] [146])) ge2fitman_sup.cpp:565 93 {*movqi_internal}
     (nil))
(insn 268 267 858 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:564 217 {*addsi_1}
     (nil))
(jump_insn 858 268 859 30 (set (pc)
        (label_ref 269)) ge2fitman_sup.cpp:564 654 {jump}
     (nil)
 -> 269)
;;  succ:       29 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 859 858 272)
;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       23
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154
(code_label 272 859 273 31 96 "" [1 uses])
(note 273 272 274 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 31 (set (reg:SI 0 ax [orig:154 D.25623 ] [154])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:569 90 {*movsi_internal}
     (nil))
(insn 275 274 276 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:154 D.25623 ] [154])
            (const_int 2 [0x2]))) ge2fitman_sup.cpp:569 7 {*cmpsi_1}
     (nil))
(jump_insn 276 275 277 31 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) ge2fitman_sup.cpp:569 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       32 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 277 276 278 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 278 277 299 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:570 90 {*movsi_internal}
     (nil))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;;              34 [100.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 299 278 279 33 100 "" [1 uses])
(note 279 299 280 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 280 279 281 33 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:570 7 {*cmpsi_1}
     (nil))
(jump_insn 281 280 282 33 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) ge2fitman_sup.cpp:570 612 {*jcc_1}
     (nil)
 -> 302)
;;  succ:       35
;;              34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 155 156 157 158 159 160 161 300 301 302 303 304
(note 282 281 283 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 283 282 284 34 (set (reg:SI 1 dx [orig:155 D.25623 ] [155])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 284 283 285 34 (set (reg:SI 0 ax [300])
        (const_int 2 [0x2])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 285 284 286 34 (parallel [
            (set (reg:SI 0 ax [orig:156 D.25623 ] [156])
                (minus:SI (reg:SI 0 ax [300])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:571 260 {*subsi_1}
     (nil))
(insn 286 285 915 34 (parallel [
            (set (reg:SI 1 dx [orig:157 D.25623 ] [157])
                (minus:SI (reg:SI 1 dx [orig:157 D.25623 ] [157])
                    (reg:SI 0 ax [orig:156 D.25623 ] [156])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:571 260 {*subsi_1}
     (nil))
(insn 915 286 287 34 (set (reg:SI 0 ax [orig:157 D.25623 ] [157])
        (reg:SI 1 dx [orig:157 D.25623 ] [157])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 287 915 288 34 (set (reg/f:DI 1 dx [301])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:571 89 {*movdi_internal}
     (nil))
(insn 288 287 289 34 (set (reg:DI 0 ax [302])
        (sign_extend:DI (reg:SI 0 ax [orig:157 D.25623 ] [157]))) ge2fitman_sup.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 289 288 290 34 (set (reg:QI 0 ax [orig:158 D.25624 ] [158])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [301])
                    (reg:DI 0 ax [302]))
                (const_int 512 [0x200])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 290 289 291 34 (set (reg:SI 0 ax [orig:159 D.25623 ] [159])
        (sign_extend:SI (reg:QI 0 ax [orig:158 D.25624 ] [158]))) ge2fitman_sup.cpp:571 148 {extendqisi2}
     (nil))
(insn 291 290 292 34 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:159 D.25623 ] [159])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(call_insn/i 292 291 294 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:571 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 294 292 295 34 (set (reg:QI 1 dx [orig:161 D.25624 ] [161])
        (reg:QI 0 ax [orig:160 D.25623 ] [160])) ge2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 295 294 296 34 (set (reg:SI 0 ax [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:571 90 {*movsi_internal}
     (nil))
(insn 296 295 297 34 (set (reg:DI 0 ax [303])
        (sign_extend:DI (reg:SI 0 ax [304]))) ge2fitman_sup.cpp:571 142 {*extendsidi2_rex64}
     (nil))
(insn 297 296 298 34 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [303]))
                (const_int -48 [0xffffffffffffffd0])) [0 sup_suf S1 A8])
        (reg:QI 1 dx [orig:161 D.25624 ] [161])) ge2fitman_sup.cpp:571 93 {*movqi_internal}
     (nil))
(insn 298 297 860 34 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:570 217 {*addsi_1}
     (nil))
(jump_insn 860 298 861 34 (set (pc)
        (label_ref 299)) ge2fitman_sup.cpp:570 654 {jump}
     (nil)
 -> 299)
;;  succ:       33 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 861 860 302)
;; basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
;;              29
;;              31
;;              33
;;              17
;;              14
;;              21
;;              26
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 162 305
(code_label 302 861 303 35 92 "" [8 uses])
(note 303 302 304 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 304 303 305 35 (parallel [
            (set (reg:DI 0 ax [305])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:577 218 {*adddi_1}
     (nil))
(insn 305 304 306 35 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC90") [flags 0x2]  <var_decl 0x7f043dff2090 *.LC90>)) ge2fitman_sup.cpp:577 89 {*movdi_internal}
     (nil))
(insn 306 305 307 35 (set (reg:DI 5 di)
        (reg:DI 0 ax [305])) ge2fitman_sup.cpp:577 89 {*movdi_internal}
     (nil))
(call_insn/i 307 306 309 35 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:577 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 309 307 310 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:162 D.25623 ] [162])
            (const_int 0 [0]))) ge2fitman_sup.cpp:577 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 310 309 311 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 404)
            (pc))) ge2fitman_sup.cpp:577 612 {*jcc_1}
     (nil)
 -> 404)
;;  succ:       36 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 163
(note 311 310 312 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 36 (set (reg:SI 0 ax [orig:163 D.25623 ] [163])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:578 90 {*movsi_internal}
     (nil))
(insn 313 312 314 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:163 D.25623 ] [163])
            (const_int 8 [0x8]))) ge2fitman_sup.cpp:578 7 {*cmpsi_1}
     (nil))
(jump_insn 314 313 315 36 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 374)
            (pc))) ge2fitman_sup.cpp:578 612 {*jcc_1}
     (nil)
 -> 374)
;;  succ:       37 (FALLTHRU)
;;              44
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 172 173 174 306 307
(note 315 314 316 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 316 315 317 37 (set (reg:SI 0 ax [orig:172 D.25623 ] [172])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:579 90 {*movsi_internal}
     (nil))
(insn 317 316 318 37 (parallel [
            (set (reg:SI 0 ax [orig:173 D.25623 ] [173])
                (plus:SI (reg:SI 0 ax [orig:172 D.25623 ] [172])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:579 217 {*addsi_1}
     (nil))
(insn 318 317 319 37 (set (reg/f:DI 1 dx [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:579 89 {*movdi_internal}
     (nil))
(insn 319 318 320 37 (set (reg:DI 0 ax [307])
        (sign_extend:DI (reg:SI 0 ax [orig:173 D.25623 ] [173]))) ge2fitman_sup.cpp:579 142 {*extendsidi2_rex64}
     (nil))
(insn 320 319 321 37 (set (reg:QI 0 ax [orig:174 D.25624 ] [174])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [306])
                    (reg:DI 0 ax [307]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:579 93 {*movqi_internal}
     (nil))
(insn 321 320 322 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:174 D.25624 ] [174])
            (const_int 95 [0x5f]))) ge2fitman_sup.cpp:579 5 {*cmpqi_1}
     (nil))
(jump_insn 322 321 323 37 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 348)
            (pc))) ge2fitman_sup.cpp:579 612 {*jcc_1}
     (nil)
 -> 348)
;;  succ:       38 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 323 322 324 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 324 323 345 38 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:581 90 {*movsi_internal}
     (nil))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;;              40 [100.0%] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 345 324 325 39 105 "" [1 uses])
(note 325 345 326 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 327 39 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:581 7 {*cmpsi_1}
     (nil))
(jump_insn 327 326 328 39 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) ge2fitman_sup.cpp:581 612 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       60
;;              40 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 182 183 184 185 186 187 188 308 309 310 311 312
(note 328 327 329 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 330 40 (set (reg:SI 1 dx [orig:182 D.25623 ] [182])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(insn 330 329 331 40 (set (reg:SI 0 ax [308])
        (const_int 6 [0x6])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(insn 331 330 332 40 (parallel [
            (set (reg:SI 0 ax [orig:183 D.25623 ] [183])
                (minus:SI (reg:SI 0 ax [308])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:582 260 {*subsi_1}
     (nil))
(insn 332 331 917 40 (parallel [
            (set (reg:SI 1 dx [orig:184 D.25623 ] [184])
                (minus:SI (reg:SI 1 dx [orig:184 D.25623 ] [184])
                    (reg:SI 0 ax [orig:183 D.25623 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:582 260 {*subsi_1}
     (nil))
(insn 917 332 333 40 (set (reg:SI 0 ax [orig:184 D.25623 ] [184])
        (reg:SI 1 dx [orig:184 D.25623 ] [184])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(insn 333 917 334 40 (set (reg/f:DI 1 dx [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:582 89 {*movdi_internal}
     (nil))
(insn 334 333 335 40 (set (reg:DI 0 ax [310])
        (sign_extend:DI (reg:SI 0 ax [orig:184 D.25623 ] [184]))) ge2fitman_sup.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 335 334 336 40 (set (reg:QI 0 ax [orig:185 D.25624 ] [185])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [309])
                    (reg:DI 0 ax [310]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:582 93 {*movqi_internal}
     (nil))
(insn 336 335 337 40 (set (reg:SI 0 ax [orig:186 D.25623 ] [186])
        (sign_extend:SI (reg:QI 0 ax [orig:185 D.25624 ] [185]))) ge2fitman_sup.cpp:582 148 {extendqisi2}
     (nil))
(insn 337 336 338 40 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:186 D.25623 ] [186])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(call_insn/i 338 337 340 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:582 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 340 338 341 40 (set (reg:QI 1 dx [orig:188 D.25624 ] [188])
        (reg:QI 0 ax [orig:187 D.25623 ] [187])) ge2fitman_sup.cpp:582 93 {*movqi_internal}
     (nil))
(insn 341 340 342 40 (set (reg:SI 0 ax [312])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:582 90 {*movsi_internal}
     (nil))
(insn 342 341 343 40 (set (reg:DI 0 ax [311])
        (sign_extend:DI (reg:SI 0 ax [312]))) ge2fitman_sup.cpp:582 142 {*extendsidi2_rex64}
     (nil))
(insn 343 342 344 40 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [311]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:188 D.25624 ] [188])) ge2fitman_sup.cpp:582 93 {*movqi_internal}
     (nil))
(insn 344 343 862 40 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:581 217 {*addsi_1}
     (nil))
(jump_insn 862 344 863 40 (set (pc)
        (label_ref 345)) ge2fitman_sup.cpp:581 654 {jump}
     (nil)
 -> 345)
;;  succ:       39 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 863 862 348)
;; basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       37
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 348 863 349 41 103 "" [1 uses])
(note 349 348 350 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 350 349 371 41 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:586 90 {*movsi_internal}
     (nil))
;;  succ:       42 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;;              43 [100.0%] 
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 371 350 351 42 106 "" [1 uses])
(note 351 371 352 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 352 351 353 42 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:586 7 {*cmpsi_1}
     (nil))
(jump_insn 353 352 354 42 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) ge2fitman_sup.cpp:586 612 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       60
;;              43 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 175 176 177 178 179 180 181 313 314 315 316 317
(note 354 353 355 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 356 43 (set (reg:SI 1 dx [orig:175 D.25623 ] [175])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(insn 356 355 357 43 (set (reg:SI 0 ax [313])
        (const_int 8 [0x8])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(insn 357 356 358 43 (parallel [
            (set (reg:SI 0 ax [orig:176 D.25623 ] [176])
                (minus:SI (reg:SI 0 ax [313])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:587 260 {*subsi_1}
     (nil))
(insn 358 357 919 43 (parallel [
            (set (reg:SI 1 dx [orig:177 D.25623 ] [177])
                (minus:SI (reg:SI 1 dx [orig:177 D.25623 ] [177])
                    (reg:SI 0 ax [orig:176 D.25623 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:587 260 {*subsi_1}
     (nil))
(insn 919 358 359 43 (set (reg:SI 0 ax [orig:177 D.25623 ] [177])
        (reg:SI 1 dx [orig:177 D.25623 ] [177])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(insn 359 919 360 43 (set (reg/f:DI 1 dx [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:587 89 {*movdi_internal}
     (nil))
(insn 360 359 361 43 (set (reg:DI 0 ax [315])
        (sign_extend:DI (reg:SI 0 ax [orig:177 D.25623 ] [177]))) ge2fitman_sup.cpp:587 142 {*extendsidi2_rex64}
     (nil))
(insn 361 360 362 43 (set (reg:QI 0 ax [orig:178 D.25624 ] [178])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [314])
                    (reg:DI 0 ax [315]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:587 93 {*movqi_internal}
     (nil))
(insn 362 361 363 43 (set (reg:SI 0 ax [orig:179 D.25623 ] [179])
        (sign_extend:SI (reg:QI 0 ax [orig:178 D.25624 ] [178]))) ge2fitman_sup.cpp:587 148 {extendqisi2}
     (nil))
(insn 363 362 364 43 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:179 D.25623 ] [179])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(call_insn/i 364 363 366 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:587 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 366 364 367 43 (set (reg:QI 1 dx [orig:181 D.25624 ] [181])
        (reg:QI 0 ax [orig:180 D.25623 ] [180])) ge2fitman_sup.cpp:587 93 {*movqi_internal}
     (nil))
(insn 367 366 368 43 (set (reg:SI 0 ax [317])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:587 90 {*movsi_internal}
     (nil))
(insn 368 367 369 43 (set (reg:DI 0 ax [316])
        (sign_extend:DI (reg:SI 0 ax [317]))) ge2fitman_sup.cpp:587 142 {*extendsidi2_rex64}
     (nil))
(insn 369 368 370 43 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [316]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:181 D.25624 ] [181])) ge2fitman_sup.cpp:587 93 {*movqi_internal}
     (nil))
(insn 370 369 864 43 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:586 217 {*addsi_1}
     (nil))
(jump_insn 864 370 865 43 (set (pc)
        (label_ref 371)) ge2fitman_sup.cpp:586 654 {jump}
     (nil)
 -> 371)
;;  succ:       42 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 865 864 374)
;; basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       36
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 164
(code_label 374 865 375 44 102 "" [1 uses])
(note 375 374 376 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 376 375 377 44 (set (reg:SI 0 ax [orig:164 D.25623 ] [164])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:591 90 {*movsi_internal}
     (nil))
(insn 377 376 378 44 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:164 D.25623 ] [164])
            (const_int 6 [0x6]))) ge2fitman_sup.cpp:591 7 {*cmpsi_1}
     (nil))
(jump_insn 378 377 379 44 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) ge2fitman_sup.cpp:591 612 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       45 (FALLTHRU)
;;              60
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 379 378 380 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 401 45 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:593 90 {*movsi_internal}
     (nil))
;;  succ:       46 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;;              47 [100.0%] 
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 401 380 381 46 107 "" [1 uses])
(note 381 401 382 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 382 381 383 46 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:593 7 {*cmpsi_1}
     (nil))
(jump_insn 383 382 384 46 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) ge2fitman_sup.cpp:593 612 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       60
;;              47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 165 166 167 168 169 170 171 318 319 320 321 322
(note 384 383 385 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 385 384 386 47 (set (reg:SI 1 dx [orig:165 D.25623 ] [165])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(insn 386 385 387 47 (set (reg:SI 0 ax [318])
        (const_int 6 [0x6])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(insn 387 386 388 47 (parallel [
            (set (reg:SI 0 ax [orig:166 D.25623 ] [166])
                (minus:SI (reg:SI 0 ax [318])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:594 260 {*subsi_1}
     (nil))
(insn 388 387 921 47 (parallel [
            (set (reg:SI 1 dx [orig:167 D.25623 ] [167])
                (minus:SI (reg:SI 1 dx [orig:167 D.25623 ] [167])
                    (reg:SI 0 ax [orig:166 D.25623 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:594 260 {*subsi_1}
     (nil))
(insn 921 388 389 47 (set (reg:SI 0 ax [orig:167 D.25623 ] [167])
        (reg:SI 1 dx [orig:167 D.25623 ] [167])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(insn 389 921 390 47 (set (reg/f:DI 1 dx [319])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:594 89 {*movdi_internal}
     (nil))
(insn 390 389 391 47 (set (reg:DI 0 ax [320])
        (sign_extend:DI (reg:SI 0 ax [orig:167 D.25623 ] [167]))) ge2fitman_sup.cpp:594 142 {*extendsidi2_rex64}
     (nil))
(insn 391 390 392 47 (set (reg:QI 0 ax [orig:168 D.25624 ] [168])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [319])
                    (reg:DI 0 ax [320]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:594 93 {*movqi_internal}
     (nil))
(insn 392 391 393 47 (set (reg:SI 0 ax [orig:169 D.25623 ] [169])
        (sign_extend:SI (reg:QI 0 ax [orig:168 D.25624 ] [168]))) ge2fitman_sup.cpp:594 148 {extendqisi2}
     (nil))
(insn 393 392 394 47 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:169 D.25623 ] [169])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(call_insn/i 394 393 396 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:594 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 396 394 397 47 (set (reg:QI 1 dx [orig:171 D.25624 ] [171])
        (reg:QI 0 ax [orig:170 D.25623 ] [170])) ge2fitman_sup.cpp:594 93 {*movqi_internal}
     (nil))
(insn 397 396 398 47 (set (reg:SI 0 ax [322])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:594 90 {*movsi_internal}
     (nil))
(insn 398 397 399 47 (set (reg:DI 0 ax [321])
        (sign_extend:DI (reg:SI 0 ax [322]))) ge2fitman_sup.cpp:594 142 {*extendsidi2_rex64}
     (nil))
(insn 399 398 400 47 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [321]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:171 D.25624 ] [171])) ge2fitman_sup.cpp:594 93 {*movqi_internal}
     (nil))
(insn 400 399 866 47 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:593 217 {*addsi_1}
     (nil))
(jump_insn 866 400 867 47 (set (pc)
        (label_ref 401)) ge2fitman_sup.cpp:593 654 {jump}
     (nil)
 -> 401)
;;  succ:       46 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 867 866 404)
;; basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 189
(code_label 404 867 405 48 101 "" [1 uses])
(note 405 404 406 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 48 (set (reg:SI 0 ax [orig:189 D.25623 ] [189])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:598 90 {*movsi_internal}
     (nil))
(insn 407 406 408 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:189 D.25623 ] [189])
            (const_int 4 [0x4]))) ge2fitman_sup.cpp:598 7 {*cmpsi_1}
     (nil))
(jump_insn 408 407 409 48 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 468)
            (pc))) ge2fitman_sup.cpp:598 612 {*jcc_1}
     (nil)
 -> 468)
;;  succ:       49 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 190 191 192 323 324
(note 409 408 410 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 410 409 411 49 (set (reg:SI 0 ax [orig:190 D.25623 ] [190])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:599 90 {*movsi_internal}
     (nil))
(insn 411 410 412 49 (parallel [
            (set (reg:SI 0 ax [orig:191 D.25623 ] [191])
                (plus:SI (reg:SI 0 ax [orig:190 D.25623 ] [190])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:599 217 {*addsi_1}
     (nil))
(insn 412 411 413 49 (set (reg/f:DI 1 dx [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:599 89 {*movdi_internal}
     (nil))
(insn 413 412 414 49 (set (reg:DI 0 ax [324])
        (sign_extend:DI (reg:SI 0 ax [orig:191 D.25623 ] [191]))) ge2fitman_sup.cpp:599 142 {*extendsidi2_rex64}
     (nil))
(insn 414 413 415 49 (set (reg:QI 0 ax [orig:192 D.25624 ] [192])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [323])
                    (reg:DI 0 ax [324]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:599 93 {*movqi_internal}
     (nil))
(insn 415 414 416 49 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:192 D.25624 ] [192])
            (const_int 95 [0x5f]))) ge2fitman_sup.cpp:599 5 {*cmpqi_1}
     (nil))
(jump_insn 416 415 417 49 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 442)
            (pc))) ge2fitman_sup.cpp:599 612 {*jcc_1}
     (nil)
 -> 442)
;;  succ:       50 (FALLTHRU)
;;              53
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 417 416 418 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 439 50 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:601 90 {*movsi_internal}
     (nil))
;;  succ:       51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;;              52 [100.0%] 
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 439 418 419 51 110 "" [1 uses])
(note 419 439 420 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 420 419 421 51 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:601 7 {*cmpsi_1}
     (nil))
(jump_insn 421 420 422 51 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) ge2fitman_sup.cpp:601 612 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       60
;;              52 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       51 (FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 200 201 202 203 204 205 206 325 326 327 328 329
(note 422 421 423 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 52 (set (reg:SI 1 dx [orig:200 D.25623 ] [200])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(insn 424 423 425 52 (set (reg:SI 0 ax [325])
        (const_int 2 [0x2])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(insn 425 424 426 52 (parallel [
            (set (reg:SI 0 ax [orig:201 D.25623 ] [201])
                (minus:SI (reg:SI 0 ax [325])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:602 260 {*subsi_1}
     (nil))
(insn 426 425 923 52 (parallel [
            (set (reg:SI 1 dx [orig:202 D.25623 ] [202])
                (minus:SI (reg:SI 1 dx [orig:202 D.25623 ] [202])
                    (reg:SI 0 ax [orig:201 D.25623 ] [201])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:602 260 {*subsi_1}
     (nil))
(insn 923 426 427 52 (set (reg:SI 0 ax [orig:202 D.25623 ] [202])
        (reg:SI 1 dx [orig:202 D.25623 ] [202])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(insn 427 923 428 52 (set (reg/f:DI 1 dx [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:602 89 {*movdi_internal}
     (nil))
(insn 428 427 429 52 (set (reg:DI 0 ax [327])
        (sign_extend:DI (reg:SI 0 ax [orig:202 D.25623 ] [202]))) ge2fitman_sup.cpp:602 142 {*extendsidi2_rex64}
     (nil))
(insn 429 428 430 52 (set (reg:QI 0 ax [orig:203 D.25624 ] [203])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [326])
                    (reg:DI 0 ax [327]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:602 93 {*movqi_internal}
     (nil))
(insn 430 429 431 52 (set (reg:SI 0 ax [orig:204 D.25623 ] [204])
        (sign_extend:SI (reg:QI 0 ax [orig:203 D.25624 ] [203]))) ge2fitman_sup.cpp:602 148 {extendqisi2}
     (nil))
(insn 431 430 432 52 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:204 D.25623 ] [204])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(call_insn/i 432 431 434 52 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:602 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 434 432 435 52 (set (reg:QI 1 dx [orig:206 D.25624 ] [206])
        (reg:QI 0 ax [orig:205 D.25623 ] [205])) ge2fitman_sup.cpp:602 93 {*movqi_internal}
     (nil))
(insn 435 434 436 52 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:602 90 {*movsi_internal}
     (nil))
(insn 436 435 437 52 (set (reg:DI 0 ax [328])
        (sign_extend:DI (reg:SI 0 ax [329]))) ge2fitman_sup.cpp:602 142 {*extendsidi2_rex64}
     (nil))
(insn 437 436 438 52 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [328]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:206 D.25624 ] [206])) ge2fitman_sup.cpp:602 93 {*movqi_internal}
     (nil))
(insn 438 437 868 52 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:601 217 {*addsi_1}
     (nil))
(jump_insn 868 438 869 52 (set (pc)
        (label_ref 439)) ge2fitman_sup.cpp:601 654 {jump}
     (nil)
 -> 439)
;;  succ:       51 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 869 868 442)
;; basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       49
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 442 869 443 53 109 "" [1 uses])
(note 443 442 444 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 444 443 465 53 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:606 90 {*movsi_internal}
     (nil))
;;  succ:       54 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       53 (FALLTHRU)
;;              55 [100.0%] 
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 465 444 445 54 111 "" [1 uses])
(note 445 465 446 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 446 445 447 54 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 3 [0x3]))) ge2fitman_sup.cpp:606 7 {*cmpsi_1}
     (nil))
(jump_insn 447 446 448 54 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) ge2fitman_sup.cpp:606 612 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       60
;;              55 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 193 194 195 196 197 198 199 330 331 332 333 334
(note 448 447 449 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 449 448 450 55 (set (reg:SI 1 dx [orig:193 D.25623 ] [193])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(insn 450 449 451 55 (set (reg:SI 0 ax [330])
        (const_int 4 [0x4])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(insn 451 450 452 55 (parallel [
            (set (reg:SI 0 ax [orig:194 D.25623 ] [194])
                (minus:SI (reg:SI 0 ax [330])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:607 260 {*subsi_1}
     (nil))
(insn 452 451 925 55 (parallel [
            (set (reg:SI 1 dx [orig:195 D.25623 ] [195])
                (minus:SI (reg:SI 1 dx [orig:195 D.25623 ] [195])
                    (reg:SI 0 ax [orig:194 D.25623 ] [194])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:607 260 {*subsi_1}
     (nil))
(insn 925 452 453 55 (set (reg:SI 0 ax [orig:195 D.25623 ] [195])
        (reg:SI 1 dx [orig:195 D.25623 ] [195])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(insn 453 925 454 55 (set (reg/f:DI 1 dx [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:607 89 {*movdi_internal}
     (nil))
(insn 454 453 455 55 (set (reg:DI 0 ax [332])
        (sign_extend:DI (reg:SI 0 ax [orig:195 D.25623 ] [195]))) ge2fitman_sup.cpp:607 142 {*extendsidi2_rex64}
     (nil))
(insn 455 454 456 55 (set (reg:QI 0 ax [orig:196 D.25624 ] [196])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [331])
                    (reg:DI 0 ax [332]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:607 93 {*movqi_internal}
     (nil))
(insn 456 455 457 55 (set (reg:SI 0 ax [orig:197 D.25623 ] [197])
        (sign_extend:SI (reg:QI 0 ax [orig:196 D.25624 ] [196]))) ge2fitman_sup.cpp:607 148 {extendqisi2}
     (nil))
(insn 457 456 458 55 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:197 D.25623 ] [197])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(call_insn/i 458 457 460 55 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:607 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 460 458 461 55 (set (reg:QI 1 dx [orig:199 D.25624 ] [199])
        (reg:QI 0 ax [orig:198 D.25623 ] [198])) ge2fitman_sup.cpp:607 93 {*movqi_internal}
     (nil))
(insn 461 460 462 55 (set (reg:SI 0 ax [334])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:607 90 {*movsi_internal}
     (nil))
(insn 462 461 463 55 (set (reg:DI 0 ax [333])
        (sign_extend:DI (reg:SI 0 ax [334]))) ge2fitman_sup.cpp:607 142 {*extendsidi2_rex64}
     (nil))
(insn 463 462 464 55 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [333]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:199 D.25624 ] [199])) ge2fitman_sup.cpp:607 93 {*movqi_internal}
     (nil))
(insn 464 463 870 55 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:606 217 {*addsi_1}
     (nil))
(jump_insn 870 464 871 55 (set (pc)
        (label_ref 465)) ge2fitman_sup.cpp:606 654 {jump}
     (nil)
 -> 465)
;;  succ:       54 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 871 870 468)
;; basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       48
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 207
(code_label 468 871 469 56 108 "" [1 uses])
(note 469 468 470 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 470 469 471 56 (set (reg:SI 0 ax [orig:207 D.25623 ] [207])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:611 90 {*movsi_internal}
     (nil))
(insn 471 470 472 56 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:207 D.25623 ] [207])
            (const_int 2 [0x2]))) ge2fitman_sup.cpp:611 7 {*cmpsi_1}
     (nil))
(jump_insn 472 471 473 56 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) ge2fitman_sup.cpp:611 612 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       57 (FALLTHRU)
;;              60
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       56 (FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 473 472 474 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 474 473 495 57 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:612 90 {*movsi_internal}
     (nil))
;;  succ:       58 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;;              59 [100.0%] 
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 495 474 475 58 112 "" [1 uses])
(note 475 495 476 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 476 475 477 58 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:612 7 {*cmpsi_1}
     (nil))
(jump_insn 477 476 478 58 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 498)
            (pc))) ge2fitman_sup.cpp:612 612 {*jcc_1}
     (nil)
 -> 498)
;;  succ:       60
;;              59 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 208 209 210 211 212 213 214 335 336 337 338 339
(note 478 477 479 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 479 478 480 59 (set (reg:SI 1 dx [orig:208 D.25623 ] [208])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(insn 480 479 481 59 (set (reg:SI 0 ax [335])
        (const_int 2 [0x2])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(insn 481 480 482 59 (parallel [
            (set (reg:SI 0 ax [orig:209 D.25623 ] [209])
                (minus:SI (reg:SI 0 ax [335])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:613 260 {*subsi_1}
     (nil))
(insn 482 481 927 59 (parallel [
            (set (reg:SI 1 dx [orig:210 D.25623 ] [210])
                (minus:SI (reg:SI 1 dx [orig:210 D.25623 ] [210])
                    (reg:SI 0 ax [orig:209 D.25623 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:613 260 {*subsi_1}
     (nil))
(insn 927 482 483 59 (set (reg:SI 0 ax [orig:210 D.25623 ] [210])
        (reg:SI 1 dx [orig:210 D.25623 ] [210])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(insn 483 927 484 59 (set (reg/f:DI 1 dx [336])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:613 89 {*movdi_internal}
     (nil))
(insn 484 483 485 59 (set (reg:DI 0 ax [337])
        (sign_extend:DI (reg:SI 0 ax [orig:210 D.25623 ] [210]))) ge2fitman_sup.cpp:613 142 {*extendsidi2_rex64}
     (nil))
(insn 485 484 486 59 (set (reg:QI 0 ax [orig:211 D.25624 ] [211])
        (mem/j:QI (plus:DI (plus:DI (reg/f:DI 1 dx [336])
                    (reg:DI 0 ax [337]))
                (const_int 768 [0x300])) [0 io_filenames_70(D)->out S1 A8])) ge2fitman_sup.cpp:613 93 {*movqi_internal}
     (nil))
(insn 486 485 487 59 (set (reg:SI 0 ax [orig:212 D.25623 ] [212])
        (sign_extend:SI (reg:QI 0 ax [orig:211 D.25624 ] [211]))) ge2fitman_sup.cpp:613 148 {extendqisi2}
     (nil))
(insn 487 486 488 59 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:212 D.25623 ] [212])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(call_insn/i 488 487 490 59 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("tolower") [flags 0x41]  <function_decl 0x7f043f6b8870 tolower>) [0 __builtin_tolower S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:613 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 490 488 491 59 (set (reg:QI 1 dx [orig:214 D.25624 ] [214])
        (reg:QI 0 ax [orig:213 D.25623 ] [213])) ge2fitman_sup.cpp:613 93 {*movqi_internal}
     (nil))
(insn 491 490 492 59 (set (reg:SI 0 ax [339])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:613 90 {*movsi_internal}
     (nil))
(insn 492 491 493 59 (set (reg:DI 0 ax [338])
        (sign_extend:DI (reg:SI 0 ax [339]))) ge2fitman_sup.cpp:613 142 {*extendsidi2_rex64}
     (nil))
(insn 493 492 494 59 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [338]))
                (const_int -16 [0xfffffffffffffff0])) [0 uns_suf S1 A8])
        (reg:QI 1 dx [orig:214 D.25624 ] [214])) ge2fitman_sup.cpp:613 93 {*movqi_internal}
     (nil))
(insn 494 493 872 59 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -104 [0xffffffffffffff98])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:612 217 {*addsi_1}
     (nil))
(jump_insn 872 494 873 59 (set (pc)
        (label_ref 495)) ge2fitman_sup.cpp:612 654 {jump}
     (nil)
 -> 495)
;;  succ:       58 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 873 872 498)
;; basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       44
;;              54
;;              56
;;              58
;;              42
;;              39
;;              46
;;              51
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 498 873 499 60 104 "" [8 uses])
(note 499 498 500 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 500 499 501 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:618 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 501 500 502 60 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 505)
            (pc))) ge2fitman_sup.cpp:618 612 {*jcc_1}
     (nil)
 -> 505)
;;  succ:       62
;;              61 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 502 501 503 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 503 502 504 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:618 7 {*cmpsi_1}
     (nil))
(jump_insn 504 503 505 61 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 665)
            (pc))) ge2fitman_sup.cpp:618 612 {*jcc_1}
     (nil)
 -> 665)
;;  succ:       62 (FALLTHRU)
;;              78
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       60
;;              61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 215 340
(code_label 505 504 506 62 113 "" [1 uses])
(note 506 505 507 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 507 506 508 62 (parallel [
            (set (reg:DI 0 ax [340])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:621 218 {*adddi_1}
     (nil))
(insn 508 507 509 62 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC90") [flags 0x2]  <var_decl 0x7f043dff2090 *.LC90>)) ge2fitman_sup.cpp:621 89 {*movdi_internal}
     (nil))
(insn 509 508 510 62 (set (reg:DI 5 di)
        (reg:DI 0 ax [340])) ge2fitman_sup.cpp:621 89 {*movdi_internal}
     (nil))
(call_insn/i 510 509 512 62 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:621 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 512 510 513 62 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:215 D.25623 ] [215])
            (const_int 0 [0]))) ge2fitman_sup.cpp:621 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 513 512 514 62 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 573)
            (pc))) ge2fitman_sup.cpp:621 612 {*jcc_1}
     (nil)
 -> 573)
;;  succ:       63 (FALLTHRU)
;;              68
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62 (FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 216 341
(note 514 513 515 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 515 514 516 63 (parallel [
            (set (reg:DI 0 ax [341])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:622 218 {*adddi_1}
     (nil))
(insn 516 515 517 63 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC91") [flags 0x2]  <var_decl 0x7f043dff2120 *.LC91>)) ge2fitman_sup.cpp:622 89 {*movdi_internal}
     (nil))
(insn 517 516 518 63 (set (reg:DI 5 di)
        (reg:DI 0 ax [341])) ge2fitman_sup.cpp:622 89 {*movdi_internal}
     (nil))
(call_insn/i 518 517 520 63 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:622 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 520 518 521 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:216 D.25623 ] [216])
            (const_int 0 [0]))) ge2fitman_sup.cpp:622 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 521 520 522 63 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) ge2fitman_sup.cpp:622 612 {*jcc_1}
     (nil)
 -> 535)
;;  succ:       64 (FALLTHRU)
;;              65
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 217 218 342 343 346 347
(note 522 521 523 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 523 522 524 64 (set (reg:SI 0 ax [orig:217 D.25623 ] [217])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:623 90 {*movsi_internal}
     (nil))
(insn 524 523 525 64 (parallel [
            (set (reg:SI 0 ax [orig:218 D.25623 ] [218])
                (plus:SI (reg:SI 0 ax [orig:217 D.25623 ] [217])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:623 217 {*addsi_1}
     (nil))
(insn 525 524 526 64 (set (reg:DI 0 ax [342])
        (sign_extend:DI (reg:SI 0 ax [orig:218 D.25623 ] [218]))) ge2fitman_sup.cpp:623 142 {*extendsidi2_rex64}
     (nil))
(insn 526 525 530 64 (parallel [
            (set (reg:DI 1 dx [343])
                (plus:DI (reg:DI 0 ax [342])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:623 218 {*adddi_1}
     (nil))
(insn 530 526 531 64 (set (reg/f:DI 0 ax [347])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:623 89 {*movdi_internal}
     (nil))
(insn 531 530 532 64 (parallel [
            (set (reg:DI 0 ax [346])
                (plus:DI (reg/f:DI 0 ax [347])
                    (reg:DI 1 dx [343])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:623 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [343]))
        (nil)))
(insn 532 531 874 64 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [346])) ge2fitman_sup.cpp:623 89 {*movdi_internal}
     (nil))
(jump_insn 874 532 875 64 (set (pc)
        (label_ref 628)) 654 {jump}
     (nil)
 -> 628)
;;  succ:       73 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 875 874 535)
;; basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       63
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 219 348
(code_label 535 875 536 65 116 "" [1 uses])
(note 536 535 537 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 537 536 538 65 (parallel [
            (set (reg:DI 0 ax [348])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:624 218 {*adddi_1}
     (nil))
(insn 538 537 539 65 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC92") [flags 0x2]  <var_decl 0x7f043dff21b0 *.LC92>)) ge2fitman_sup.cpp:624 89 {*movdi_internal}
     (nil))
(insn 539 538 540 65 (set (reg:DI 5 di)
        (reg:DI 0 ax [348])) ge2fitman_sup.cpp:624 89 {*movdi_internal}
     (nil))
(call_insn/i 540 539 542 65 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:624 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 542 540 543 65 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:219 D.25623 ] [219])
            (const_int 0 [0]))) ge2fitman_sup.cpp:624 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 543 542 544 65 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 557)
            (pc))) ge2fitman_sup.cpp:624 612 {*jcc_1}
     (nil)
 -> 557)
;;  succ:       66 (FALLTHRU)
;;              67
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 220 221 349 350 353 354
(note 544 543 545 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 545 544 546 66 (set (reg:SI 0 ax [orig:220 D.25623 ] [220])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:625 90 {*movsi_internal}
     (nil))
(insn 546 545 547 66 (parallel [
            (set (reg:SI 0 ax [orig:221 D.25623 ] [221])
                (plus:SI (reg:SI 0 ax [orig:220 D.25623 ] [220])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:625 217 {*addsi_1}
     (nil))
(insn 547 546 548 66 (set (reg:DI 0 ax [349])
        (sign_extend:DI (reg:SI 0 ax [orig:221 D.25623 ] [221]))) ge2fitman_sup.cpp:625 142 {*extendsidi2_rex64}
     (nil))
(insn 548 547 552 66 (parallel [
            (set (reg:DI 1 dx [350])
                (plus:DI (reg:DI 0 ax [349])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:625 218 {*adddi_1}
     (nil))
(insn 552 548 553 66 (set (reg/f:DI 0 ax [354])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:625 89 {*movdi_internal}
     (nil))
(insn 553 552 554 66 (parallel [
            (set (reg:DI 0 ax [353])
                (plus:DI (reg/f:DI 0 ax [354])
                    (reg:DI 1 dx [350])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:625 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [350]))
        (nil)))
(insn 554 553 876 66 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [353])) ge2fitman_sup.cpp:625 89 {*movdi_internal}
     (nil))
(jump_insn 876 554 877 66 (set (pc)
        (label_ref 628)) 654 {jump}
     (nil)
 -> 628)
;;  succ:       73 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 877 876 557)
;; basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       65
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 222 223 355 356 359 360
(code_label 557 877 558 67 118 "" [1 uses])
(note 558 557 559 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 559 558 560 67 (set (reg:SI 0 ax [orig:222 D.25623 ] [222])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:627 90 {*movsi_internal}
     (nil))
(insn 560 559 561 67 (parallel [
            (set (reg:SI 0 ax [orig:223 D.25623 ] [223])
                (plus:SI (reg:SI 0 ax [orig:222 D.25623 ] [222])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:627 217 {*addsi_1}
     (nil))
(insn 561 560 562 67 (set (reg:DI 0 ax [355])
        (sign_extend:DI (reg:SI 0 ax [orig:223 D.25623 ] [223]))) ge2fitman_sup.cpp:627 142 {*extendsidi2_rex64}
     (nil))
(insn 562 561 566 67 (parallel [
            (set (reg:DI 1 dx [356])
                (plus:DI (reg:DI 0 ax [355])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:627 218 {*adddi_1}
     (nil))
(insn 566 562 567 67 (set (reg/f:DI 0 ax [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:627 89 {*movdi_internal}
     (nil))
(insn 567 566 568 67 (parallel [
            (set (reg:DI 0 ax [359])
                (plus:DI (reg/f:DI 0 ax [360])
                    (reg:DI 1 dx [356])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:627 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [356]))
        (nil)))
(insn 568 567 878 67 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [359])) ge2fitman_sup.cpp:627 89 {*movdi_internal}
     (nil))
(jump_insn 878 568 879 67 (set (pc)
        (label_ref 628)) 654 {jump}
     (nil)
 -> 628)
;;  succ:       73 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 879 878 573)
;; basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       62
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 224 361
(code_label 573 879 574 68 115 "" [1 uses])
(note 574 573 575 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 575 574 576 68 (parallel [
            (set (reg:DI 0 ax [361])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:630 218 {*adddi_1}
     (nil))
(insn 576 575 577 68 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC91") [flags 0x2]  <var_decl 0x7f043dff2120 *.LC91>)) ge2fitman_sup.cpp:630 89 {*movdi_internal}
     (nil))
(insn 577 576 578 68 (set (reg:DI 5 di)
        (reg:DI 0 ax [361])) ge2fitman_sup.cpp:630 89 {*movdi_internal}
     (nil))
(call_insn/i 578 577 580 68 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:630 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 580 578 581 68 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:224 D.25623 ] [224])
            (const_int 0 [0]))) ge2fitman_sup.cpp:630 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 581 580 582 68 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 595)
            (pc))) ge2fitman_sup.cpp:630 612 {*jcc_1}
     (nil)
 -> 595)
;;  succ:       69 (FALLTHRU)
;;              70
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 225 226 362 363 366 367
(note 582 581 583 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 583 582 584 69 (set (reg:SI 0 ax [orig:225 D.25623 ] [225])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:631 90 {*movsi_internal}
     (nil))
(insn 584 583 585 69 (parallel [
            (set (reg:SI 0 ax [orig:226 D.25623 ] [226])
                (plus:SI (reg:SI 0 ax [orig:225 D.25623 ] [225])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:631 217 {*addsi_1}
     (nil))
(insn 585 584 586 69 (set (reg:DI 0 ax [362])
        (sign_extend:DI (reg:SI 0 ax [orig:226 D.25623 ] [226]))) ge2fitman_sup.cpp:631 142 {*extendsidi2_rex64}
     (nil))
(insn 586 585 590 69 (parallel [
            (set (reg:DI 1 dx [363])
                (plus:DI (reg:DI 0 ax [362])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:631 218 {*adddi_1}
     (nil))
(insn 590 586 591 69 (set (reg/f:DI 0 ax [367])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:631 89 {*movdi_internal}
     (nil))
(insn 591 590 592 69 (parallel [
            (set (reg:DI 0 ax [366])
                (plus:DI (reg/f:DI 0 ax [367])
                    (reg:DI 1 dx [363])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:631 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [363]))
        (nil)))
(insn 592 591 880 69 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [366])) ge2fitman_sup.cpp:631 89 {*movdi_internal}
     (nil))
(jump_insn 880 592 881 69 (set (pc)
        (label_ref 628)) 654 {jump}
     (nil)
 -> 628)
;;  succ:       73 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 881 880 595)
;; basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       68
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 227 368
(code_label 595 881 596 70 120 "" [1 uses])
(note 596 595 597 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 597 596 598 70 (parallel [
            (set (reg:DI 0 ax [368])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:632 218 {*adddi_1}
     (nil))
(insn 598 597 599 70 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC92") [flags 0x2]  <var_decl 0x7f043dff21b0 *.LC92>)) ge2fitman_sup.cpp:632 89 {*movdi_internal}
     (nil))
(insn 599 598 600 70 (set (reg:DI 5 di)
        (reg:DI 0 ax [368])) ge2fitman_sup.cpp:632 89 {*movdi_internal}
     (nil))
(call_insn/i 600 599 602 70 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:632 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 602 600 603 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:227 D.25623 ] [227])
            (const_int 0 [0]))) ge2fitman_sup.cpp:632 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 603 602 604 70 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 617)
            (pc))) ge2fitman_sup.cpp:632 612 {*jcc_1}
     (nil)
 -> 617)
;;  succ:       71 (FALLTHRU)
;;              72
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 228 229 369 370 373 374
(note 604 603 605 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 605 604 606 71 (set (reg:SI 0 ax [orig:228 D.25623 ] [228])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:633 90 {*movsi_internal}
     (nil))
(insn 606 605 607 71 (parallel [
            (set (reg:SI 0 ax [orig:229 D.25623 ] [229])
                (plus:SI (reg:SI 0 ax [orig:228 D.25623 ] [228])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:633 217 {*addsi_1}
     (nil))
(insn 607 606 608 71 (set (reg:DI 0 ax [369])
        (sign_extend:DI (reg:SI 0 ax [orig:229 D.25623 ] [229]))) ge2fitman_sup.cpp:633 142 {*extendsidi2_rex64}
     (nil))
(insn 608 607 612 71 (parallel [
            (set (reg:DI 1 dx [370])
                (plus:DI (reg:DI 0 ax [369])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:633 218 {*adddi_1}
     (nil))
(insn 612 608 613 71 (set (reg/f:DI 0 ax [374])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:633 89 {*movdi_internal}
     (nil))
(insn 613 612 614 71 (parallel [
            (set (reg:DI 0 ax [373])
                (plus:DI (reg/f:DI 0 ax [374])
                    (reg:DI 1 dx [370])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:633 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [370]))
        (nil)))
(insn 614 613 882 71 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [373])) ge2fitman_sup.cpp:633 89 {*movdi_internal}
     (nil))
(jump_insn 882 614 883 71 (set (pc)
        (label_ref 628)) 654 {jump}
     (nil)
 -> 628)
;;  succ:       73 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 883 882 617)
;; basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       70
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 230 375 376 379 380
(code_label 617 883 618 72 121 "" [1 uses])
(note 618 617 619 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 72 (set (reg:SI 0 ax [orig:230 D.25623 ] [230])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 filename_length+0 S4 A64])) ge2fitman_sup.cpp:635 90 {*movsi_internal}
     (nil))
(insn 620 619 621 72 (set (reg:DI 0 ax [375])
        (sign_extend:DI (reg:SI 0 ax [orig:230 D.25623 ] [230]))) ge2fitman_sup.cpp:635 142 {*extendsidi2_rex64}
     (nil))
(insn 621 620 625 72 (parallel [
            (set (reg:DI 1 dx [376])
                (plus:DI (reg:DI 0 ax [375])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:635 218 {*adddi_1}
     (nil))
(insn 625 621 626 72 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:635 89 {*movdi_internal}
     (nil))
(insn 626 625 627 72 (parallel [
            (set (reg:DI 0 ax [379])
                (plus:DI (reg/f:DI 0 ax [380])
                    (reg:DI 1 dx [376])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:635 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [376]))
        (nil)))
(insn 627 626 628 72 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [379])) ge2fitman_sup.cpp:635 89 {*movdi_internal}
     (nil))
;;  succ:       73 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       66 [100.0%] 
;;              67 [100.0%] 
;;              69 [100.0%] 
;;              72 (FALLTHRU)
;;              64 [100.0%] 
;;              71 [100.0%] 
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 231 381 382
(code_label 628 627 629 73 119 "" [5 uses])
(note 629 628 630 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 630 629 631 73 (set (reg/f:DI 0 ax [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])) ge2fitman_sup.cpp:639 89 {*movdi_internal}
     (nil))
(insn 631 630 632 73 (set (mem:SI (reg/f:DI 0 ax [381]) [0 MEM[(void *)fname_suffix_2]+0 S4 A8])
        (const_int 1680765791 [0x642e735f])) ge2fitman_sup.cpp:639 90 {*movsi_internal}
     (nil))
(insn 632 631 633 73 (set (mem:HI (plus:DI (reg/f:DI 0 ax [381])
                (const_int 4 [0x4])) [0 MEM[(void *)fname_suffix_2]+4 S2 A8])
        (const_int 29793 [0x7461])) ge2fitman_sup.cpp:639 92 {*movhi_internal}
     (nil))
(insn 633 632 634 73 (set (mem:QI (plus:DI (reg/f:DI 0 ax [381])
                (const_int 6 [0x6])) [0 MEM[(void *)fname_suffix_2]+6 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:639 93 {*movqi_internal}
     (nil))
(insn 634 633 635 73 (set (reg:QI 0 ax [382])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])) ge2fitman_sup.cpp:641 93 {*movqi_internal}
     (nil))
(insn 635 634 636 73 (parallel [
            (set (reg:QI 0 ax [orig:231 D.25625 ] [231])
                (xor:QI (reg:QI 0 ax [382])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:641 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 636 635 637 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:231 D.25625 ] [231])
            (const_int 0 [0]))) ge2fitman_sup.cpp:641 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 637 636 638 73 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 657)
            (pc))) ge2fitman_sup.cpp:641 612 {*jcc_1}
     (nil)
 -> 657)
;;  succ:       74 (FALLTHRU)
;;              76
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 232 233 234 383
(note 638 637 639 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 639 638 640 74 (set (reg/f:DI 0 ax [383])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(insn 640 639 641 74 (parallel [
            (set (reg/f:DI 0 ax [orig:232 D.25621 ] [232])
                (plus:DI (reg/f:DI 0 ax [383])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:643 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 641 640 642 74 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC93") [flags 0x2]  <var_decl 0x7f043dff2240 *.LC93>)) ge2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(insn 642 641 643 74 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:232 D.25621 ] [232])) ge2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(call_insn 643 642 645 74 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f043f4df510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:643 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 645 643 646 74 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:233 D.25626 ] [233])) ge2fitman_sup.cpp:643 89 {*movdi_internal}
     (nil))
(insn 646 645 647 74 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:643 4 {*cmpdi_ccno_1}
     (nil))
(insn 647 646 648 74 (set (reg:QI 0 ax [orig:234 D.25625 ] [234])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_sup.cpp:643 607 {*setcc_qi}
     (nil))
(insn 648 647 649 74 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:234 D.25625 ] [234])
            (const_int 0 [0]))) ge2fitman_sup.cpp:643 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 649 648 650 74 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 657)
            (pc))) ge2fitman_sup.cpp:643 612 {*jcc_1}
     (nil)
 -> 657)
;;  succ:       75 (FALLTHRU)
;;              76
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       74 (FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 235 384 385
(note 650 649 651 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 651 650 652 75 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:647 89 {*movdi_internal}
     (nil))
(insn 652 651 653 75 (parallel [
            (set (reg/f:DI 1 dx [orig:235 D.25621 ] [235])
                (plus:DI (reg/f:DI 0 ax [384])
                    (const_int 512 [0x200])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:647 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 512 [0x200]))
        (nil)))
(insn 653 652 654 75 (set (reg:SI 0 ax [385])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])) ge2fitman_sup.cpp:647 90 {*movsi_internal}
     (nil))
(insn 654 653 655 75 (set (reg:SI 4 si)
        (reg:SI 0 ax [385])) ge2fitman_sup.cpp:647 90 {*movsi_internal}
     (nil))
(insn 655 654 656 75 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:235 D.25621 ] [235])) ge2fitman_sup.cpp:647 89 {*movdi_internal}
     (nil))
(call_insn 656 655 657 75 (call (mem:QI (symbol_ref:DI ("_Z12cond_exit_03Pci") [flags 0x41]  <function_decl 0x7f043e2671b0 cond_exit_03>) [0 cond_exit_03 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:647 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       76 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       73
;;              75 (FALLTHRU)
;;              74
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 657 656 658 76 122 "" [2 uses])
(note 658 657 659 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 659 658 660 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:651 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 660 659 661 76 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 665)
            (pc))) ge2fitman_sup.cpp:651 612 {*jcc_1}
     (nil)
 -> 665)
;;  succ:       77 (FALLTHRU)
;;              78
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       76 (FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 386
(note 661 660 662 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 662 661 663 77 (set (reg:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])) ge2fitman_sup.cpp:652 89 {*movdi_internal}
     (nil))
(insn 663 662 664 77 (set (reg:DI 5 di)
        (reg:DI 0 ax [386])) ge2fitman_sup.cpp:652 89 {*movdi_internal}
     (nil))
(call_insn 664 663 665 77 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f043f4df1b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:652 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       78 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 78, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       61
;;              76
;;              77 (FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 665 664 666 78 114 "" [2 uses])
(note 666 665 667 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 667 666 668 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 0 [0]))) ge2fitman_sup.cpp:656 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 668 667 669 78 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 672)
            (pc))) ge2fitman_sup.cpp:656 612 {*jcc_1}
     (nil)
 -> 672)
;;  succ:       80
;;              79 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 79, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78 (FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 669 668 670 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 670 669 671 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 2 [0x2]))) ge2fitman_sup.cpp:656 7 {*cmpsi_1}
     (nil))
(jump_insn 671 670 672 79 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 897)
            (pc))) ge2fitman_sup.cpp:656 612 {*jcc_1}
     (nil)
 -> 897)
;;  succ:       80 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 80, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       78
;;              79 (FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 236 387
(code_label 672 671 673 80 123 "" [1 uses])
(note 673 672 674 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 674 673 675 80 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:658 89 {*movdi_internal}
     (nil))
(insn 675 674 676 80 (parallel [
            (set (reg:DI 0 ax [387])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:660 218 {*adddi_1}
     (nil))
(insn 676 675 677 80 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC90") [flags 0x2]  <var_decl 0x7f043dff2090 *.LC90>)) ge2fitman_sup.cpp:660 89 {*movdi_internal}
     (nil))
(insn 677 676 678 80 (set (reg:DI 5 di)
        (reg:DI 0 ax [387])) ge2fitman_sup.cpp:660 89 {*movdi_internal}
     (nil))
(call_insn/i 678 677 680 80 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:660 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 680 678 681 80 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:236 D.25623 ] [236])
            (const_int 0 [0]))) ge2fitman_sup.cpp:660 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 681 680 682 80 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 741)
            (pc))) ge2fitman_sup.cpp:660 612 {*jcc_1}
     (nil)
 -> 741)
;;  succ:       81 (FALLTHRU)
;;              86
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 81, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80 (FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 237 388
(note 682 681 683 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 683 682 684 81 (parallel [
            (set (reg:DI 0 ax [388])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:661 218 {*adddi_1}
     (nil))
(insn 684 683 685 81 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC91") [flags 0x2]  <var_decl 0x7f043dff2120 *.LC91>)) ge2fitman_sup.cpp:661 89 {*movdi_internal}
     (nil))
(insn 685 684 686 81 (set (reg:DI 5 di)
        (reg:DI 0 ax [388])) ge2fitman_sup.cpp:661 89 {*movdi_internal}
     (nil))
(call_insn/i 686 685 688 81 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:661 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 688 686 689 81 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:237 D.25623 ] [237])
            (const_int 0 [0]))) ge2fitman_sup.cpp:661 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 689 688 690 81 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 703)
            (pc))) ge2fitman_sup.cpp:661 612 {*jcc_1}
     (nil)
 -> 703)
;;  succ:       82 (FALLTHRU)
;;              83
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 82, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81 (FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 239 389 390 393 394
(note 690 689 691 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 691 690 692 82 (set (reg:SI 0 ax [orig:238 D.25623 ] [238])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:662 90 {*movsi_internal}
     (nil))
(insn 692 691 693 82 (parallel [
            (set (reg:SI 0 ax [orig:239 D.25623 ] [239])
                (plus:SI (reg:SI 0 ax [orig:238 D.25623 ] [238])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:662 217 {*addsi_1}
     (nil))
(insn 693 692 694 82 (set (reg:DI 0 ax [389])
        (sign_extend:DI (reg:SI 0 ax [orig:239 D.25623 ] [239]))) ge2fitman_sup.cpp:662 142 {*extendsidi2_rex64}
     (nil))
(insn 694 693 698 82 (parallel [
            (set (reg:DI 1 dx [390])
                (plus:DI (reg:DI 0 ax [389])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:662 218 {*adddi_1}
     (nil))
(insn 698 694 699 82 (set (reg/f:DI 0 ax [394])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:662 89 {*movdi_internal}
     (nil))
(insn 699 698 700 82 (parallel [
            (set (reg:DI 0 ax [393])
                (plus:DI (reg/f:DI 0 ax [394])
                    (reg:DI 1 dx [390])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:662 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [390]))
        (nil)))
(insn 700 699 884 82 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [393])) ge2fitman_sup.cpp:662 89 {*movdi_internal}
     (nil))
(jump_insn 884 700 885 82 (set (pc)
        (label_ref 796)) 654 {jump}
     (nil)
 -> 796)
;;  succ:       91 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 885 884 703)
;; basic block 83, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 82, next block 84, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       81
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 240 395
(code_label 703 885 704 83 126 "" [1 uses])
(note 704 703 705 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 705 704 706 83 (parallel [
            (set (reg:DI 0 ax [395])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:663 218 {*adddi_1}
     (nil))
(insn 706 705 707 83 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC92") [flags 0x2]  <var_decl 0x7f043dff21b0 *.LC92>)) ge2fitman_sup.cpp:663 89 {*movdi_internal}
     (nil))
(insn 707 706 708 83 (set (reg:DI 5 di)
        (reg:DI 0 ax [395])) ge2fitman_sup.cpp:663 89 {*movdi_internal}
     (nil))
(call_insn/i 708 707 710 83 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:663 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 710 708 711 83 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:240 D.25623 ] [240])
            (const_int 0 [0]))) ge2fitman_sup.cpp:663 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 711 710 712 83 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 725)
            (pc))) ge2fitman_sup.cpp:663 612 {*jcc_1}
     (nil)
 -> 725)
;;  succ:       84 (FALLTHRU)
;;              85
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 84, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 83, next block 85, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83 (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 241 242 396 397 400 401
(note 712 711 713 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 713 712 714 84 (set (reg:SI 0 ax [orig:241 D.25623 ] [241])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:664 90 {*movsi_internal}
     (nil))
(insn 714 713 715 84 (parallel [
            (set (reg:SI 0 ax [orig:242 D.25623 ] [242])
                (plus:SI (reg:SI 0 ax [orig:241 D.25623 ] [241])
                    (const_int -6 [0xfffffffffffffffa])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:664 217 {*addsi_1}
     (nil))
(insn 715 714 716 84 (set (reg:DI 0 ax [396])
        (sign_extend:DI (reg:SI 0 ax [orig:242 D.25623 ] [242]))) ge2fitman_sup.cpp:664 142 {*extendsidi2_rex64}
     (nil))
(insn 716 715 720 84 (parallel [
            (set (reg:DI 1 dx [397])
                (plus:DI (reg:DI 0 ax [396])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:664 218 {*adddi_1}
     (nil))
(insn 720 716 721 84 (set (reg/f:DI 0 ax [401])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:664 89 {*movdi_internal}
     (nil))
(insn 721 720 722 84 (parallel [
            (set (reg:DI 0 ax [400])
                (plus:DI (reg/f:DI 0 ax [401])
                    (reg:DI 1 dx [397])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:664 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [397]))
        (nil)))
(insn 722 721 886 84 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [400])) ge2fitman_sup.cpp:664 89 {*movdi_internal}
     (nil))
(jump_insn 886 722 887 84 (set (pc)
        (label_ref 796)) 654 {jump}
     (nil)
 -> 796)
;;  succ:       91 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 887 886 725)
;; basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 84, next block 86, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       83
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243 244 402 403 406 407
(code_label 725 887 726 85 128 "" [1 uses])
(note 726 725 727 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(insn 727 726 728 85 (set (reg:SI 0 ax [orig:243 D.25623 ] [243])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:666 90 {*movsi_internal}
     (nil))
(insn 728 727 729 85 (parallel [
            (set (reg:SI 0 ax [orig:244 D.25623 ] [244])
                (plus:SI (reg:SI 0 ax [orig:243 D.25623 ] [243])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:666 217 {*addsi_1}
     (nil))
(insn 729 728 730 85 (set (reg:DI 0 ax [402])
        (sign_extend:DI (reg:SI 0 ax [orig:244 D.25623 ] [244]))) ge2fitman_sup.cpp:666 142 {*extendsidi2_rex64}
     (nil))
(insn 730 729 734 85 (parallel [
            (set (reg:DI 1 dx [403])
                (plus:DI (reg:DI 0 ax [402])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:666 218 {*adddi_1}
     (nil))
(insn 734 730 735 85 (set (reg/f:DI 0 ax [407])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:666 89 {*movdi_internal}
     (nil))
(insn 735 734 736 85 (parallel [
            (set (reg:DI 0 ax [406])
                (plus:DI (reg/f:DI 0 ax [407])
                    (reg:DI 1 dx [403])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:666 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [403]))
        (nil)))
(insn 736 735 888 85 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [406])) ge2fitman_sup.cpp:666 89 {*movdi_internal}
     (nil))
(jump_insn 888 736 889 85 (set (pc)
        (label_ref 796)) 654 {jump}
     (nil)
 -> 796)
;;  succ:       91 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 889 888 741)
;; basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 85, next block 87, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       80
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 245 408
(code_label 741 889 742 86 125 "" [1 uses])
(note 742 741 743 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn 743 742 744 86 (parallel [
            (set (reg:DI 0 ax [408])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:669 218 {*adddi_1}
     (nil))
(insn 744 743 745 86 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC91") [flags 0x2]  <var_decl 0x7f043dff2120 *.LC91>)) ge2fitman_sup.cpp:669 89 {*movdi_internal}
     (nil))
(insn 745 744 746 86 (set (reg:DI 5 di)
        (reg:DI 0 ax [408])) ge2fitman_sup.cpp:669 89 {*movdi_internal}
     (nil))
(call_insn/i 746 745 748 86 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:669 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 748 746 749 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:245 D.25623 ] [245])
            (const_int 0 [0]))) ge2fitman_sup.cpp:669 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 749 748 750 86 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 763)
            (pc))) ge2fitman_sup.cpp:669 612 {*jcc_1}
     (nil)
 -> 763)
;;  succ:       87 (FALLTHRU)
;;              88
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 86, next block 88, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86 (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 246 247 409 410 413 414
(note 750 749 751 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(insn 751 750 752 87 (set (reg:SI 0 ax [orig:246 D.25623 ] [246])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:670 90 {*movsi_internal}
     (nil))
(insn 752 751 753 87 (parallel [
            (set (reg:SI 0 ax [orig:247 D.25623 ] [247])
                (plus:SI (reg:SI 0 ax [orig:246 D.25623 ] [246])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:670 217 {*addsi_1}
     (nil))
(insn 753 752 754 87 (set (reg:DI 0 ax [409])
        (sign_extend:DI (reg:SI 0 ax [orig:247 D.25623 ] [247]))) ge2fitman_sup.cpp:670 142 {*extendsidi2_rex64}
     (nil))
(insn 754 753 758 87 (parallel [
            (set (reg:DI 1 dx [410])
                (plus:DI (reg:DI 0 ax [409])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:670 218 {*adddi_1}
     (nil))
(insn 758 754 759 87 (set (reg/f:DI 0 ax [414])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:670 89 {*movdi_internal}
     (nil))
(insn 759 758 760 87 (parallel [
            (set (reg:DI 0 ax [413])
                (plus:DI (reg/f:DI 0 ax [414])
                    (reg:DI 1 dx [410])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:670 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [410]))
        (nil)))
(insn 760 759 890 87 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [413])) ge2fitman_sup.cpp:670 89 {*movdi_internal}
     (nil))
(jump_insn 890 760 891 87 (set (pc)
        (label_ref 796)) 654 {jump}
     (nil)
 -> 796)
;;  succ:       91 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 891 890 763)
;; basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 87, next block 89, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       86
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 248 415
(code_label 763 891 764 88 130 "" [1 uses])
(note 764 763 765 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn 765 764 766 88 (parallel [
            (set (reg:DI 0 ax [415])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:671 218 {*adddi_1}
     (nil))
(insn 766 765 767 88 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC92") [flags 0x2]  <var_decl 0x7f043dff21b0 *.LC92>)) ge2fitman_sup.cpp:671 89 {*movdi_internal}
     (nil))
(insn 767 766 768 88 (set (reg:DI 5 di)
        (reg:DI 0 ax [415])) ge2fitman_sup.cpp:671 89 {*movdi_internal}
     (nil))
(call_insn/i 768 767 770 88 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f043f6a2360 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:671 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 770 768 771 88 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:248 D.25623 ] [248])
            (const_int 0 [0]))) ge2fitman_sup.cpp:671 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 771 770 772 88 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 785)
            (pc))) ge2fitman_sup.cpp:671 612 {*jcc_1}
     (nil)
 -> 785)
;;  succ:       89 (FALLTHRU)
;;              90
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 88, next block 90, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88 (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 249 250 416 417 420 421
(note 772 771 773 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(insn 773 772 774 89 (set (reg:SI 0 ax [orig:249 D.25623 ] [249])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:672 90 {*movsi_internal}
     (nil))
(insn 774 773 775 89 (parallel [
            (set (reg:SI 0 ax [orig:250 D.25623 ] [250])
                (plus:SI (reg:SI 0 ax [orig:249 D.25623 ] [249])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:672 217 {*addsi_1}
     (nil))
(insn 775 774 776 89 (set (reg:DI 0 ax [416])
        (sign_extend:DI (reg:SI 0 ax [orig:250 D.25623 ] [250]))) ge2fitman_sup.cpp:672 142 {*extendsidi2_rex64}
     (nil))
(insn 776 775 780 89 (parallel [
            (set (reg:DI 1 dx [417])
                (plus:DI (reg:DI 0 ax [416])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:672 218 {*adddi_1}
     (nil))
(insn 780 776 781 89 (set (reg/f:DI 0 ax [421])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:672 89 {*movdi_internal}
     (nil))
(insn 781 780 782 89 (parallel [
            (set (reg:DI 0 ax [420])
                (plus:DI (reg/f:DI 0 ax [421])
                    (reg:DI 1 dx [417])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:672 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [417]))
        (nil)))
(insn 782 781 892 89 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [420])) ge2fitman_sup.cpp:672 89 {*movdi_internal}
     (nil))
(jump_insn 892 782 893 89 (set (pc)
        (label_ref 796)) 654 {jump}
     (nil)
 -> 796)
;;  succ:       91 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 893 892 785)
;; basic block 90, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 89, next block 91, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       88
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 251 422 423 426 427
(code_label 785 893 786 90 131 "" [1 uses])
(note 786 785 787 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn 787 786 788 90 (set (reg:SI 0 ax [orig:251 D.25623 ] [251])
        (mem/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -76 [0xffffffffffffffb4])) [0 filename_length+4 S4 A32])) ge2fitman_sup.cpp:674 90 {*movsi_internal}
     (nil))
(insn 788 787 789 90 (set (reg:DI 0 ax [422])
        (sign_extend:DI (reg:SI 0 ax [orig:251 D.25623 ] [251]))) ge2fitman_sup.cpp:674 142 {*extendsidi2_rex64}
     (nil))
(insn 789 788 793 90 (parallel [
            (set (reg:DI 1 dx [423])
                (plus:DI (reg:DI 0 ax [422])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:674 218 {*adddi_1}
     (nil))
(insn 793 789 794 90 (set (reg/f:DI 0 ax [427])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:674 89 {*movdi_internal}
     (nil))
(insn 794 793 795 90 (parallel [
            (set (reg:DI 0 ax [426])
                (plus:DI (reg/f:DI 0 ax [427])
                    (reg:DI 1 dx [423])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:674 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (reg:DI 1 dx [423]))
        (nil)))
(insn 795 794 796 90 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])
        (reg:DI 0 ax [426])) ge2fitman_sup.cpp:674 89 {*movdi_internal}
     (nil))
;;  succ:       91 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 91, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 90, next block 92, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       84 [100.0%] 
;;              85 [100.0%] 
;;              87 [100.0%] 
;;              90 (FALLTHRU)
;;              82 [100.0%] 
;;              89 [100.0%] 
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 428
(code_label 796 795 797 91 129 "" [5 uses])
(note 797 796 798 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn 798 797 799 91 (set (reg/f:DI 0 ax [428])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 fname_suffix+0 S8 A64])) ge2fitman_sup.cpp:678 89 {*movdi_internal}
     (nil))
(insn 799 798 928 91 (set (reg:DI 2 cx [450])
        (const_int 8386094131808466271 [0x7461642e736e755f])) ge2fitman_sup.cpp:678 89 {*movdi_internal}
     (nil))
(insn 928 799 800 91 (set (mem:DI (reg/f:DI 0 ax [428]) [0 MEM[(void *)fname_suffix_4]+0 S8 A8])
        (reg:DI 2 cx [450])) ge2fitman_sup.cpp:678 89 {*movdi_internal}
     (nil))
(insn 800 928 801 91 (set (mem:QI (plus:DI (reg/f:DI 0 ax [428])
                (const_int 8 [0x8])) [0 MEM[(void *)fname_suffix_4]+8 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:678 93 {*movqi_internal}
     (nil))
(insn 801 800 802 91 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])
            (const_int 2 [0x2]))) ge2fitman_sup.cpp:680 7 {*cmpsi_1}
     (nil))
(jump_insn 802 801 803 91 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 897)
            (pc))) ge2fitman_sup.cpp:680 612 {*jcc_1}
     (nil)
 -> 897)
;;  succ:       92 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 92, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 91, next block 93, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       91 (FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 252 429
(note 803 802 804 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(insn 804 803 805 92 (set (reg:QI 0 ax [429])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])) ge2fitman_sup.cpp:682 93 {*movqi_internal}
     (nil))
(insn 805 804 806 92 (parallel [
            (set (reg:QI 0 ax [orig:252 D.25625 ] [252])
                (xor:QI (reg:QI 0 ax [429])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:682 406 {*xorqi_1}
     (expr_list:REG_EQUAL (xor:QI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -124 [0xffffffffffffff84])) [0 overwrite+0 S1 A32])
            (const_int 1 [0x1]))
        (nil)))
(insn 806 805 807 92 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:252 D.25625 ] [252])
            (const_int 0 [0]))) ge2fitman_sup.cpp:682 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 807 806 808 92 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 827)
            (pc))) ge2fitman_sup.cpp:682 612 {*jcc_1}
     (nil)
 -> 827)
;;  succ:       93 (FALLTHRU)
;;              95
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 93, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 92, next block 94, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       92 (FALLTHRU)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 253 254 255 430
(note 808 807 809 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn 809 808 810 93 (set (reg/f:DI 0 ax [430])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(insn 810 809 811 93 (parallel [
            (set (reg/f:DI 0 ax [orig:253 D.25621 ] [253])
                (plus:DI (reg/f:DI 0 ax [430])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:684 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 811 810 812 93 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC93") [flags 0x2]  <var_decl 0x7f043dff2240 *.LC93>)) ge2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(insn 812 811 813 93 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:253 D.25621 ] [253])) ge2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(call_insn 813 812 815 93 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f043f4df510 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:684 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 815 813 816 93 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])
        (reg/f:DI 0 ax [orig:254 D.25626 ] [254])) ge2fitman_sup.cpp:684 89 {*movdi_internal}
     (nil))
(insn 816 815 817 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:684 4 {*cmpdi_ccno_1}
     (nil))
(insn 817 816 818 93 (set (reg:QI 0 ax [orig:255 D.25625 ] [255])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) ge2fitman_sup.cpp:684 607 {*setcc_qi}
     (nil))
(insn 818 817 819 93 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:255 D.25625 ] [255])
            (const_int 0 [0]))) ge2fitman_sup.cpp:684 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 819 818 820 93 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 827)
            (pc))) ge2fitman_sup.cpp:684 612 {*jcc_1}
     (nil)
 -> 827)
;;  succ:       94 (FALLTHRU)
;;              95
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 94, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 93, next block 95, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       93 (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 256 431 432
(note 820 819 821 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(insn 821 820 822 94 (set (reg/f:DI 0 ax [431])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])) ge2fitman_sup.cpp:688 89 {*movdi_internal}
     (nil))
(insn 822 821 823 94 (parallel [
            (set (reg/f:DI 1 dx [orig:256 D.25621 ] [256])
                (plus:DI (reg/f:DI 0 ax [431])
                    (const_int 768 [0x300])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:688 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -120 [0xffffffffffffff88])) [0 io_filenames+0 S8 A64])
            (const_int 768 [0x300]))
        (nil)))
(insn 823 822 824 94 (set (reg:SI 0 ax [432])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 s_u_out+0 S4 A32])) ge2fitman_sup.cpp:688 90 {*movsi_internal}
     (nil))
(insn 824 823 825 94 (set (reg:SI 4 si)
        (reg:SI 0 ax [432])) ge2fitman_sup.cpp:688 90 {*movsi_internal}
     (nil))
(insn 825 824 826 94 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:256 D.25621 ] [256])) ge2fitman_sup.cpp:688 89 {*movdi_internal}
     (nil))
(call_insn 826 825 827 94 (call (mem:QI (symbol_ref:DI ("_Z12cond_exit_03Pci") [flags 0x41]  <function_decl 0x7f043e2671b0 cond_exit_03>) [0 cond_exit_03 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:688 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       95 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 95, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 94, next block 96, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       92
;;              94 (FALLTHRU)
;;              93
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 827 826 828 95 132 "" [2 uses])
(note 828 827 829 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn 829 828 830 95 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:693 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 830 829 831 95 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 897)
            (pc))) ge2fitman_sup.cpp:693 612 {*jcc_1}
     (nil)
 -> 897)
;;  succ:       96 (FALLTHRU)
;;              100
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 95, next block 100, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       95 (FALLTHRU)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 433
(note 831 830 832 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn 832 831 833 96 (set (reg:DI 0 ax [433])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 check_file+0 S8 A64])) ge2fitman_sup.cpp:694 89 {*movdi_internal}
     (nil))
(insn 833 832 834 96 (set (reg:DI 5 di)
        (reg:DI 0 ax [433])) ge2fitman_sup.cpp:694 89 {*movdi_internal}
     (nil))
(call_insn 834 833 897 96 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f043f4df1b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:694 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       100 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 100, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 96, next block 97, flags: (NEW, RTL, MODIFIED)
;;  pred:       79
;;              95
;;              96 [100.0%]  (FALLTHRU)
;;              91
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 897 834 896 100 134 "" [3 uses])
(note 896 897 898 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(insn 898 896 837 100 (const_int 0 [0]) ge2fitman_sup.cpp:698 684 {nop}
     (nil))
;;  succ:       97 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 97, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 100, next block 98, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       100 [100.0%]  (FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 837 898 843 97 84 "" [0 uses])
(note 843 837 838 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn 838 843 839 97 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [0 D.25627+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [435]))
        ]) ge2fitman_sup.cpp:698 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 839 838 844 97 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 842)
            (pc))) ge2fitman_sup.cpp:698 612 {*jcc_1}
     (nil)
 -> 842)
;;  succ:       99
;;              98 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 98, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 97, next block 99, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       97 (FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 844 839 840 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(call_insn 840 844 841 98 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f043e2c21b0 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:698 660 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 841 840 842)
;; basic block 99, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 98, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       97
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 842 841 845 99 133 "" [1 uses])
(note 845 842 899 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 899 845 0 NOTE_INSN_DELETED)

;; Function void infile_stats(Procpar_info*, InFile_struct*, Data_file_header*) (_Z12infile_statsP12Procpar_infoP13InFile_structP16Data_file_header, funcdef_no=1031, decl_uid=24484, cgraph_uid=236, symbol_order=237)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 24:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 30:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 42:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 45:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 55:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 61:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 73:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 82:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 92:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=139 from oldreg=125, assigning class GENERAL_REGS to r139
   92: {r139:DI=r139:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  152: r139:DI=r96:DI
    Inserting insn reload after:
  153: r125:DI=r139:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 97:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 102:  (0) =rm  (1) 0  (2) cJ {*lshrdi3_1}
      Creating newreg=140 from oldreg=129, assigning class GENERAL_REGS to r140
  102: {r140:DI=r140:DI 0>>0x3f;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  154: r140:DI=r98:DI
    Inserting insn reload after:
  155: r129:DI=r140:DI

          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 103
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) cJ {*ashrdi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 115
	 Choosing alt 2 in insn 115:  (0) r  (1) 0  (2) mr {*muldi3_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 117:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 123:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 130:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=141 from oldreg=107, assigning class GENERAL_REGS to r141
  130: {r141:SI=r141:SI-r106:SI;clobber flags:CC;}
      REG_DEAD r106:SI
      REG_DEAD r105:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  156: r141:SI=r105:SI
    Inserting insn reload after:
  157: r107:SI=r141:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 133:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 139:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 141:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 148: point = 0
   Insn 145: point = 0
   Insn 144: point = 0
   Insn 143: point = 1
   Insn 142: point = 2
   Insn 141: point = 2
   Insn 140: point = 2
   Insn 139: point = 2
   Insn 138: point = 2
   Insn 137: point = 2
   Insn 136: point = 3
   Insn 135: point = 5
   Insn 134: point = 6
   Insn 133: point = 6
   Insn 132: point = 6
   Insn 131: point = 6
   Insn 157: point = 7
	Hard reg 0 is preferable by r141 with profit 1
   Insn 130: point = 9
   Insn 156: point = 10
	Hard reg 0 is preferable by r141 with profit 1
	Hard reg 1 is preferable by r141 with profit 1
   Insn 129: point = 12
   Insn 128: point = 14
   Insn 127: point = 15
   Insn 126: point = 17
   Insn 125: point = 18
   Insn 124: point = 18
   Insn 123: point = 18
   Insn 122: point = 18
   Insn 121: point = 19
   Insn 120: point = 21
   Insn 119: point = 22
   Insn 118: point = 22
   Insn 117: point = 22
   Insn 116: point = 22
   Insn 115: point = 23
   Insn 114: point = 25
   Insn 113: point = 27
   Insn 112: point = 28
   Insn 111: point = 30
   Insn 110: point = 32
   Insn 109: point = 33
   Insn 108: point = 33
   Insn 107: point = 33
   Insn 106: point = 33
   Insn 105: point = 34
   Insn 104: point = 36
   Insn 103: point = 38
   Insn 155: point = 40
	Hard reg 1 is preferable by r140 with profit 1
   Insn 102: point = 42
   Insn 154: point = 42
   Insn 101: point = 43
   Insn 100: point = 45
   Insn 99: point = 46
   Insn 98: point = 46
   Insn 97: point = 46
   Insn 96: point = 46
   Insn 95: point = 47
   Insn 94: point = 49
   Insn 93: point = 51
   Insn 153: point = 53
	Hard reg 1 is preferable by r139 with profit 1
   Insn 92: point = 55
   Insn 152: point = 55
   Insn 91: point = 56
   Insn 90: point = 58
   Insn 89: point = 59
   Insn 88: point = 59
   Insn 87: point = 59
   Insn 86: point = 59
   Insn 85: point = 60
   Insn 84: point = 62
   Insn 83: point = 63
   Insn 82: point = 63
   Insn 81: point = 63
   Insn 80: point = 63
   Insn 79: point = 63
   Insn 78: point = 63
   Insn 77: point = 64
   Insn 76: point = 66
   Insn 75: point = 67
   Insn 74: point = 67
   Insn 73: point = 67
   Insn 72: point = 67
   Insn 71: point = 68
   Insn 70: point = 70
   Insn 69: point = 71
   Insn 68: point = 71
   Insn 67: point = 71
   Insn 66: point = 71
   Insn 65: point = 72
   Insn 64: point = 74
   Insn 63: point = 75
   Insn 62: point = 75
   Insn 61: point = 75
   Insn 60: point = 75
   Insn 59: point = 76
   Insn 58: point = 78
   Insn 57: point = 79
   Insn 56: point = 79
   Insn 55: point = 79
   Insn 54: point = 79
   Insn 53: point = 80
   Insn 52: point = 81
   Insn 51: point = 81
  BB 3
   Insn 37: point = 81
   Insn 36: point = 81
  BB 4
   Insn 149: point = 81
   Insn 45: point = 81
   Insn 44: point = 82
   Insn 43: point = 83
   Insn 42: point = 83
   Insn 41: point = 83
   Insn 40: point = 83
   Insn 39: point = 84
  BB 2
   Insn 34: point = 85
   Insn 33: point = 86
   Insn 32: point = 87
   Insn 31: point = 87
   Insn 30: point = 88
   Insn 29: point = 88
   Insn 28: point = 89
   Insn 27: point = 89
   Insn 26: point = 90
   Insn 25: point = 91
   Insn 24: point = 92
   Insn 23: point = 94
   Insn 22: point = 95
   Insn 21: point = 96
   Insn 20: point = 97
   Insn 19: point = 98
   Insn 18: point = 99
   Insn 17: point = 99
   Insn 16: point = 100
   Insn 15: point = 102
   Insn 14: point = 103
   Insn 13: point = 103
   Insn 12: point = 104
   Insn 11: point = 106
   Insn 10: point = 107
   Insn 9: point = 107
   Insn 8: point = 107
   Insn 4: point = 107
   Insn 3: point = 107
   Insn 2: point = 107
 r87: [103..104]
 r88: [101..102]
 r89: [99..100]
 r90: [90..92]
 r91: [75..76]
 r92: [71..72]
 r93: [67..68]
 r94: [63..64]
 r95: [59..60]
 r96: [52..56]
 r97: [46..47]
 r98: [39..43]
 r99: [33..34]
 r100: [29..30]
 r101: [24..28]
 r102: [24..25]
 r103: [22..23]
 r104: [18..19]
 r105: [11..15]
 r106: [9..12]
 r107: [6..7]
 r108: [2..3]
 r109: [105..106]
 r110: [97..98]
 r111: [95..96]
 r112: [93..94]
 r113: [89..91]
 r114: [87..88]
 r115: [85..86]
 r116: [83..84]
 r117: [81..82]
 r118: [79..80]
 r119: [77..78]
 r120: [73..74]
 r121: [69..70]
 r122: [65..66]
 r123: [61..62]
 r124: [57..58]
 r125: [52..53]
 r126: [50..51]
 r127: [48..49]
 r128: [44..45]
 r129: [39..40]
 r130: [37..38]
 r131: [35..36]
 r132: [31..32]
 r133: [26..27]
 r134: [20..21]
 r135: [16..17]
 r136: [13..14]
 r137: [4..5]
 r138: [0..1]
 r139: [54..55]
 r140: [41..42]
 r141: [8..10]
Compressing live ranges: from 107 to 100 - 93%
Ranges after the compression:
 r87: [96..97]
 r88: [94..95]
 r89: [92..93]
 r90: [84..85]
 r91: [70..71]
 r92: [66..67]
 r93: [62..63]
 r94: [58..59]
 r95: [54..55]
 r96: [48..51]
 r97: [42..43]
 r98: [36..39]
 r99: [30..31]
 r100: [26..27]
 r101: [22..25]
 r102: [22..23]
 r103: [20..21]
 r104: [16..17]
 r105: [10..13]
 r106: [8..11]
 r107: [6..7]
 r108: [2..3]
 r109: [98..99]
 r110: [90..91]
 r111: [88..89]
 r112: [86..87]
 r113: [84..85]
 r114: [82..83]
 r115: [80..81]
 r116: [78..79]
 r117: [76..77]
 r118: [74..75]
 r119: [72..73]
 r120: [68..69]
 r121: [64..65]
 r122: [60..61]
 r123: [56..57]
 r124: [52..53]
 r125: [48..49]
 r126: [46..47]
 r127: [44..45]
 r128: [40..41]
 r129: [36..37]
 r130: [34..35]
 r131: [32..33]
 r132: [28..29]
 r133: [24..25]
 r134: [18..19]
 r135: [14..15]
 r136: [12..13]
 r137: [4..5]
 r138: [0..1]
 r139: [50..51]
 r140: [38..39]
 r141: [8..9]

********** Assignment #1: **********

	 Assigning to 139 (cl=GENERAL_REGS, orig=125, freq=3, tfirst=139, tfreq=3)...
	   Assign 1 to reload r139 (freq=3)
	 Assigning to 140 (cl=GENERAL_REGS, orig=129, freq=3, tfirst=140, tfreq=3)...
	   Assign 1 to reload r140 (freq=3)
	 Assigning to 141 (cl=GENERAL_REGS, orig=107, freq=3, tfirst=141, tfreq=3)...
	   Assign 1 to reload r141 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 26
changing reg in insn 59
changing reg in insn 60
changing reg in insn 65
changing reg in insn 66
changing reg in insn 71
changing reg in insn 72
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 91
changing reg in insn 95
changing reg in insn 96
changing reg in insn 101
changing reg in insn 105
changing reg in insn 106
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 121
changing reg in insn 122
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 136
changing reg in insn 137
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 44
changing reg in insn 45
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 70
changing reg in insn 71
changing reg in insn 76
changing reg in insn 77
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 120
changing reg in insn 121
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 135
changing reg in insn 136
changing reg in insn 143
changing reg in insn 144
deleting insn with uid = 15.
deleting insn with uid = 19.
deleting insn with uid = 33.
deleting insn with uid = 44.
deleting insn with uid = 153.
deleting insn with uid = 95.
deleting insn with uid = 155.
deleting insn with uid = 105.
deleting insn with uid = 156.
starting the processing of deferred insns
ending the processing of deferred insns


void infile_stats(Procpar_info*, InFile_struct*, Data_file_header*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={75d,59u} r1={30d,9u} r2={22d} r4={37d,16u} r5={43d,22u} r6={1d,38u} r7={1d,26u} r8={21d} r9={21d} r10={21d} r11={21d} r12={21d} r13={21d} r14={21d} r15={21d} r17={34d,1u} r18={21d} r19={21d} r20={1d,1u,3e} r21={22d} r22={22d} r23={22d} r24={22d} r25={22d} r26={22d} r27={22d} r28={22d} r29={21d} r30={21d} r31={21d} r32={21d} r33={21d} r34={21d} r35={21d} r36={21d} r37={22d} r38={22d} r39={21d} r40={21d} r45={21d} r46={21d} r47={21d} r48={21d} r49={21d} r50={21d} r51={21d} r52={21d} r53={21d} r54={21d} r55={21d} r56={21d} r57={21d} r58={21d} r59={21d} r60={21d} r61={21d} r62={21d} r63={21d} r64={21d} r65={21d} r66={21d} r67={21d} r68={21d} r69={21d} r70={21d} r71={21d} r72={21d} r73={21d} r74={21d} r75={21d} r76={21d} r77={21d} r78={21d} r79={21d} r80={21d} 
;;    total ref usage 1815{1640d,172u,3e} in 133{112 regular + 21 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 109 110 111 112 113 114 115
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
        (reg:DI 5 di [ procpar_info ])) ge2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])
        (reg:DI 4 si [ infile_struct ])) ge2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])
        (reg:DI 1 dx [ main_header ])) ge2fitman_sup.cpp:704 89 {*movdi_internal}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:706 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:707 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])
        (const_int 0 [0])) ge2fitman_sup.cpp:708 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (parallel [
            (set (reg/f:DI 0 ax [orig:87 D.25632 ] [87])
                (plus:DI (reg/f:DI 0 ax [109])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:711 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 D.25632 ] [87])) ge2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(call_insn/i 14 13 16 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f043f6a40d8 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:711 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 16 14 17 2 (parallel [
            (set (reg:DI 0 ax [orig:89 D.25633 ] [89])
                (plus:DI (reg:DI 0 ax [orig:88 D.25633 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:711 218 {*adddi_1}
     (nil))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:89 D.25633 ] [89])) ge2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(call_insn 18 17 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f043f6d8a20 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:711 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 18 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg/f:DI 0 ax [110])) ge2fitman_sup.cpp:711 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) ge2fitman_sup.cpp:712 89 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])
        (reg/f:DI 0 ax [111])) ge2fitman_sup.cpp:712 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:715 89 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (parallel [
            (set (reg/f:DI 1 dx [orig:90 D.25632 ] [90])
                (plus:DI (reg/f:DI 0 ax [112])
                    (const_int 56 [0x38])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:715 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])
            (const_int 56 [0x38]))
        (nil)))
(insn 25 24 26 2 (set (reg:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) ge2fitman_sup.cpp:715 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 4 si)
        (reg/f:DI 1 dx [orig:90 D.25632 ] [90])) ge2fitman_sup.cpp:715 89 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) ge2fitman_sup.cpp:715 89 {*movdi_internal}
     (nil))
(call_insn 28 27 29 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcpy") [flags 0x41]  <function_decl 0x7f043f6a25e8 strcpy>) [0 __builtin_strcpy S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:715 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 29 28 30 2 (set (reg:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) ge2fitman_sup.cpp:716 89 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC94") [flags 0x2]  <var_decl 0x7f043e02cd80 *.LC94>)) ge2fitman_sup.cpp:716 89 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [114])) ge2fitman_sup.cpp:716 89 {*movdi_internal}
     (nil))
(call_insn 32 31 34 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f043f552510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:716 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 34 32 46 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg:DI 0 ax [115])) ge2fitman_sup.cpp:716 89 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 46 34 35 3 137 "" [1 uses])
(note 35 46 36 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
            (const_int 0 [0]))) ge2fitman_sup.cpp:717 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 37 36 38 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) ge2fitman_sup.cpp:717 612 {*jcc_1}
     (nil)
 -> 49)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 116 117
(note 38 37 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 4 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])) ge2fitman_sup.cpp:718 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])
        (reg/f:DI 0 ax [116])) ge2fitman_sup.cpp:718 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC94") [flags 0x2]  <var_decl 0x7f043e02cd80 *.LC94>)) ge2fitman_sup.cpp:719 89 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 5 di)
        (const_int 0 [0])) ge2fitman_sup.cpp:719 89 {*movdi_internal}
     (nil))
(call_insn 43 42 45 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strtok") [flags 0x41]  <function_decl 0x7f043f552510 strtok>) [0 strtok S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:719 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 45 43 149 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 token+0 S8 A64])
        (reg:DI 0 ax [117])) ge2fitman_sup.cpp:719 89 {*movdi_internal}
     (nil))
(jump_insn 149 45 150 4 (set (pc)
        (label_ref 46)) ge2fitman_sup.cpp:717 654 {jump}
     (nil)
 -> 46)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 150 149 49)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138
(code_label 49 150 50 5 136 "" [1 uses])
(note 50 49 51 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC95") [flags 0x2]  <var_decl 0x7f043e02ce10 *.LC95>)) ge2fitman_sup.cpp:722 89 {*movdi_internal}
     (nil))
(call_insn 52 51 53 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:722 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 54 5 (set (reg:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 filename_pointer+0 S8 A64])) ge2fitman_sup.cpp:723 89 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [118])) ge2fitman_sup.cpp:723 89 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC96") [flags 0x2]  <var_decl 0x7f043e02cea0 *.LC96>)) ge2fitman_sup.cpp:723 89 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:723 93 {*movqi_internal}
     (nil))
(call_insn 57 56 58 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:723 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 58 57 59 5 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:724 89 {*movdi_internal}
     (nil))
(insn 59 58 60 5 (parallel [
            (set (reg/f:DI 0 ax [orig:91 D.25634 ] [91])
                (plus:DI (reg/f:DI 0 ax [119])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:724 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])
            (const_int 16 [0x10]))
        (nil)))
(insn 60 59 61 5 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:91 D.25634 ] [91])) ge2fitman_sup.cpp:724 89 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC97") [flags 0x2]  <var_decl 0x7f043e02cf30 *.LC97>)) ge2fitman_sup.cpp:724 89 {*movdi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:724 93 {*movqi_internal}
     (nil))
(call_insn 63 62 64 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:724 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 64 63 65 5 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:725 89 {*movdi_internal}
     (nil))
(insn 65 64 66 5 (set (reg:SI 0 ax [orig:92 D.25635 ] [92])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [120])
                (const_int 8 [0x8])) [0 infile_struct_25(D)->file_size+0 S4 A32])) ge2fitman_sup.cpp:725 90 {*movsi_internal}
     (nil))
(insn 66 65 67 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:92 D.25635 ] [92])) ge2fitman_sup.cpp:725 90 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC98") [flags 0x2]  <var_decl 0x7f043e033000 *.LC98>)) ge2fitman_sup.cpp:725 89 {*movdi_internal}
     (nil))
(insn 68 67 69 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:725 93 {*movqi_internal}
     (nil))
(call_insn 69 68 70 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:725 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 70 69 71 5 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:726 89 {*movdi_internal}
     (nil))
(insn 71 70 72 5 (set (reg:SI 0 ax [orig:93 D.25635 ] [93])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [121])
                (const_int 508 [0x1fc])) [0 procpar_info_7(D)->num_channels+0 S4 A32])) ge2fitman_sup.cpp:726 90 {*movsi_internal}
     (nil))
(insn 72 71 73 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:93 D.25635 ] [93])) ge2fitman_sup.cpp:726 90 {*movsi_internal}
     (nil))
(insn 73 72 74 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC99") [flags 0x2]  <var_decl 0x7f043e033090 *.LC99>)) ge2fitman_sup.cpp:726 89 {*movdi_internal}
     (nil))
(insn 74 73 75 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:726 93 {*movqi_internal}
     (nil))
(call_insn 75 74 76 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:726 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 76 75 77 5 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:727 89 {*movdi_internal}
     (nil))
(insn 77 76 78 5 (set (reg:SI 0 ax [orig:94 D.25635 ] [94])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [122])
                (const_int 12 [0xc])) [0 infile_struct_25(D)->total_data_size+0 S4 A32])) ge2fitman_sup.cpp:727 90 {*movsi_internal}
     (nil))
(insn 78 77 79 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:94 D.25635 ] [94])) ge2fitman_sup.cpp:727 90 {*movsi_internal}
     (nil))
(insn 79 78 80 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC100") [flags 0x2]  <var_decl 0x7f043e033120 *.LC100>)) ge2fitman_sup.cpp:727 89 {*movdi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:727 93 {*movqi_internal}
     (nil))
(call_insn 81 80 82 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:727 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 82 81 83 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC101") [flags 0x2]  <var_decl 0x7f043e0331b0 *.LC101>)) ge2fitman_sup.cpp:728 89 {*movdi_internal}
     (nil))
(call_insn 83 82 84 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:728 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 84 83 85 5 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:729 89 {*movdi_internal}
     (nil))
(insn 85 84 86 5 (set (reg:SI 0 ax [orig:95 D.25635 ] [95])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [123])
                (const_int 324 [0x144])) [0 procpar_info_7(D)->num_points+0 S4 A32])) ge2fitman_sup.cpp:729 90 {*movsi_internal}
     (nil))
(insn 86 85 87 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:95 D.25635 ] [95])) ge2fitman_sup.cpp:729 90 {*movsi_internal}
     (nil))
(insn 87 86 88 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC102") [flags 0x2]  <var_decl 0x7f043e033240 *.LC102>)) ge2fitman_sup.cpp:729 89 {*movdi_internal}
     (nil))
(insn 88 87 89 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:729 93 {*movqi_internal}
     (nil))
(call_insn 89 88 90 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:729 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 90 89 91 5 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 91 90 152 5 (set (reg:DI 0 ax [orig:96 D.25636 ] [96])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 24 [0x18])) [0 main_header_37(D)->ebytes.number+0 S8 A64])) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 152 91 92 5 (set (reg:DI 1 dx [125])
        (reg:DI 0 ax [orig:96 D.25636 ] [96])) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 92 152 93 5 (parallel [
            (set (reg:DI 1 dx [125])
                (lshiftrt:DI (reg:DI 1 dx [125])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:730 546 {*lshrdi3_1}
     (nil))
(insn 93 92 94 5 (parallel [
            (set (reg:DI 0 ax [126])
                (plus:DI (reg:DI 0 ax [orig:96 D.25636 ] [96])
                    (reg:DI 1 dx [125])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:730 218 {*adddi_1}
     (nil))
(insn 94 93 96 5 (parallel [
            (set (reg:DI 0 ax [127])
                (ashiftrt:DI (reg:DI 0 ax [126])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:730 547 {*ashrdi3_1}
     (nil))
(insn 96 94 97 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:97 D.25636 ] [97])) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 97 96 98 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC103") [flags 0x2]  <var_decl 0x7f043e0332d0 *.LC103>)) ge2fitman_sup.cpp:730 89 {*movdi_internal}
     (nil))
(insn 98 97 99 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:730 93 {*movqi_internal}
     (nil))
(call_insn 99 98 100 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:730 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 100 99 101 5 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 101 100 154 5 (set (reg:DI 0 ax [orig:98 D.25636 ] [98])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 24 [0x18])) [0 main_header_37(D)->ebytes.number+0 S8 A64])) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 154 101 102 5 (set (reg:DI 1 dx [129])
        (reg:DI 0 ax [orig:98 D.25636 ] [98])) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 102 154 103 5 (parallel [
            (set (reg:DI 1 dx [129])
                (lshiftrt:DI (reg:DI 1 dx [129])
                    (const_int 63 [0x3f])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:731 546 {*lshrdi3_1}
     (nil))
(insn 103 102 104 5 (parallel [
            (set (reg:DI 0 ax [130])
                (plus:DI (reg:DI 0 ax [orig:98 D.25636 ] [98])
                    (reg:DI 1 dx [129])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:731 218 {*adddi_1}
     (nil))
(insn 104 103 106 5 (parallel [
            (set (reg:DI 0 ax [131])
                (ashiftrt:DI (reg:DI 0 ax [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:731 547 {*ashrdi3_1}
     (nil))
(insn 106 104 107 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:99 D.25636 ] [99])) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 107 106 108 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC104") [flags 0x2]  <var_decl 0x7f043e033360 *.LC104>)) ge2fitman_sup.cpp:731 89 {*movdi_internal}
     (nil))
(insn 108 107 109 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:731 93 {*movqi_internal}
     (nil))
(call_insn 109 108 110 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:731 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 110 109 111 5 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 procpar_info+0 S8 A64])) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 111 110 112 5 (set (reg:SI 0 ax [orig:100 D.25635 ] [100])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [132])
                (const_int 324 [0x144])) [0 procpar_info_7(D)->num_points+0 S4 A32])) ge2fitman_sup.cpp:733 90 {*movsi_internal}
     (nil))
(insn 112 111 113 5 (set (reg:DI 1 dx [orig:101 D.25636 ] [101])
        (sign_extend:DI (reg:SI 0 ax [orig:100 D.25635 ] [100]))) ge2fitman_sup.cpp:732 142 {*extendsidi2_rex64}
     (nil))
(insn 113 112 114 5 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 main_header+0 S8 A64])) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 114 113 115 5 (set (reg:DI 0 ax [orig:102 D.25636 ] [102])
        (mem/j:DI (plus:DI (reg/f:DI 0 ax [133])
                (const_int 24 [0x18])) [0 main_header_37(D)->ebytes.number+0 S8 A64])) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 115 114 116 5 (parallel [
            (set (reg:DI 0 ax [orig:103 D.25636 ] [103])
                (mult:DI (reg:DI 0 ax [orig:102 D.25636 ] [102])
                    (reg:DI 1 dx [orig:101 D.25636 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:732 306 {*muldi3_1}
     (nil))
(insn 116 115 117 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:103 D.25636 ] [103])) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 117 116 118 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC105") [flags 0x2]  <var_decl 0x7f043e0333f0 *.LC105>)) ge2fitman_sup.cpp:733 89 {*movdi_internal}
     (nil))
(insn 118 117 119 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:733 93 {*movqi_internal}
     (nil))
(call_insn 119 118 120 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:733 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 120 119 121 5 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:734 89 {*movdi_internal}
     (nil))
(insn 121 120 122 5 (set (reg:SI 0 ax [orig:104 D.25635 ] [104])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [134])
                (const_int 4 [0x4])) [0 infile_struct_25(D)->num_unsup_sets+0 S4 A32])) ge2fitman_sup.cpp:734 90 {*movsi_internal}
     (nil))
(insn 122 121 123 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:104 D.25635 ] [104])) ge2fitman_sup.cpp:734 90 {*movsi_internal}
     (nil))
(insn 123 122 124 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC106") [flags 0x2]  <var_decl 0x7f043e033480 *.LC106>)) ge2fitman_sup.cpp:734 89 {*movdi_internal}
     (nil))
(insn 124 123 125 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:734 93 {*movqi_internal}
     (nil))
(call_insn 125 124 126 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:734 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 126 125 127 5 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(insn 127 126 128 5 (set (reg:SI 1 dx [orig:105 D.25635 ] [105])
        (mem/j:SI (reg/f:DI 0 ax [135]) [0 infile_struct_25(D)->num_datasets+0 S4 A32])) ge2fitman_sup.cpp:736 90 {*movsi_internal}
     (nil))
(insn 128 127 129 5 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(insn 129 128 130 5 (set (reg:SI 0 ax [orig:106 D.25635 ] [106])
        (mem/j:SI (plus:DI (reg/f:DI 0 ax [136])
                (const_int 4 [0x4])) [0 infile_struct_25(D)->num_unsup_sets+0 S4 A32])) ge2fitman_sup.cpp:736 90 {*movsi_internal}
     (nil))
(insn 130 129 157 5 (parallel [
            (set (reg:SI 1 dx [orig:107 D.25635 ] [107])
                (minus:SI (reg:SI 1 dx [orig:107 D.25635 ] [107])
                    (reg:SI 0 ax [orig:106 D.25635 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:735 260 {*subsi_1}
     (nil))
(insn 157 130 131 5 (set (reg:SI 0 ax [orig:107 D.25635 ] [107])
        (reg:SI 1 dx [orig:107 D.25635 ] [107])) ge2fitman_sup.cpp:735 90 {*movsi_internal}
     (nil))
(insn 131 157 132 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:107 D.25635 ] [107])) ge2fitman_sup.cpp:736 90 {*movsi_internal}
     (nil))
(insn 132 131 133 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC107") [flags 0x2]  <var_decl 0x7f043e033510 *.LC107>)) ge2fitman_sup.cpp:736 89 {*movdi_internal}
     (nil))
(insn 133 132 134 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:736 93 {*movqi_internal}
     (nil))
(call_insn 134 133 135 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:736 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 135 134 136 5 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 infile_struct+0 S8 A64])) ge2fitman_sup.cpp:737 89 {*movdi_internal}
     (nil))
(insn 136 135 137 5 (set (reg:SI 0 ax [orig:108 D.25635 ] [108])
        (mem/j:SI (reg/f:DI 0 ax [137]) [0 infile_struct_25(D)->num_datasets+0 S4 A32])) ge2fitman_sup.cpp:737 90 {*movsi_internal}
     (nil))
(insn 137 136 138 5 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:108 D.25635 ] [108])) ge2fitman_sup.cpp:737 90 {*movsi_internal}
     (nil))
(insn 138 137 139 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC108") [flags 0x2]  <var_decl 0x7f043e0335a0 *.LC108>)) ge2fitman_sup.cpp:737 89 {*movdi_internal}
     (nil))
(insn 139 138 140 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:737 93 {*movqi_internal}
     (nil))
(call_insn 140 139 141 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:737 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 141 140 142 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC95") [flags 0x2]  <var_decl 0x7f043e02ce10 *.LC95>)) ge2fitman_sup.cpp:738 89 {*movdi_internal}
     (nil))
(call_insn 142 141 143 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:738 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 143 142 144 5 (set (reg:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 malloc_to_free+0 S8 A64])) ge2fitman_sup.cpp:740 89 {*movdi_internal}
     (nil))
(insn 144 143 145 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [138])) ge2fitman_sup.cpp:740 89 {*movdi_internal}
     (nil))
(call_insn 145 144 148 5 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f043f6ce1b0 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:740 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 148 145 151 5 (const_int 0 [0]) ge2fitman_sup.cpp:741 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 151 148 0 NOTE_INSN_DELETED)

;; Function void print_version() (_Z13print_versionv, funcdef_no=1032, decl_uid=24485, cgraph_uid=237, symbol_order=238)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void print_version()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={5d,1u} r1={4d} r2={4d} r4={5d,1u} r5={7d,3u} r6={1d,2u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 252{239d,13u,0e} in 9{6 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC109") [flags 0x2]  <var_decl 0x7f043e033b40 *.LC109>)) ge2fitman_sup.cpp:748 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC110") [flags 0x2]  <var_decl 0x7f043e033bd0 *.LC110>)) ge2fitman_sup.cpp:748 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:748 93 {*movqi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:748 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC111") [flags 0x2]  <var_decl 0x7f043e033c60 *.LC111>)) ge2fitman_sup.cpp:749 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:749 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC112") [flags 0x2]  <var_decl 0x7f043e033cf0 *.LC112>)) ge2fitman_sup.cpp:750 89 {*movdi_internal}
     (nil))
(call_insn 12 11 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f043f6ae000 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:750 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 12 16 2 (const_int 0 [0]) ge2fitman_sup.cpp:752 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 16 15 0 NOTE_INSN_DELETED)

;; Function void close_infiles(FILE**) (_Z13close_infilesPP8_IO_FILE, funcdef_no=1033, decl_uid=24487, cgraph_uid=238, symbol_order=239)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 30:  (0) rm  (1) 0  (2) re {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5
EBB 6
EBB 8
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
  BB 8
   Insn 42: point = 0
  BB 3
   Insn 9: point = 0
   Insn 8: point = 0
  BB 6
   Insn 38: point = 0
   Insn 30: point = 0
  BB 5
   Insn 27: point = 0
   Insn 26: point = 0
   Insn 25: point = 1
   Insn 24: point = 3
   Insn 23: point = 5
   Insn 22: point = 6
   Insn 21: point = 8
   Insn 20: point = 10
  BB 4
   Insn 18: point = 11
   Insn 17: point = 11
   Insn 16: point = 12
   Insn 15: point = 14
   Insn 14: point = 16
   Insn 13: point = 17
   Insn 12: point = 19
   Insn 11: point = 21
  BB 2
   Insn 6: point = 22
   Insn 2: point = 22
 r87: [18..19]
 r88: [15..17]
 r89: [13..14]
 r90: [11..12]
 r91: [7..8]
 r92: [4..6]
 r93: [2..3]
 r94: [0..1]
 r95: [20..21]
 r96: [15..16]
 r97: [9..10]
 r98: [4..5]
Compressing live ranges: from 22 to 20 - 90%
Ranges after the compression:
 r87: [16..17]
 r88: [14..15]
 r89: [12..13]
 r90: [10..11]
 r91: [6..7]
 r92: [4..5]
 r93: [2..3]
 r94: [0..1]
 r95: [18..19]
 r96: [14..15]
 r97: [8..9]
 r98: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 27.


void close_infiles(FILE**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={12d,10u} r1={4d,2u,2e} r2={2d} r4={2d} r5={3d,2u} r6={1d,17u} r7={1d,9u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={8d,2u} r18={1d} r19={1d} r20={1d,1u,2e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 157{110d,43u,4e} in 23{22 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
        (reg:DI 5 di [ in_file ])) ge2fitman_sup.cpp:757 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 31 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:760 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              6 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 31 6 7 3 142 "" [1 uses])
(note 7 31 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:760 7 {*cmpsi_1}
     (nil))
(jump_insn 9 8 10 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 41)
            (pc))) ge2fitman_sup.cpp:760 612 {*jcc_1}
     (nil)
 -> 41)
;;  succ:       8
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 95 96
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:761 90 {*movsi_internal}
     (nil))
(insn 12 11 13 4 (set (reg:DI 0 ax [orig:87 D.25656 ] [87])
        (sign_extend:DI (reg:SI 0 ax [95]))) ge2fitman_sup.cpp:761 142 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 4 (parallel [
            (set (reg:DI 1 dx [orig:88 D.25656 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 D.25656 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:761 512 {*ashldi3_1}
     (nil))
(insn 14 13 15 4 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) ge2fitman_sup.cpp:761 89 {*movdi_internal}
     (nil))
(insn 15 14 16 4 (parallel [
            (set (reg/f:DI 0 ax [orig:89 D.25657 ] [89])
                (plus:DI (reg/f:DI 0 ax [96])
                    (reg:DI 1 dx [orig:88 D.25656 ] [88])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:761 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:88 D.25656 ] [88]))
        (nil)))
(insn 16 15 17 4 (set (reg/f:DI 0 ax [orig:90 D.25658 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [orig:89 D.25657 ] [89]) [0 *_9+0 S8 A64])) ge2fitman_sup.cpp:761 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:90 D.25658 ] [90])
            (const_int 0 [0]))) ge2fitman_sup.cpp:761 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 18 17 19 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) ge2fitman_sup.cpp:761 612 {*jcc_1}
     (nil)
 -> 28)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 97 98
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 0 ax [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:762 90 {*movsi_internal}
     (nil))
(insn 21 20 22 5 (set (reg:DI 0 ax [orig:91 D.25656 ] [91])
        (sign_extend:DI (reg:SI 0 ax [97]))) ge2fitman_sup.cpp:762 142 {*extendsidi2_rex64}
     (nil))
(insn 22 21 23 5 (parallel [
            (set (reg:DI 1 dx [orig:92 D.25656 ] [92])
                (ashift:DI (reg:DI 0 ax [orig:91 D.25656 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:762 512 {*ashldi3_1}
     (nil))
(insn 23 22 24 5 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])) ge2fitman_sup.cpp:762 89 {*movdi_internal}
     (nil))
(insn 24 23 25 5 (parallel [
            (set (reg/f:DI 0 ax [orig:93 D.25657 ] [93])
                (plus:DI (reg/f:DI 0 ax [98])
                    (reg:DI 1 dx [orig:92 D.25656 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:762 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 in_file+0 S8 A64])
            (reg:DI 1 dx [orig:92 D.25656 ] [92]))
        (nil)))
(insn 25 24 26 5 (set (reg/f:DI 0 ax [orig:94 D.25658 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [orig:93 D.25657 ] [93]) [0 *_13+0 S8 A64])) ge2fitman_sup.cpp:762 89 {*movdi_internal}
     (nil))
(insn 26 25 27 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 D.25658 ] [94])) ge2fitman_sup.cpp:762 89 {*movdi_internal}
     (nil))
(call_insn 27 26 28 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f043f4df1b0 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:762 669 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 28 27 29 6 141 "" [1 uses])
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 38 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:760 217 {*addsi_1}
     (nil))
(jump_insn 38 30 39 6 (set (pc)
        (label_ref 31)) ge2fitman_sup.cpp:760 654 {jump}
     (nil)
 -> 31)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 39 38 41)
;; basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 7, flags: (NEW, RTL, MODIFIED)
;;  pred:       3
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 41 39 40 8 143 "" [1 uses])
(note 40 41 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 40 36 8 (const_int 0 [0]) ge2fitman_sup.cpp:765 684 {nop}
     (nil))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 36 42 37 7 139 "" [0 uses])
(note 37 36 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 43 37 0 NOTE_INSN_DELETED)

;; Function void printHex(char*, int) (_Z8printHexPci, funcdef_no=1034, decl_uid=24490, cgraph_uid=239, symbol_order=240)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=15,losers=1,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 0 in insn 18:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) q  (1) qm {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 30:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 40: point = 0
   Insn 37: point = 0
   Insn 36: point = 0
  BB 3
   Insn 13: point = 0
   Insn 12: point = 0
   Insn 11: point = 1
  BB 4
   Insn 41: point = 2
   Insn 30: point = 2
   Insn 29: point = 2
   Insn 28: point = 2
   Insn 27: point = 2
   Insn 26: point = 2
   Insn 25: point = 3
   Insn 24: point = 4
   Insn 23: point = 6
   Insn 22: point = 7
   Insn 21: point = 9
   Insn 20: point = 10
   Insn 19: point = 12
   Insn 18: point = 14
   Insn 17: point = 16
   Insn 16: point = 17
   Insn 15: point = 19
  BB 2
   Insn 9: point = 20
   Insn 8: point = 20
   Insn 7: point = 21
   Insn 3: point = 22
   Insn 2: point = 22
 r87: [15..17]
 r88: [13..14]
 r89: [11..12]
 r90: [3..10]
 r91: [5..7]
 r92: [2..4]
 r93: [20..21]
 r94: [0..1]
 r95: [18..19]
 r96: [15..16]
 r97: [8..9]
 r98: [5..6]
Compressing live ranges: from 22 to 18 - 81%
Ranges after the compression:
 r87: [12..13]
 r88: [10..11]
 r89: [8..9]
 r90: [2..7]
 r91: [4..5]
 r92: [2..3]
 r93: [16..17]
 r94: [0..1]
 r95: [14..15]
 r96: [12..13]
 r97: [6..7]
 r98: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 25
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 37.


void printHex(char*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,8u} r1={7d,4u,1e} r2={5d,2u,1e} r4={4d,2u} r5={5d,3u} r6={1d,18u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={6d,1u} r18={2d} r19={2d} r20={1d,1u,2e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 233{183d,46u,4e} in 28{26 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 93
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])
        (reg:DI 5 di [ theThing ])) ge2fitman_sup.cpp:770 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32])
        (reg:SI 4 si [ size ])) ge2fitman_sup.cpp:770 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])) ge2fitman_sup.cpp:773 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])
        (reg/f:DI 0 ax [93])) ge2fitman_sup.cpp:773 89 {*movdi_internal}
     (nil))
(insn 9 8 31 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) ge2fitman_sup.cpp:774 90 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              4 [100.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94
(code_label 31 9 10 3 146 "" [1 uses])
(note 10 31 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 ax [94])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:774 90 {*movsi_internal}
     (nil))
(insn 12 11 13 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [94])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 size+0 S4 A32]))) ge2fitman_sup.cpp:774 7 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) ge2fitman_sup.cpp:774 612 {*jcc_1}
     (nil)
 -> 34)
;;  succ:       5
;;              4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 95 96 97 98
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:SI 0 ax [95])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:775 90 {*movsi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 1 dx [orig:87 D.25659 ] [87])
        (sign_extend:DI (reg:SI 0 ax [95]))) ge2fitman_sup.cpp:775 142 {*extendsidi2_rex64}
     (nil))
(insn 17 16 18 4 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])) ge2fitman_sup.cpp:775 89 {*movdi_internal}
     (nil))
(insn 18 17 19 4 (parallel [
            (set (reg/f:DI 0 ax [orig:88 D.25660 ] [88])
                (plus:DI (reg/f:DI 0 ax [96])
                    (reg:DI 1 dx [orig:87 D.25659 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:775 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 theThing+0 S8 A64])
            (reg:DI 1 dx [orig:87 D.25659 ] [87]))
        (nil)))
(insn 19 18 20 4 (set (reg:QI 0 ax [orig:89 D.25661 ] [89])
        (mem:QI (reg/f:DI 0 ax [orig:88 D.25660 ] [88]) [0 *_9+0 S1 A8])) ge2fitman_sup.cpp:775 93 {*movqi_internal}
     (nil))
(insn 20 19 21 4 (set (reg:SI 0 ax [orig:90 D.25662 ] [90])
        (sign_extend:SI (reg:QI 0 ax [orig:89 D.25661 ] [89]))) ge2fitman_sup.cpp:775 148 {extendqisi2}
     (nil))
(insn 21 20 22 4 (set (reg:SI 1 dx [97])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) ge2fitman_sup.cpp:775 90 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 2 cx [orig:91 D.25659 ] [91])
        (sign_extend:DI (reg:SI 1 dx [97]))) ge2fitman_sup.cpp:775 142 {*extendsidi2_rex64}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 1 dx [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])) ge2fitman_sup.cpp:775 89 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:DI 2 cx [orig:92 D.25660 ] [92])
                (plus:DI (reg:DI 2 cx [orig:91 D.25659 ] [91])
                    (reg/f:DI 1 dx [98])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:775 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 addr+0 S8 A64])
            (reg:DI 2 cx [orig:91 D.25659 ] [91]))
        (nil)))
(insn 25 24 26 4 (set (reg:SI 1 dx)
        (reg:SI 0 ax [orig:90 D.25662 ] [90])) ge2fitman_sup.cpp:775 90 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:92 D.25660 ] [92])) ge2fitman_sup.cpp:775 89 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC113") [flags 0x2]  <var_decl 0x7f043e03aab0 *.LC113>)) ge2fitman_sup.cpp:775 89 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) ge2fitman_sup.cpp:775 93 {*movqi_internal}
     (nil))
(call_insn 29 28 30 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f043f6ad5e8 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:775 669 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 30 29 41 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) ge2fitman_sup.cpp:774 217 {*addsi_1}
     (nil))
(jump_insn 41 30 42 4 (set (pc)
        (label_ref 31)) ge2fitman_sup.cpp:774 654 {jump}
     (nil)
 -> 31)
;;  succ:       3 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 42 41 34)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(code_label 34 42 35 5 145 "" [1 uses])
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg:SI 5 di)
        (const_int 10 [0xa])) ge2fitman_sup.cpp:778 90 {*movsi_internal}
     (nil))
(call_insn 37 36 40 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7f043f6ada20 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) ge2fitman_sup.cpp:778 669 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 40 37 43 5 (const_int 0 [0]) ge2fitman_sup.cpp:779 684 {nop}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 43 40 0 NOTE_INSN_DELETED)

;; Function void __static_initialization_and_destruction_0(int, int) (_Z41__static_initialization_and_destruction_0ii, funcdef_no=1035, decl_uid=24730, cgraph_uid=240, symbol_order=267)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


void __static_initialization_and_destruction_0(int, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={4d,1u} r2={3d} r4={4d,2u} r5={5d,3u} r6={1d,10u} r7={1d,8u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 195{168d,27u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
        (reg:SI 5 di [ __initialize_p ])) ge2fitman_sup.cpp:779 90 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
        (reg:SI 4 si [ __priority ])) ge2fitman_sup.cpp:779 90 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 __initialize_p+0 S4 A32])
            (const_int 1 [0x1]))) ge2fitman_sup.cpp:779 7 {*cmpsi_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) ge2fitman_sup.cpp:779 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 __priority+0 S4 A32])
            (const_int 65535 [0xffff]))) ge2fitman_sup.cpp:779 7 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 25)
            (pc))) ge2fitman_sup.cpp:779 612 {*jcc_1}
     (nil)
 -> 25)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7f043e238000 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 4 (call (mem:QI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x7f043e5a9870 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/iostream:74 660 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 4 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7f043e2b26c0 __dso_handle>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 16 15 17 4 (set (reg:DI 4 si)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7f043e238000 __ioinit>)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(insn 17 16 18 4 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7f043e5a9a20 __comp_dtor >)) /usr/include/c++/5/iostream:74 89 {*movdi_internal}
     (nil))
(call_insn 18 17 25 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7f043e26abd0 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/iostream:74 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 5, flags: (NEW, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              2
;;              3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 25 18 23 6 149 "" [2 uses])
(note 23 25 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 21 6 (const_int 0 [0]) ge2fitman_sup.cpp:779 684 {nop}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 21 24 22 5 147 "" [0 uses])
(note 22 21 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 26 22 0 NOTE_INSN_DELETED)

;; Function (static initializers for ge2fitman_sup.cpp) (_GLOBAL__sub_I__Z18endianCheck_systemP12Endian_Checkb, funcdef_no=1036, decl_uid=24736, cgraph_uid=241, symbol_order=371)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
starting the processing of deferred insns
ending the processing of deferred insns


(static initializers for ge2fitman_sup.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={3d,1u} r5={3d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{92d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 4 si)
        (const_int 65535 [0xffff])) ge2fitman_sup.cpp:779 90 {*movsi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) ge2fitman_sup.cpp:779 90 {*movsi_internal}
     (nil))
(call_insn 7 6 10 2 (call (mem:QI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x7f043e26ae58 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S1 A8])
        (const_int 0 [0])) ge2fitman_sup.cpp:779 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 10 7 0 NOTE_INSN_DELETED)
